<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>suda-morris&#39;s Personal Blog</title>
  
  <subtitle>Geek makes life better.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://suda-morris.github.io/"/>
  <updated>2019-01-07T14:05:34.404Z</updated>
  <id>https://suda-morris.github.io/</id>
  
  <author>
    <name>suda-morris</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue</title>
    <link href="https://suda-morris.github.io/2019/01/05/vue/"/>
    <id>https://suda-morris.github.io/2019/01/05/vue/</id>
    <published>2019-01-05T15:10:00.000Z</published>
    <updated>2019-01-07T14:05:34.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>Vue在设计上使用<code>MVVM</code>模式，当<code>View</code>发生变化时会自动更新到<code>ViewModel</code>，反之亦然。<code>View</code>和<code>ViewModel</code>之间通过双向绑定建立联系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 使用自定义过滤器对数据进行过滤 --&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;date_time | formatDateTime&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;name&quot; placeholder=&quot;你的名字&quot;&gt;</span><br><span class="line">    &lt;!-- 使用 v-pre 即可跳过这个元素和它的子元素的编译过程 --&gt;</span><br><span class="line">    &lt;h3 v-pre&gt;&#123;&#123;这里的内容是不会被编译的&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;!-- 除了简单的绑定属性值外，还可以使用 JavaScript 表达式进行简单的运算、三元运算 --&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;isDone?&quot;Done&quot;:&quot;Not Done&quot;&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;app&quot;,</span><br><span class="line">  data: function() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &quot;Hello esp-desk&quot;,</span><br><span class="line">      isDone: true,</span><br><span class="line">      date_time: new Date()</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  filters: &#123;</span><br><span class="line">    formatDateTime: function(value) &#123;</span><br><span class="line">      var date = new Date(value);</span><br><span class="line">      var year = date.getFullYear();</span><br><span class="line">      var month = date.getMonth() + 1;</span><br><span class="line">      var day = date.getDate();</span><br><span class="line">      var hours = date.getHours();</span><br><span class="line">      var minutes = date.getMinutes();</span><br><span class="line">      var seconds = date.getSeconds();</span><br><span class="line">      return (</span><br><span class="line">        year +</span><br><span class="line">        &quot;-&quot; +</span><br><span class="line">        month +</span><br><span class="line">        &quot;-&quot; +</span><br><span class="line">        day +</span><br><span class="line">        &quot; &quot; +</span><br><span class="line">        hours +</span><br><span class="line">        &quot;:&quot; +</span><br><span class="line">        minutes +</span><br><span class="line">        &quot;:&quot; +</span><br><span class="line">        seconds</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created: function() &#123;</span><br><span class="line">    // 实例创建完成后调用，此阶段完成了数据的观测等，但尚未挂载， 此时 $el 还不可用。需要初始化处理一些数据时会比较有用</span><br><span class="line">    console.log(this.name);</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted: function() &#123;</span><br><span class="line">    //el 挂载到实例上后调用，一般第一个业务逻辑会在这里开始</span><br><span class="line">    console.log(this.$el);</span><br><span class="line">    var _this = this; //声明一个变量指向 Vue 实例 this ，保证作用域一致</span><br><span class="line">    this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">      _this.date_time = new Date();</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy: function() &#123;</span><br><span class="line">    //实例销毁之前调用。主要解绑一些使用 addEventListener 监听的事件等</span><br><span class="line">    console.log(&quot;beforeDestory&quot;);</span><br><span class="line">    if (this.timer) &#123;</span><br><span class="line">      clearInterval(this.timer);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>模板内的表达式只能用于简单的运算，逻辑复杂时，使用vue实例的计算属性<code>computed</code>。计算属性可以完成各种复杂的逻辑，包括运算、函数调用等。<strong>计算属性还可以依赖多个vue实例的数据</strong>，只要其中任一数据有变化，计算属性就会重新执行。</p><p>计算属性与methods的主要区别在于，计算属性是基于它的<strong>依赖缓存</strong>的，只有当依赖的数据发生变化时才会执行计算。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;reverseText&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;app&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      text: &quot;192.168.10.11&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    reverseText: function() &#123;</span><br><span class="line">      return this.text</span><br><span class="line">        .split(&quot;.&quot;)</span><br><span class="line">        .reverse()</span><br><span class="line">        .join(&quot;.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h2><h3 id="v-bind及其语法糖"><a href="#v-bind及其语法糖" class="headerlink" title="v-bind及其语法糖"></a>v-bind及其语法糖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;img :src=&quot;imgUrl&quot;&gt;</span><br><span class="line">    &lt;a v-bind:href=&quot;url&quot;&gt;百度&lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;app&quot;,</span><br><span class="line">  data: function() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      url: &quot;https://www.baidu.com&quot;,</span><br><span class="line">      imgUrl: &quot;https://s2.ax1x.com/2019/01/06/FHVUR1.jpg&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="绑定class"><a href="#绑定class" class="headerlink" title="绑定class"></a>绑定class</h4><p>给<code>v-bind:class</code>设置一个对象，可以动态切换class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;static&quot; :class=&quot;&#123;&apos;active&apos;:isActive, &apos;error&apos;:isError&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>类名active依赖于数据isActive，当其为true时，div会拥有类名Active，为false时则没有</li><li><code>:class</code>可以与普通class共存</li><li>当<code>:class</code>的表达式过长或者逻辑复杂时，还可以绑定<strong>计算属性</strong></li></ul><p>给<code>v-bind:class</code>设置一个数组，应用一个class列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div :class=&quot;[&#123;&apos;active&apos;: isActive&#125;, errorCls]&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isActive: true,</span><br><span class="line">            errorCls: &apos;error&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="绑定style"><a href="#绑定style" class="headerlink" title="绑定style"></a>绑定style</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div :style=&quot;styles&quot;&gt;文本&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            styles: &#123;</span><br><span class="line">                color: &apos;red&apos;,</span><br><span class="line">                fontSize: 14 + &apos;px&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-on及其语法糖"><a href="#v-on及其语法糖" class="headerlink" title="v-on及其语法糖"></a>v-on及其语法糖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2 v-if=&quot;show&quot;&gt;这是一段文字&lt;/h2&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;hideLabel&quot;&gt;隐藏文字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showLabel&quot;&gt;显示文字&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;app&quot;,</span><br><span class="line">  data: function() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      show: true</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    hideLabel: function() &#123;</span><br><span class="line">      this.show = false;</span><br><span class="line">    &#125;,</span><br><span class="line">    showLabel: function() &#123;</span><br><span class="line">      this.show = true;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p><code>v-once</code>是一个不需要表达式的指令，作用是定义它的元素或组件只渲染一次，包括元素或组件的所有子节点。首次渲染后，不再随数据的变化重新渲染，将被视为静态内容。<code>v-once</code>在业务中很少使用，当需要进一步优化性能的时候，可能会用到。</p><h3 id="v-if、v-else-if、v-else条件渲染指令"><a href="#v-if、v-else-if、v-else条件渲染指令" class="headerlink" title="v-if、v-else-if、v-else条件渲染指令"></a>v-if、v-else-if、v-else条件渲染指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;template v-if=&quot;status===1&quot;&gt;</span><br><span class="line">      &lt;h2&gt;status:1&lt;/h2&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template v-else-if=&quot;status===2&quot;&gt;</span><br><span class="line">      &lt;h3&gt;status:2&lt;/h3&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template v-else&gt;</span><br><span class="line">      &lt;h4&gt;status:3&lt;/h4&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;app&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      status: 3</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>Vue在渲染元素时，处于效率考虑，会尽可能复用已有的元素而非重新渲染。如果不希望这样做，可以使用Vue提供的<code>key</code>属性，它可以让你自己决定是否要复用元素，key的值必须是唯一的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;template v-if=&quot;type===&apos;name&apos;&quot;&gt;</span><br><span class="line">      &lt;label&gt;用户名：&lt;/label&gt;</span><br><span class="line">      &lt;input placeholder=&quot;输入用户名&quot; :key=&quot;name-input&quot;&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template v-else&gt;</span><br><span class="line">      &lt;label&gt;邮箱：&lt;/label&gt;</span><br><span class="line">      &lt;input placeholder=&quot;输入邮箱&quot; :key=&quot;mail-input&quot;&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;button @click=&quot;changeType&quot;&gt;切换输入类型&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;app&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      type: &quot;name&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeType: function() &#123;</span><br><span class="line">      this.type = this.type === &quot;name&quot; ? &quot;email&quot; : &quot;name&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p><code>v-show</code>的用法与<code>v-if</code>基本一致，只不过<code>v-show</code>是改变元素的CSS属性display，当<code>v-show</code>表达式的值为false时，元素会隐藏，查看DOM结构会看到元素上加载了内联样式<code>display:none</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;p v-show=&quot;status===1&quot;&gt;当status为1时显示该行&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;app&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      status: 1</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>v-show只是简单的CSS属性切换，无论条件真与否，都会被编译，相比之下，<code>v-if</code>更适合条件不经常改变的场景，因为它切换开销相对较大，而<code>v-show</code>适用于频繁切换条件</li><li><strong><code>v-show</code>不能在\&lt;template>上使用</strong></li></ul><h3 id="列表渲染指令-v-for"><a href="#列表渲染指令-v-for" class="headerlink" title="列表渲染指令 v-for"></a>列表渲染指令 v-for</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据绑定&quot;&gt;&lt;a href=&quot;#数据绑定&quot; class=&quot;headerlink&quot; title=&quot;数据绑定&quot;&gt;&lt;/a&gt;数据绑定&lt;/h2&gt;&lt;p&gt;Vue在设计上使用&lt;code&gt;MVVM&lt;/code&gt;模式，当&lt;code&gt;View&lt;/code&gt;发生变化时会自动更新到&lt;cod
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="Vue" scheme="https://suda-morris.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Xtensa Assembly</title>
    <link href="https://suda-morris.github.io/2019/01/04/xtensa-assembly/"/>
    <id>https://suda-morris.github.io/2019/01/04/xtensa-assembly/</id>
    <published>2019-01-04T08:08:00.000Z</published>
    <updated>2019-01-07T12:02:26.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Xtensa-微处理器介绍"><a href="#Xtensa-微处理器介绍" class="headerlink" title="Xtensa 微处理器介绍"></a>Xtensa 微处理器介绍</h2><p>Xtensa使用的指令集架构属于类RISC架构，主要针对嵌入式应用场合。在移植/编写操作系统的时候需要额外注意以下几点：</p><ol><li>不同的指令其宽度可能不同</li><li>window寄存器的使用</li><li>处理器的可配置性</li><li>处理器的扩展性（指令集可扩展）</li></ol><h2 id="Xtensa-硬件抽象层HAL"><a href="#Xtensa-硬件抽象层HAL" class="headerlink" title="Xtensa 硬件抽象层HAL"></a>Xtensa 硬件抽象层HAL</h2><h3 id="编译时HAL——CHAL"><a href="#编译时HAL——CHAL" class="headerlink" title="编译时HAL——CHAL"></a>编译时HAL——CHAL</h3><p>包括C语言预处理器和汇编语言的宏定义（用来表征不同xtensa处理器的不同配置）</p><h3 id="链接时HAL——LHAL"><a href="#链接时HAL——LHAL" class="headerlink" title="链接时HAL——LHAL"></a>链接时HAL——LHAL</h3><ol><li>给操作系统移植层调用</li><li>给底层软件（需要处理ISA相关的功能）调用，例如提供保存现场window frame的接口</li></ol><h2 id="窗寄存器函数调用规范-Windowed-Calling-Convention"><a href="#窗寄存器函数调用规范-Windowed-Calling-Convention" class="headerlink" title="窗寄存器函数调用规范(Windowed Calling Convention)"></a>窗寄存器函数调用规范(Windowed Calling Convention)</h2><p>现代处理器为了更好的支持高级编程语言的高效编译，通常处理器所拥有的通用寄存器的数目有16个甚至32个之多，如此多的寄存器在比较复杂的应用程序上实现深度嵌套调用的时候，为了保证程序的正确执行，寄存器要频繁地进行入栈和出栈的操作，这样频繁的堆栈memory的访问将明显恶化应用程序的性能。为了有效解决这一问题，Xtensa架构设计了一种<code>Windows旋转</code>方式的<code>寄存器管理</code>机制，<strong>将逻辑寄存器和物理寄存器分开</strong>，在函数调用的时候通过windows滑动切换逻辑寄存器，从而避免寄存器覆盖，减少压栈和出栈的操作。</p><h3 id="AR物理寄存器环形Buffer"><a href="#AR物理寄存器环形Buffer" class="headerlink" title="AR物理寄存器环形Buffer"></a>AR物理寄存器环形Buffer</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/01/07/Fbr9IO.png" alt="AR物理寄存器环形buffer" title="">                </div>                <div class="image-caption">AR物理寄存器环形buffer</div>            </figure><p>基本实现原理：使用更多的物理AR寄存器组成一个环形的buffer。这些寄存器每4个为一组（pane），WindowStart中的每个比特依次表示该组是否作为逻辑寄存器窗口的起始位置或者被占用。当前的逻辑寄存器的起始位置则用WindowBase状态寄存器来表示。<strong>在发生函数调用的时候是通过修改WindowBase寄存器，滑动逻辑寄存器窗口</strong>，从而父子函数看到的是不同的物理寄存器，避免了寄存器的压栈和出栈。</p><p>以每4个寄存器（pane）为单位，函数调用的时候窗口可以滑动4个，8个或者12个物理寄存器，分别可以用call4,call8,call12指令来实现，而最典型的应用则为call8。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/01/07/Fb2cmd.png" alt="call8 Windows ABI调用规范" title="">                </div>                <div class="image-caption">call8 Windows ABI调用规范</div>            </figure><ul><li>a0用来保存函数返回地址</li><li>a1保存sp堆栈指针</li><li>a2～a7用来传递函数入参，参数超过6个的时候则需要使用堆栈</li><li><strong>对调用者函数和被调用函数来说，a0~a7是独立的寄存器，可以自由使用，而a8~a15则为scratch寄存器，随时会被子函数使用，调用者函数如果要使用，则在调用子函数前进行压栈保存</strong></li></ul><p>为了方便寄存器正常的保存与恢复，还要调用栈的高效回溯，还有必要对函数的Frame栈空间做统一的安排。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/01/07/FbOOEV.png" alt="Window ABI 堆栈布局" title="">                </div>                <div class="image-caption">Window ABI 堆栈布局</div>            </figure><ul><li>Base Area用于存储其父函数的基本寄存器<code>a0</code>~<code>a3</code></li></ul><h3 id="Windows寄存器覆盖问题"><a href="#Windows寄存器覆盖问题" class="headerlink" title="Windows寄存器覆盖问题"></a>Windows寄存器覆盖问题</h3><p>在发生函数调用，执行call指令的时候，窗递增值（call4，call8，call12分别对应1,2,3）存入PS处理器状态寄存器的<code>CALLINC</code>域，在进入函数的入口处用<code>entry</code>指令进行Window重叠检测，条件满足的时候将触发相应的windows overflow异常，引导程序进行覆盖寄存器的入栈保护。</p><h3 id="Windows寄存器underflow问题"><a href="#Windows寄存器underflow问题" class="headerlink" title="Windows寄存器underflow问题"></a>Windows寄存器underflow问题</h3><p>当子函数返回时，RETW或者RETW.N指令执行，此时也仅此时处理器将进行上溢检查。如果当Windowbase所在的位置的前3个windows pane的WindowStart比特都为0，则意味着它返回后的父函数发生过WindowOverflow，父函数的窗口寄存器曾经被压入stack。如果不是全为0，则应该不为零0的点和正常window返回的点对应，就返回，如果不同，则说明发生了不正常的调用，a0被破坏掉了，要产生非法指令错误。</p><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><p><code>前6个参数会传递给 AR 寄存器，剩余的参数会被保存在stack中。</code></p><p>对于<code>callN</code>指令（N取值4,8或者12）来说，函数调用者会将参数保存到寄存器AR[N+2]到AR[N+7]中（特别注意，<code>call12</code>指令是能用于调用只有两个或者更少参数的函数，只能使用AR[N+2]和AR[N+3]寄存器），函数被调用者会从寄存器AR[2]到AR[7]中接收这些参数。</p><p>如果参数的数量多于6个，剩下的参数就会被保存在函数调用者的堆栈，即第七个参数保存在[sp+0]处，第八个参数保存在[sp+4]处，依此类推。函数被调用者需要从内存的[sp+FRAMESIZE]处获取这些额外的参数，其中<code>FRAMESIZE</code>是被调用者的<code>stack frame</code>大小，通常会用<code>entry</code>指令指定。</p><p>以下C程序代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d, <span class="keyword">int</span> e, <span class="keyword">int</span> f,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">int</span> g, <span class="keyword">int</span> h, <span class="keyword">int</span> i )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">j = a + b + c + d + e + f + g + h + i;</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的汇编程序代码为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.align 4</span><br><span class="line">.global func</span><br><span class="line">func:</span><br><span class="line">.frame a1, 32</span><br><span class="line">.LBB1_func:</span><br><span class="line">entry a1,32 // 此函数的 FRAMESIZE 是32字节</span><br><span class="line">l32i.n a10,a1,40</span><br><span class="line">.LBB2_func:</span><br><span class="line">l32i.n a8,a1,32</span><br><span class="line">add.n a12,a5,a6</span><br><span class="line">add.n a11,a2,a3</span><br><span class="line">l32i.n a2,a1,36</span><br><span class="line">add.n a11,a4,a11</span><br><span class="line">add.n a11,a11,a12</span><br><span class="line">add.n a8,a8,a7</span><br><span class="line">add.n a2,a2,a10</span><br><span class="line">add.n a8,a8,a11</span><br><span class="line">add.n a2,a2,a8//返回值如果不超过4字节，就会被保存在 a2 寄存器中</span><br><span class="line">retw.n</span><br></pre></td></tr></table></figure><h3 id="函数调用和返回"><a href="#函数调用和返回" class="headerlink" title="函数调用和返回"></a>函数调用和返回</h3><h2 id="编写Xtensa汇编代码"><a href="#编写Xtensa汇编代码" class="headerlink" title="编写Xtensa汇编代码"></a>编写Xtensa汇编代码</h2><p>部分底层驱动只能使用汇编语言编写，比如：</p><ul><li>用户异常处理</li><li>内核异常处理</li><li>window处理</li><li>复位处理</li></ul><h3 id="使用汇编实现16比特点积运算"><a href="#使用汇编实现16比特点积运算" class="headerlink" title="使用汇编实现16比特点积运算"></a>使用汇编实现16比特点积运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;dsls_dotprod_16s_m_ae32.S&quot;</span><br><span class="line">#include &quot;dsl_err_codes.h&quot;</span><br><span class="line"></span><br><span class="line">.text //保存在代码段</span><br><span class="line">.align  4 // 与PC有关的跳转指令需要目标地址4字节对齐</span><br><span class="line">.global dsls_dotprod_16s_ae32 // 声明该函数全局可访问</span><br><span class="line">.type   dsls_dotprod_16s_ae32,@function // 声明符号是函数类型（方便调试器更好地展示信息）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 良好的习惯是在汇编函数开始前，注释其C语言原型</span><br><span class="line">// esp_err_t dsls_dotprod_16s_ae32(int16_t* src1, int16_t* src2, int16_t* dest, int len, int8_t shift);</span><br><span class="line">dsls_dotprod_16s_ae32: </span><br><span class="line">// src1 - a2</span><br><span class="line">// src2 - a3</span><br><span class="line">// dest - a4</span><br><span class="line">// len  - a5</span><br><span class="line">// shift - a6</span><br><span class="line"></span><br><span class="line">entrya1, 32 // 每个函数都以一条entry指令开头，这是window寄存器调用规范所要求的</span><br><span class="line"></span><br><span class="line">// Check minimum length</span><br><span class="line">movi a8, 4</span><br><span class="line">blt a5, a8, dsls_dotprod_16s_ae32_error</span><br><span class="line"></span><br><span class="line">// Clear accumulator</span><br><span class="line">movi a8, 0</span><br><span class="line">wsr a8, acchi</span><br><span class="line"></span><br><span class="line">// Prepare and load round value</span><br><span class="line">movi a8, 0x7fff</span><br><span class="line">ssr a6</span><br><span class="line">srl a8, a8</span><br><span class="line">wsr a8, acclo // initialize acc with shifted round value</span><br><span class="line"></span><br><span class="line">// Compensate for pre-increment </span><br><span class="line">// Right shift to 16 bits</span><br><span class="line">// RS = -shift + 15</span><br><span class="line">neg  a6, a6 </span><br><span class="line">addi a6, a6, 15</span><br><span class="line"></span><br><span class="line">/* number of loop iterations (see below):</span><br><span class="line"> * a7 = count / 4 - 1</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">srli a7, a5, 2</span><br><span class="line">addi a7, a7, -1</span><br><span class="line"></span><br><span class="line">movi.na10, 0 // load 0 to the a10 to increment second array</span><br><span class="line"></span><br><span class="line">dotprod_16s_ae32_full a2, a3, a7, a5</span><br><span class="line"></span><br><span class="line">/* Get accumulator */</span><br><span class="line">ssr a6</span><br><span class="line">rsr a2, acchi</span><br><span class="line">rsr a3, acclo</span><br><span class="line">src a2, a2, a3</span><br><span class="line"></span><br><span class="line">s16ia2, a4, 0</span><br><span class="line">movi.na2, 0//返回值保存在 a2 寄存器中</span><br><span class="line">retw.n</span><br><span class="line">dsls_dotprod_16s_ae32_error:</span><br><span class="line">movi.na2, ESP_ERR_DSL_INVALID_LENGTH</span><br><span class="line">retw.n</span><br></pre></td></tr></table></figure><ul><li>有些指令会以<code>.n</code>作为后缀，Xtensa处理器为了进一步提高代码密度，提供了一些常用指令的16比特版本，这里的<code>n</code>代表narrow</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Xtensa-微处理器介绍&quot;&gt;&lt;a href=&quot;#Xtensa-微处理器介绍&quot; class=&quot;headerlink&quot; title=&quot;Xtensa 微处理器介绍&quot;&gt;&lt;/a&gt;Xtensa 微处理器介绍&lt;/h2&gt;&lt;p&gt;Xtensa使用的指令集架构属于类RISC架构，主要
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="Assembly" scheme="https://suda-morris.github.io/tags/Assembly/"/>
    
      <category term="Xtensa" scheme="https://suda-morris.github.io/tags/Xtensa/"/>
    
  </entry>
  
  <entry>
    <title>Inline Assembly</title>
    <link href="https://suda-morris.github.io/2019/01/03/inline-assembly/"/>
    <id>https://suda-morris.github.io/2019/01/03/inline-assembly/</id>
    <published>2019-01-03T08:45:00.000Z</published>
    <updated>2019-01-03T09:38:48.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GCC内联汇编的标准格式"><a href="#GCC内联汇编的标准格式" class="headerlink" title="GCC内联汇编的标准格式"></a>GCC内联汇编的标准格式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">asm</span>　<span class="title">volatile</span><span class="params">(<span class="string">"Instruction List"</span> : Output : Input : Clobber/Modify)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="asm"><a href="#asm" class="headerlink" title="asm"></a>asm</h3><p>用来声明一个内联汇编表达式，任何一个内联汇编表达式都以它开头</p><h3 id="Instruction-List"><a href="#Instruction-List" class="headerlink" title="Instruction List"></a>Instruction List</h3><p>汇编指令序列，可以为空。比如Linux内核中的内存屏障：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> barrier() asm(<span class="meta-string">""</span>:::<span class="meta-string">"memory"</span>); <span class="comment">//它向GCC声明“内存发生了改动，GCC在编译时会将此因素考虑进去。</span></span></span><br></pre></td></tr></table></figure><ul><li>每条指令必须被双引号括起来</li><li>两条指令必须用换行或者分号分开</li></ul><p>例如，在ARM系统结构上关闭中断的操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">disable_interrupts</span> <span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> old,temp; </span><br><span class="line">    <span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(<span class="string">"mrs %0, cpsr\n"</span> </span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="string">"orr %1, %0, #0x80\n"</span> </span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="string">"msr cpsr_c, %1"</span> </span></span></span><br><span class="line">                 : "=r" (old), "=r" (temp) </span><br><span class="line">                 : </span><br><span class="line">                 : <span class="string">"memory"</span>); </span><br><span class="line">    <span class="keyword">return</span> (old &amp; <span class="number">0x80</span>) == <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>向GCC声明不允许对该内联汇编进行优化，否则当使用了优化选项<code>-O</code>进行编译时，GCC会根据自己的判断决定是否将这个内联汇编表达式中的指令优化掉</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>指定当前内联汇编语句的输出，例如从arm协处理器p15中读出c1的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">read_p15_c1</span> <span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> value; </span><br><span class="line">    <span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(<span class="string">"mrc p15, 0, %0, c1, c0, 0 @ read control reg\n"</span> </span></span></span><br><span class="line">                 : "=r" (value) @编译器选择一个R*寄存器 </span><br><span class="line">                 : </span><br><span class="line">                 : <span class="string">"memory"</span>); </span><br><span class="line">    <span class="keyword">return</span> value; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>指定当前内联汇编语句的输入，例如向arm协处理器p15中写入C1值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write_p15_c1</span> <span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> value)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(<span class="string">"mcr p15, 0, %0, c1, c0, 0 @ write it back\n"</span> </span></span></span><br><span class="line"><span class="function"><span class="params">                 : </span></span></span><br><span class="line">                 : "r" (value) @编译器选择一个R*寄存器 </span><br><span class="line">                 : <span class="string">"memory"</span>); </span><br><span class="line">    read_p15_c1 (); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Clobber-Modify"><a href="#Clobber-Modify" class="headerlink" title="Clobber/Modify"></a>Clobber/Modify</h3><p>有时候，你想通知GCC当前内联汇编语句可能会对某些寄存器或者内存进行修改，希望GCC在编译时能够将这点考虑进去。可以在这个区域声明这些寄存器或者内存。</p><p>这种情况一般发生在一个寄存器出现在“Instruction List”，但却不是由Input/Output操作表达式所指定的，也不是在一些Input/Output操作表达式使用“r”约束时由GCC为其选择的，同时此寄存器被“Instruction List”中的指令修改，而这个寄存器只是供当前内联汇编临时使用的情况。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">asm</span>(<span class="string">"mov R0, #0x34"</span> : : : <span class="string">"R0"</span>);<span class="comment">//寄存器R0出现在“Instruction List”中，并且被mov指令修改，但是却未被任何Input/Output操作表达式指定，所以需要在Clobber/Modify域指定“R0”，让GCC知道这一点</span></span><br></pre></td></tr></table></figure><p>如果一个内联汇编语句的Clobber/Modify域存在“memory”，那么GCC会保证在此内联汇编之前，如果某个内存的内容被装入了寄存器，那么在这个内联汇编之后，如果需要使用这个内存处的内容，就会直接到这个内存处重新读取，而不是使用被存放在寄存器中的拷贝。因为这个时候寄存器中的拷贝已经很可能和内存处的内容不一致了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GCC内联汇编的标准格式&quot;&gt;&lt;a href=&quot;#GCC内联汇编的标准格式&quot; class=&quot;headerlink&quot; title=&quot;GCC内联汇编的标准格式&quot;&gt;&lt;/a&gt;GCC内联汇编的标准格式&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="Assembly" scheme="https://suda-morris.github.io/tags/Assembly/"/>
    
  </entry>
  
  <entry>
    <title>Electron Vue</title>
    <link href="https://suda-morris.github.io/2019/01/03/electron-vue/"/>
    <id>https://suda-morris.github.io/2019/01/03/electron-vue/</id>
    <published>2019-01-03T08:14:00.000Z</published>
    <updated>2019-01-03T08:50:46.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-electron-vue-脚手架并新建工程"><a href="#安装-electron-vue-脚手架并新建工程" class="headerlink" title="安装 electron-vue 脚手架并新建工程"></a>安装 electron-vue 脚手架并新建工程</h2><ol><li><p><code>npm install -g vue-cli</code></p></li><li><p>新建工程 <code>vue init simulatedgreg/electron-vue esp-desk</code></p><p><img src="https://s2.ax1x.com/2019/01/03/Fomh1x.png" alt="Fomh1x.png"></p></li><li><p>安装依赖 <code>npm install</code></p></li><li><p>运行程序 <code>npm run dev</code></p></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://simulatedgreg.gitbooks.io/electron-vue/content/cn/" target="_blank" rel="noopener">electron-vue官方中文文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装-electron-vue-脚手架并新建工程&quot;&gt;&lt;a href=&quot;#安装-electron-vue-脚手架并新建工程&quot; class=&quot;headerlink&quot; title=&quot;安装 electron-vue 脚手架并新建工程&quot;&gt;&lt;/a&gt;安装 electron-vu
      
    
    </summary>
    
      <category term="Web" scheme="https://suda-morris.github.io/categories/Web/"/>
    
    
      <category term="Electron" scheme="https://suda-morris.github.io/tags/Electron/"/>
    
      <category term="Vue" scheme="https://suda-morris.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>QR-Code</title>
    <link href="https://suda-morris.github.io/2018/11/07/qr-code/"/>
    <id>https://suda-morris.github.io/2018/11/07/qr-code/</id>
    <published>2018-11-07T02:41:58.000Z</published>
    <updated>2018-11-07T06:33:28.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="QR-码基本结构"><a href="#QR-码基本结构" class="headerlink" title="QR 码基本结构"></a>QR 码基本结构</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/11/07/iTDp0x.png" alt="QR码基本结构" title="">                </div>                <div class="image-caption">QR码基本结构</div>            </figure><ul><li>格式信息：表示该二维码的纠错级别，分为L(7%)、M(15%)、Q(%25)、H(30%)</li><li>版本信息：即二维码的规格，共有40种规格的矩阵，从21x21（版本1）到177x177（版本40），每一个版本符号比前一版本每边增加4个模块</li><li>数据和纠错码字：实际保存的二维码信息和纠错码字（用于修正二维码损坏带来的错误）</li></ul><h2 id="QR-码数据容量"><a href="#QR-码数据容量" class="headerlink" title="QR 码数据容量"></a>QR 码数据容量</h2><table><thead><tr><th>类型</th><th>容量</th></tr></thead><tbody><tr><td>数字</td><td>最多7089字符</td></tr><tr><td>字母</td><td>最多4296字符</td></tr><tr><td>二进制数</td><td>最多2593字节</td></tr><tr><td>日本汉字/片假名</td><td>最多1817字符（采用Shift JIS）</td></tr><tr><td>中文汉字</td><td>最多984字符（采用UTF-8）</td></tr><tr><td>中文汉字</td><td>最多1800字符（采用BIG5）</td></tr></tbody></table><h2 id="QR数据模式指示符"><a href="#QR数据模式指示符" class="headerlink" title="QR数据模式指示符"></a>QR数据模式指示符</h2><table><thead><tr><th>模式</th><th>指示符</th></tr></thead><tbody><tr><td>ECI</td><td>0111</td></tr><tr><td>数字</td><td>0001</td></tr><tr><td>字母数字</td><td>0010</td></tr><tr><td>8位字节</td><td>0100</td></tr><tr><td>日本汉字</td><td>1000</td></tr><tr><td>中国汉字</td><td>1101</td></tr><tr><td>结构链接</td><td>0011</td></tr><tr><td>FNC1</td><td>0101（第一位置），1001（第二位置）</td></tr><tr><td>终止符</td><td>0000</td></tr></tbody></table><h2 id="QR编码过程"><a href="#QR编码过程" class="headerlink" title="QR编码过程"></a>QR编码过程</h2><p>例如：对数据：01234567 进行编码（版本 1-H）</p><ol><li>分组： 012 345 67</li><li>转成二进制：<ul><li>012 → 0000001100</li><li>345 → 0101011001</li><li>67 → 1000011</li></ul></li><li>转成序列： 0000001100 0101011001 1000011</li><li>字符数转成二进制： 8 → 0000001000</li><li>加入模式指示符：0001： 0001 0000001000 0000001100 0101011001 1000011</li><li>按需要将码字序列分块，并根据纠错等级和分块的码字产生纠错码字，并把纠错码字加入到数据码字序列后面，成为一个新的序列</li><li>在规格确定的条件下，将上面产生的序列按次序放入分块中，按规定把数据分块，然后对每一块进行计算，得出相应的纠错码字区块，把纠错码字区块按顺序构成一个序列，添加到原先的数据码字序列后面</li><li>构造矩阵，将探测图形、分隔符、定位图形、校正图形和码字模块放入矩阵中</li><li>将掩膜图形用于符号的编码区域，使得二维码图形中的深色和浅色区域能够比率最优的分布</li><li>生成格式和版本信息放入相应区域内</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;QR-码基本结构&quot;&gt;&lt;a href=&quot;#QR-码基本结构&quot; class=&quot;headerlink&quot; title=&quot;QR 码基本结构&quot;&gt;&lt;/a&gt;QR 码基本结构&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;di
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="QR-Code" scheme="https://suda-morris.github.io/tags/QR-Code/"/>
    
  </entry>
  
  <entry>
    <title>Q-learning</title>
    <link href="https://suda-morris.github.io/2018/11/06/q-learning/"/>
    <id>https://suda-morris.github.io/2018/11/06/q-learning/</id>
    <published>2018-11-06T02:15:27.000Z</published>
    <updated>2018-11-06T07:38:31.559Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Q学习——强化学习的具体方法"><a href="#Q学习——强化学习的具体方法" class="headerlink" title="Q学习——强化学习的具体方法"></a>Q学习——强化学习的具体方法</h2><p>在Q学习的框架中，作为学习对象的是称为Q值（Q-value）的数值，Q值是指在某种情况下，为了选择下一个要采取的行动的<code>指标数值</code>的集合。根据Q学习而获得Q值，在某个状态下选择下一个行动时，可以根据Q值来进行选择。</p><p>Q学习中，获得合适的Q值是学习的目标，在学习的初期，不清楚什么是合适的Q值，所以无法做决定。因此在学习的初期，Q值是由随机数来随机确定的。在此基础上，根据Q值进行行动的选择，更新状态。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/11/06/iohpUs.jpg" alt="Q值更新原则1&2" title="">                </div>                <div class="image-caption">Q值更新原则1&2</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/11/06/io4rf1.png" alt="Q值更新原则3" title="">                </div>                <div class="image-caption">Q值更新原则3</div>            </figure><h2 id="Q值更新的计算公式"><a href="#Q值更新的计算公式" class="headerlink" title="Q值更新的计算公式"></a>Q值更新的计算公式</h2><p>$$<br>Q(s_t,a_t)=Q(s_t,a_t)+\alpha(r+\gamma \space maxQ(s_{t+1},a_{t+1})-Q(s_t,a_t))<br>$$</p><ul><li>$s_t$表示t时刻的状态，$a_t$表示在$s_t$时所选的行动</li><li>$\max Q(s_{t+1},a_{t+1})$表示在下一个时刻（t+1）能够选择的行动中所对应的Q值中的最大值</li><li>$r$表示奖赏（仅限于能够获得时，不能获得的话，是0）</li><li>$\alpha$表示学习系数（0.1左右）</li><li>$\gamma$表示折扣率（0.9左右）</li></ul><h2 id="Q-learning算法步骤"><a href="#Q-learning算法步骤" class="headerlink" title="Q-learning算法步骤"></a>Q-learning算法步骤</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/11/06/ioXhWD.png" alt="Q-learning算法步骤" title="">                </div>                <div class="image-caption">Q-learning算法步骤</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Q学习——强化学习的具体方法&quot;&gt;&lt;a href=&quot;#Q学习——强化学习的具体方法&quot; class=&quot;headerlink&quot; title=&quot;Q学习——强化学习的具体方法&quot;&gt;&lt;/a&gt;Q学习——强化学习的具体方法&lt;/h2&gt;&lt;p&gt;在Q学习的框架中，作为学习对象的是称为Q值（
      
    
    </summary>
    
      <category term="ML&amp;DL" scheme="https://suda-morris.github.io/categories/ML-DL/"/>
    
    
      <category term="Algorithm" scheme="https://suda-morris.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Compilation Process</title>
    <link href="https://suda-morris.github.io/2018/11/02/compilation-process/"/>
    <id>https://suda-morris.github.io/2018/11/02/compilation-process/</id>
    <published>2018-11-02T02:20:53.000Z</published>
    <updated>2018-11-02T03:54:29.297Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍如何将高层的C/C++语言编写的程序转换成为处理器能够执行的二进制代码的过程，该过程即一般编译原理书籍所介绍的过程，包括四个步骤：</p><ul><li>预处理（Preprocessing）</li><li>编译（Compilation）</li><li>汇编（Assembly）</li><li>链接（Linking）</li></ul><h2 id="GCC工具链介绍"><a href="#GCC工具链介绍" class="headerlink" title="GCC工具链介绍"></a>GCC工具链介绍</h2><h3 id="GCC工具链概述"><a href="#GCC工具链概述" class="headerlink" title="GCC工具链概述"></a>GCC工具链概述</h3><p>通常所说的GCC是GUN Compiler Collection的简称，是Linux系统上常用的编译工具。GCC实质上不是一个单独的程序，而是多个程序的集合，因此通常称为GCC工具链。工具链软件包括GCC、C运行库、Binutils、GDB等。</p><ul><li>GCC<ul><li>GCC（GNU C Compiler）是编译工具。本文所要介绍的将C/C++语言编写的程序转换成为处理器能够执行的二进制代码的过程即由编译器完成。有关编译过程的更多介绍请参见后文。</li><li>GCC既支持本地编译（即在一个平台上编译该平台运行的程序)，也支持交叉编译（即在一个平台上编译供另一个平台运行的程序）。</li></ul></li><li>C运行库<ul><li>由于C运行库的相关背景知识较多，请参见后文对其单独进行介绍。</li></ul></li><li>Binutils<ul><li>由于Binutils的相关信息较多，请参见后文对其单独进行介绍。</li></ul></li><li>GDB<ul><li>GDB（GNU Project Debugger）是调试工具，可以用于对程序进行调试。</li></ul></li></ul><h3 id="Binutils"><a href="#Binutils" class="headerlink" title="Binutils"></a>Binutils</h3><p>一组二进制程序处理工具，包括：addr2line、ar、objcopy、objdump、as、ld、ldd、readelf、size等。这一组工具是开发和调试不可缺少的工具，分别简介如下：</p><ul><li>addr2line：用来将程序地址转换成其所对应的程序源文件及所对应的代码行，也可以得到所对应的函数。该工具将帮助调试器在调试的过程中定位对应的源代码位置。</li><li>as：主要用于汇编，有关汇编的详细介绍请参见后文。</li><li>ld：主要用于链接，有关链接的详细介绍请参见后文。</li><li>ar：主要用于创建静态库。为了便于初学者理解，在此介绍动态库与静态库的概念：<ul><li>如果要将多个.o目标文件生成一个库文件，则存在两种类型的库，一种是静态库，另一种是动态库。</li><li>在windows中静态库是以 .lib 为后缀的文件，共享库是以 .dll 为后缀的文件。在linux中静态库是以.a为后缀的文件，共享库是以.so为后缀的文件。</li><li>静态库和动态库的不同点在于代码被载入的时刻不同。静态库的代码在编译过程中已经被载入可执行程序，因此体积较大。共享库的代码是在可执行程序运行时才载入内存的，在编译过程中仅简单的引用，因此代码体积较小。在Linux系统中，可以用ldd命令查看一个可执行程序依赖的共享库。</li><li>如果一个系统中存在多个需要同时运行的程序且这些程序之间存在共享库，那么采用动态库的形式将更节省内存。但是对于嵌入式系统，大多数情况下都是整个软件就是一个可执行程序且不支持动态加载的方式，即以静态库为主。</li></ul></li><li>ldd：可以用于查看一个可执行程序依赖的共享库。</li><li>objcopy：将一种对象文件翻译成另一种格式，譬如将.bin转换成.elf、或者将.elf转换成.bin等。</li><li>objdump：主要的作用是反汇编。有关反汇编的详细介绍，请参见后文。</li><li>readelf：显示有关ELF文件的信息，请参见后文了解更多信息。</li><li>size：列出可执行文件每个部分的尺寸和总尺寸，代码段、数据段、总大小等，请参见后文了解使用size的具体使用实例。</li><li>Binutils的每个工具的功能均很强大，本节限于篇幅无法详细介绍其功能，读者可以自行查阅资料了解其详情。Binutils还有其他工具，在此不一一赘述，感兴趣的读者可以自行查阅其他资料学习。</li></ul><h3 id="C运行库"><a href="#C运行库" class="headerlink" title="C运行库"></a>C运行库</h3><p>为了解释C运行库，需要先回忆一下C语言标准。C语言标准主要由两部分组成：一部分描述C的语法，另一部分描述C标准库。C标准库定义了一组标准头文件，每个头文件中包含一些相关的函数、变量、类型声明和宏定义，譬如常见的printf函数便是一个C标准库函数，其原型定义在stdio头文件中。</p><p>C语言标准仅仅定义了C标准库函数原型，并没有提供实现。因此，C语言编译器通常需要一个C运行时库（C  Run Time  Libray，CRT）的支持。C运行时库又常简称为C运行库。与C语言类似，C++也定义了自己的标准，同时提供相关支持库，称为C++运行时库。</p><p>如上所述，要在一个平台上支持C语言，不仅要实现C编译器，还要实现C标准库，这样的实现才能完全支持C标准。glibc（GNU C Library）是Linux下面C标准库的实现，其要点如下：</p><ul><li>glibc本身是GNU旗下的C标准库，后来逐渐成为了Linux的标准C库。glibc 的主体分布在Linux系统的/lib与/usr/lib目录中，包括 libc 标准 C 函式库、libm数学函式库等等，都以.so做结尾。<ul><li>注意：Linux系统下面的标准C库不仅有这一个，如uclibc、klibc、以及Linux   libc，但是glibc使用最为广泛。而在嵌入式系统中使用较多的C运行库为Newlib。</li></ul></li><li>Linux系统通常将libc库作为操作系统的一部分，它被视为操作系统与用户程序的接口。譬如：glibc不仅实现标准C语言中的函数，还封装了操作系统提供的系统服务，即系统调用的封装。<ul><li>通常情况，每个特定的系统调用对应了至少一个glibc  封装的库函数，如系统提供的打开文件系统调用sys_open对应的是glibc中的open函数；其次，glibc  一个单独的API可能调用多个系统调用，如glibc提供的 printf 函数就会调用如  sys_open、sys_mmap、sys_write、sys_close等系统调用；另外，多个 glibc  API也可能对应同一个系统调用，如glibc下实现的malloc、free 等函数用来分配和释放内存，都利用了内核的sys_brk的系统调用。</li></ul></li><li>对于C++语言，常用的C++标准库为libstdc++。注意：通常libstdc++与GCC捆绑在一起的，即安装gcc的时候会把libstdc++装上。而glibc并没有和GCC捆绑于一起，这是因为glibc需要与操作系统内核打交道，因此其与具体的操作系统平台紧密耦合。而libstdc++虽然提供了c++程序的标准库，但其并不与内核打交道。对于系统级别的事件，libstdc++会与glibc交互，从而和内核通信。</li></ul><h3 id="GCC命令行选项"><a href="#GCC命令行选项" class="headerlink" title="GCC命令行选项"></a>GCC命令行选项</h3><p>GCC有着丰富的命令行选项支持各种不同的功能，本文由于篇幅有限，无法一一赘述，请读者自行查阅相关资料学习。</p><p>对于RISC-V的GCC工具链而言，还有其特有的编译选项。</p><h2 id="准备Hello-World程序"><a href="#准备Hello-World程序" class="headerlink" title="准备Hello World程序"></a>准备Hello World程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello World! \n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>预处理的过程主要包括以下过程：</p><ul><li>将所有的#define删除，并且展开所有的宏定义，并且处理所有的条件预编译指令，比如#if #ifdef #elif #else #endif等。</li><li>处理#include预编译指令，将被包含的文件插入到该预编译指令的位置。</li><li>删除所有注释“//”和“/<em> </em>/”。</li><li>添加行号和文件标识，以便编译时产生调试用的行号及编译错误警告行号。</li><li>保留所有的#pragma编译器指令，后续编译过程需要使用它们。</li></ul><p>使用gcc进行预处理的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -E hello.c -o hello.i <span class="comment"># 将源文件hello.c文件预处理生成hello.i</span></span><br><span class="line"><span class="comment"># GCC的选项-E使GCC在进行完预处理后即停止</span></span><br></pre></td></tr></table></figure><p>hello.i文件可以作为普通文本文件打开进行查看，其代码片段如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));</span><br><span class="line"># <span class="number">942</span> <span class="string">"/usr/include/stdio.h"</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"># <span class="number">2</span> <span class="string">"hello.c"</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">3</span> <span class="string">"hello.c"</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello World!"</span> <span class="string">"\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>编译过程就是对预处理完的文件进行一系列的词法分析，语法分析，语义分析及优化后生成相应的汇编代码。</p><p>使用gcc进行编译的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -S hello.i -o hello.s <span class="comment"># 将预处理生成的hello.i文件编译生成汇编程序hello.s</span></span><br><span class="line">                        <span class="comment"># GCC的选项-S使GCC在执行完编译后停止，生成汇编程序</span></span><br></pre></td></tr></table></figure><p>上述命令生成的汇编程序hello.s的代码片段如下所示，其全部为汇编代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">.LFB0:</span><br><span class="line">    .cfi_startproc</span><br><span class="line">    pushq   %rbp</span><br><span class="line">    .cfi_def_cfa_offset 16</span><br><span class="line">    .cfi_offset 6, -16</span><br><span class="line">    movq    %rsp, %rbp</span><br><span class="line">    .cfi_def_cfa_register 6</span><br><span class="line">    movl    $.LC0, %edi</span><br><span class="line">    call    puts</span><br><span class="line">    movl    $0, %eax</span><br><span class="line">    popq    %rbp</span><br><span class="line">    .cfi_def_cfa 7, 8</span><br><span class="line">    ret</span><br><span class="line">    .cfi_endproc</span><br></pre></td></tr></table></figure><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><p>汇编过程调用对汇编代码进行处理，生成处理器能识别的指令，保存在后缀为.o的目标文件中。由于每一个汇编语句几乎都对应一条处理器指令，因此，汇编相对于编译过程比较简单，通过调用Binutils中的汇编器as根据汇编指令和处理器指令的对照表一一翻译即可。</p><p>当程序由多个源代码文件构成时，每个文件都要先完成汇编工作，生成.o目标文件后，才能进入下一步的链接工作。注意：目标文件已经是最终程序的某一部分了，但是在链接之前还不能执行。</p><p>使用gcc进行汇编的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -c hello.s -o hello.o <span class="comment"># 将编译生成的hello.s文件汇编生成目标文件hello.o</span></span><br><span class="line">                        <span class="comment"># GCC的选项-c使GCC在执行完汇编后停止，生成目标文件</span></span><br><span class="line"><span class="comment"># 或者直接调用as进行汇编</span></span><br><span class="line">as -c hello.s -o hello.o <span class="comment"># 使用Binutils中的as将hello.s文件汇编生成目标文件</span></span><br></pre></td></tr></table></figure><p>注意：hello.o目标文件为ELF（Executable and Linkable Format）格式的可重定向文件，不能以普通文本形式的查看（vim文本编辑器打开看到的是乱码）。有关ELF文件的更多介绍，请参见后文。</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>经过汇编以后的目标文件还不能直接运行，为了变成能够被加载的可执行文件，文件中必须包含固定格式的信息头，还必须与系统提供的启动代码链接起来才能正常运行，这些工作都是由链接器来完成的。</p><p>GCC可以通过调用Binutils中的链接器ld来链接程序运行需要的所有目标文件，以及所依赖的其它库文件，最后生成一个ELF格式可执行文件。</p><p>如果直接调用Binutils中的ld进行链接，命令如下，则会报出错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接调用ld试图将hello.o文件链接成为最终的可执行文件hello</span></span><br><span class="line">ld hello.o –o hello</span><br><span class="line">ld: warning: cannot find entry symbol _start; defaulting to 00000000004000b0</span><br><span class="line">hello.o: In <span class="keyword">function</span> `main<span class="string">':</span></span><br><span class="line"><span class="string">hello.c:(.text+0xa): undefined reference to `puts'</span></span><br></pre></td></tr></table></figure><p>之所以直接用ld进行链接会报错是因为仅仅依靠一个hello.o目标文件还无法链接成为一个完整的可执行文件，需要明确的指明其需要的各种依赖库和引导程序以及链接脚本，此过程在嵌入式软件开发时是必不可少的。而在Linux系统中，可以直接使用gcc命令执行编译直至链接的过程，gcc会自动将所需的依赖库以及引导程序链接在一起成为Linux系统可以加载的ELF格式可执行文件。使用gcc进行编译直至链接的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o hello  <span class="comment"># 将hello.c文件编译汇编链接生成可执行文件hello</span></span><br><span class="line">                        <span class="comment"># GCC没有添加选项，则使GCC一步到位地执行到链接后停止，生成最终的可执行文件</span></span><br><span class="line">./hello                 <span class="comment"># 成功执行该文件，在终端上会打印Hello World！字符串 Hello World!</span></span><br></pre></td></tr></table></figure><p>注意：hello可执行文件为ELF（Executable and Linkable Format）格式的可执行文件，不能以普通文本形式的查看（vim文本编辑器打开看到的是乱码）。</p><p>在前文介绍了动态库与静态库的差别，与之对应的，链接也分为静态链接和动态链接，其要点如下：</p><ul><li><p>静态链接是指在编译阶段直接把静态库加入到可执行文件中去，这样可执行文件会比较大。链接器将函数的代码从其所在地（不同的目标文件或静态链接库中）拷贝到最终的可执行程序中。为创建可执行文件，链接器必须要完成的主要任务是：符号解析（把目标文件中符号的定义和引用联系起来）和重定位（把符号定义和内存地址对应起来然后修改所有对符号的引用）。</p></li><li><p>而动态链接则是指链接阶段仅仅只加入一些描述信息，而程序执行时再从系统中把相应动态库加载到内存中去。</p><ul><li>在Linux系统中，gcc编译链接时的动态库搜索路径的顺序通常为：首先从gcc命令的参数-L指定的路径寻找；再从环境变量LIBRARY_PATH指定的路径寻址；再从默认路径/lib、/usr/lib、/usr/local/lib寻找。</li><li>在Linux系统中，执行二进制文件时的动态库搜索路径的顺序通常为：首先搜索编译目标代码时指定的动态库搜索路径；再从环境变量LD_LIBRARY_PATH指定的路径寻址；再从配置文件/etc/ld.so.conf中指定的动态库搜索路径；再从默认路径/lib、/usr/lib寻找。</li><li>在Linux系统中，可以用ldd命令查看一个可执行程序依赖的共享库。</li></ul></li><li><p>由于链接动态库和静态库的路径可能有重合，所以如果在路径中有同名的静态库文件和动态库文件，比如libtest.a和libtest.so，gcc链接时默认优先选择动态库，会链接libtest.so，如果要让gcc选择链接libtest.a则可以指定gcc选项-static，该选项会强制使用静态库进行链接。以本节的Hello World为例：</p><ul><li><p>如果使用命令“gcc hello.c -o hello”则会使用动态库进行链接，生成的ELF可执行文件的大小（使用Binutils的size命令查看）和链接的动态库（使用Binutils的ldd命令查看）如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ gcc hello.c -o hello</span><br><span class="line">$ size hello  <span class="comment"># 使用size查看大小</span></span><br><span class="line">   text    data     bss     dec     hex filename</span><br><span class="line">   1183     552       8    1743     6cf     hello</span><br><span class="line">$ ldd hello <span class="comment"># 可以看出该可执行文件链接了很多其他动态库，主要是Linux的glibc动态库</span></span><br><span class="line">        linux-vdso.so.1 =&gt;  (0x00007fffefd7c000)</span><br><span class="line">        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fadcdd82000)</span><br><span class="line">        /lib64/ld-linux-x86-64.so.2 (0x00007fadce14c000)</span><br></pre></td></tr></table></figure></li><li><p>如果使用命令“gcc -static hello.c -o hello”则会使用静态库进行链接，生成的ELF可执行文件的大小（使用Binutils的size命令查看）和链接的动态库（使用Binutils的ldd命令查看）如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -static hello.c -o hello</span><br><span class="line">$ size hello <span class="comment"># 使用size查看大小</span></span><br><span class="line">     text    data     bss     dec     hex filename</span><br><span class="line"> 823726    7284    6360  837370   cc6fa     hello <span class="comment"># 可以看出text的代码尺寸变得极大</span></span><br><span class="line">$ ldd hello</span><br><span class="line">       not a dynamic executable <span class="comment"># 说明没有链接动态库</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>链接器链接后生成的最终文件为ELF格式可执行文件，一个ELF可执行文件通常被链接为不同的段，常见的段譬如.text、.data、.rodata、.bss等段。有关ELF文件和常见段的更多介绍，请参见后文。</p><h3 id="一步到位的编译"><a href="#一步到位的编译" class="headerlink" title="一步到位的编译"></a>一步到位的编译</h3><p>从功能上分，预处理、编译、汇编、链接是四个不同的阶段，但GCC的实际操作上，它可以把这四个步骤合并为一个步骤来执行。如下例所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc –o <span class="built_in">test</span> first.c second.c third.c</span><br><span class="line"><span class="comment"># 该命令将同时编译三个源文件，即first.c、second.c和 third.c，然后将它们链接成一个可执行文件，名为test。</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>一个程序无论有一个源文件还是多个源文件，所有被编译和链接的源文件中必须有且仅有一个main函数。</li><li>但如果仅仅是把源文件编译成目标文件，因为不会进行链接，所以main函数不是必需的。</li></ul><h2 id="分析ELF文件"><a href="#分析ELF文件" class="headerlink" title="分析ELF文件"></a>分析ELF文件</h2><h3 id="ELF文件介绍"><a href="#ELF文件介绍" class="headerlink" title="ELF文件介绍"></a>ELF文件介绍</h3><p>在介绍ELF文件之前，首先将其与另一种常见的二进制文件格式bin进行对比：</p><ul><li>binary文件，其中只有机器码。</li><li>elf文件除了含有机器码之外还有其它信息，如：段加载地址，运行入口地址，数据段等。</li></ul><p>ELF全称Executable and Linkable Format，可执行链接格式。ELF文件格式主要三种：</p><ul><li>可重定向（Relocatable）文件：<ul><li>文件保存着代码和适当的数据，用来和其他的目标文件一起来创建一个可执行文件或者是一个共享目标文件。</li></ul></li><li>可执行（Executable）文件：<ul><li>文件保存着一个用来执行的程序（例如bash，gcc等）。</li></ul></li><li>共享（Shared）目标文件（Linux下后缀为.so的文件）：<ul><li>即所谓共享库。</li></ul></li></ul><h3 id="ELF文件的段"><a href="#ELF文件的段" class="headerlink" title="ELF文件的段"></a>ELF文件的段</h3><p>ELF文件格式如图1中所示，位于ELF Header和Section Header Table之间的都是段（Section）。一个典型的ELF文件包含下面几个段：</p><ul><li>.text：已编译程序的指令代码段。</li><li>.rodata：ro代表read only，即只读数据（譬如常数const）。</li><li>.data：已初始化的C程序全局变量和静态局部变量。<ul><li>注意：C程序普通局部变量在运行时被保存在堆栈中，既不出现在.data段中，也不出现在.bss段中。此外，如果变量被初始化值为0，也可能会放到bss段。</li></ul></li><li>.bss：未初始化的C程序全局变量和静态局部变量。<ul><li>注意：目标文件格式区分初始化和未初始化变量是为了空间效率，在ELF文件中.bss段不占据实际的存储器空间，它仅仅是一个占位符。</li></ul></li><li>.debug：调试符号表，调试器用此段的信息帮助调试。</li><li>上述仅讲解了最常见的节，ELF文件还包含很多其他类型的节，本文在此不做赘述，请感兴趣的读者自行查阅其他资料了解学习。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/11/02/ihFmes.png" alt="ELF文件格式" title="">                </div>                <div class="image-caption">ELF文件格式</div>            </figure><h3 id="查看ELF文件"><a href="#查看ELF文件" class="headerlink" title="查看ELF文件"></a>查看ELF文件</h3><p>可以使用Binutils中readelf来查看ELF文件的信息，可以通过readelf –help来查看readelf的选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ readelf --<span class="built_in">help</span></span><br><span class="line">Usage: readelf &lt;option(s)&gt; elf-file(s)</span><br><span class="line"> Display information about the contents of ELF format files</span><br><span class="line"> Options are:</span><br><span class="line">  -a --all               Equivalent to: -h -l -S -s -r -d -V -A -I</span><br><span class="line">  -h --file-header       Display the ELF file header</span><br><span class="line">  -l --program-headers   Display the program headers</span><br><span class="line">     --segments          An <span class="built_in">alias</span> <span class="keyword">for</span> --program-headers</span><br><span class="line">  -S --section-headers   Display the sections<span class="string">' header</span></span><br></pre></td></tr></table></figure><p>以本文Hello World示例，使用readelf -S查看其各个section的信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -S hello</span><br><span class="line">There are 31 section headers, starting at offset 0x19d8:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type             Address           Offset</span><br><span class="line">       Size              EntSize          Flags  Link  Info  Align</span><br><span class="line">  [ 0]                   NULL             0000000000000000  00000000</span><br><span class="line">       0000000000000000  0000000000000000           0     0     0</span><br><span class="line">……</span><br><span class="line">  [11] .init             PROGBITS         00000000004003c8  000003c8</span><br><span class="line">       000000000000001a  0000000000000000  AX       0     0     4</span><br><span class="line">……</span><br><span class="line">  [14] .text             PROGBITS         0000000000400430  00000430</span><br><span class="line">       0000000000000182  0000000000000000  AX       0     0     16</span><br><span class="line">  [15] .fini             PROGBITS         00000000004005b4  000005b4</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h3 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h3><p>由于ELF文件无法被当做普通文本文件打开，如果希望直接查看一个ELF文件包含的指令和数据，需要使用反汇编的方法。反汇编是用于调试和定位处理器问题时最常用的手段。 可以使用Binutils中objdump来对ELF文件进行反汇编，可以通过objdump –help来查看其选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ objdump --<span class="built_in">help</span></span><br><span class="line">Usage: objdump &lt;option(s)&gt; &lt;file(s)&gt;</span><br><span class="line"> Display information from object &lt;file(s)&gt;.</span><br><span class="line"> At least one of the following switches must be given:</span><br><span class="line">……</span><br><span class="line">  -D, --disassemble-all    Display assembler contents of all sections</span><br><span class="line">  -S, --<span class="built_in">source</span>             Intermix <span class="built_in">source</span> code with disassembly</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>以本文Hello World示例，使用objdump -D对其进行反汇编如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -D hello</span><br><span class="line">……</span><br><span class="line">0000000000400526 &lt;main&gt;:  <span class="comment"># main标签的PC地址</span></span><br><span class="line"><span class="comment"># PC地址：    指令编码                 指令的汇编格式</span></span><br><span class="line">  400526:    55                      push   %rbp </span><br><span class="line">  400527:    48 89 e5                mov    %rsp,%rbp</span><br><span class="line">  40052a:    bf c4 05 40 00          mov    <span class="variable">$0x4005c4</span>,%edi</span><br><span class="line">  40052f:    e8 cc fe ff ff          callq  400400 &lt;puts@plt&gt;</span><br><span class="line">  400534:    b8 00 00 00 00          mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">  400539:    5d                      pop    %rbp</span><br><span class="line">  40053a:    c3                      retq   </span><br><span class="line">  40053b:    0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>使用objdump -S将其反汇编并且将其C语言源代码混合显示出来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -o hello -g hello.c <span class="comment"># 要加上-g选项</span></span><br><span class="line">$ objdump -S hello</span><br><span class="line">……</span><br><span class="line">0000000000400526 &lt;main&gt;:</span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int</span><br><span class="line">main(void)</span><br><span class="line">&#123;</span><br><span class="line">  400526:    55                      push   %rbp</span><br><span class="line">  400527:    48 89 e5                mov    %rsp,%rbp</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello World!"</span> <span class="string">"\n"</span>);</span><br><span class="line">  40052a:    bf c4 05 40 00          mov    <span class="variable">$0x4005c4</span>,%edi</span><br><span class="line">  40052f:    e8 cc fe ff ff          callq  400400 &lt;puts@plt&gt;</span><br><span class="line">  <span class="built_in">return</span> 0;</span><br><span class="line">  400534:    b8 00 00 00 00          mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">&#125;</span><br><span class="line">  400539:    5d                      pop    %rbp</span><br><span class="line">  40053a:    c3                      retq   </span><br><span class="line">  40053b:    0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h2 id="嵌入式系统编译的特殊性"><a href="#嵌入式系统编译的特殊性" class="headerlink" title="嵌入式系统编译的特殊性"></a>嵌入式系统编译的特殊性</h2><p>为了易于读者理解，本文以一个Hello World程序为例讲解了在Linux环境中的编译过程以帮助初学者入门，但是了解这些基础背景知识对于嵌入式开发还远远不够。<br>对于嵌入式开发，嵌入式系统的编译过程和开发有其特殊性，譬如：</p><ul><li>嵌入式系统需要使用交叉编译与远程调试的方法进行开发。</li><li>需要自己定义引导程序。</li><li>需要注意减少代码尺寸。</li><li>需要移植printf从而使得嵌入式系统也能够打印输入。</li><li>使用Newlib作为C运行库。</li><li>每个特定的嵌入式系统都需要配套的板级支持包。</li></ul><h3 id="交叉编译和远程调试"><a href="#交叉编译和远程调试" class="headerlink" title="交叉编译和远程调试"></a>交叉编译和远程调试</h3><p>嵌入式平台上往往资源有限，嵌入式系统（譬如常见ARM   MCU或8051单片机）的存储器容量通常只在几KB到几MB之间，且只有闪存而没有硬盘这种大容量存储设备，在这种资源有限的环境中，不可能将编译器等开发工具安装在嵌入式设备中，所以无法直接在嵌入式设备中进行软件开发。因此，嵌入式平台的软件一般在主机PC上进行开发和编译，然后将编译好的二进制代码下载至目标嵌入式系统平台上运行，这种编译方式属于交叉编译。</p><p>交叉编译可以简单理解为，在当前编译平台下，编译出来的程序能运行在体系结构不同的另一种目标平台上，但是编译平台本身却不能运行该程序，譬如，在x86平台的PC电脑上编写程序并编译成能运行在ARM平台的程序，编译得到的程序在x86平台上不能运行，必须放到ARM平台上才能运行。</p><p>与交叉编译同理，在嵌入式平台上往往也无法运行完整的调试器，因此当运行于嵌入式平台上的程序出现问题时，需要借助主机PC平台上的调试器来对嵌入式平台进行调试。这种调试方式属于远程调试。</p><p>常见的交叉编译和远程调试工具是GCC和GDB。GCC不仅能作为本地编译器，还能作为交叉编译器；同理GDB不仅可以作为本地调试器，还可以作为远程调试器。</p><p>当作为交叉编译器之时，GCC通常有不同的命名，譬如：</p><ul><li>arm-none-eabi-gcc和arm-none-eabi-gdb是面向裸机（Bare-Metal）ARM平台的交叉编译器和远程调试器。<ul><li>所谓裸机（Bare-Metal）是嵌入式领域的一个常见形态，表示不运行操作系统的系统</li></ul></li><li>而riscv-none-embed-gcc和riscv-none-embed-gdb是面向裸机RISC-V平台的交叉编译器和远程调试器。</li></ul><h3 id="移植newlib或newlib-nano作为C运行库"><a href="#移植newlib或newlib-nano作为C运行库" class="headerlink" title="移植newlib或newlib-nano作为C运行库"></a>移植newlib或newlib-nano作为C运行库</h3><p>newlib是一个面向嵌入式系统的C运行库。相对于glibc，newlib实现了大部分的功能函数，但体积却小很多。newlib独特的体系结构将功能实现与具体的操作系统分层，使之能够很好地进行配置以满足嵌入式系统的要求。由于专为嵌入式系统设计，newlib具有可移植性强、轻量级、速度快、功能完备等特点，已广泛应用于各种嵌入式系统中。</p><p>由于嵌入式操作系统和底层硬件的多样性，为了能够将C/C++语言所需要的库函数实现与具体的操作系统和底层硬件进行分层，newlib的所有库函数都建立在20个桩函数的基础上，这20个桩函数完成具体操作系统和底层硬件相关的功能：</p><ul><li>I/O和文件系统访问（open、close、read、write、lseek、stat、fstat、fcntl、link、unlink、rename）；</li><li>扩大内存堆的需求（sbrk）；</li><li>获得当前系统的日期和时间（gettimeofday、times）；</li><li>各种类型的任务管理函数（execve、fork、getpid、kill、wait、_exit）；</li></ul><p>这20个桩函数在语义、语法上与POSIX（Portable Operating System Interface of UNIX）标准下对应的20个同名系统调用完全兼容。</p><p>所以，如果需要移植newlib至某个目标嵌入式平台，成功移植的关键是在目标平台下找到能够与newlib桩函数衔接的功能函数或者实现这些桩函数。</p><p>注意：newlib的一个特殊版本newlib-nano版本进一步为嵌入式平台减少了代码体积（Code Size），因为newlib-nano提供了更加精简版本的malloc和printf函数的实现，并且对库函数使用GCC的-Os（侧重代码体积的优化）选项进行编译优化。</p><h3 id="嵌入式引导程序和中断异常处理"><a href="#嵌入式引导程序和中断异常处理" class="headerlink" title="嵌入式引导程序和中断异常处理"></a>嵌入式引导程序和中断异常处理</h3><p>前文介绍了如何在Linux系统的PC电脑上开发一个Hello  World程序，对其进行编译，然后运行在此电脑上。在这种方式下，程序员仅仅只需要关注Hello  World程序本身，程序的主体由main函数组织而成，程序员可以无需关注Linux操作系统在运行该程序的main函数之前和之后需要做什么。事实上，在Linux操作系统中运行应用程序（譬如简单的Hello   World）时，操作系统需要动态地创建一个进程、为其分配内存空间、创建并运行该进程的引导程序，然后才会开始执行该程序的main函数，待其运行结束之后，操作系统还要清除并释放其内存空间、注销该进程等。</p><p>从上述过程中可以看出，程序的引导和清除这些“脏活累活”都是由Linux这样的操作系统来负责进行。但是在嵌入式系统中，程序员除了开发以main函数为主体的功能程序之外，还需要关注如下两个方面：</p><ul><li>引导程序：<ul><li>嵌入式系统上电后需要对系统硬件和软件运行环境进行初始化，这些工作往往由用汇编语言编写的引导程序完成。</li><li>引导程序是嵌入式系统上电后运行的第一段软件代码。引导程序对于嵌入式系统非常关键，引导程序所执行的操作依赖于所开发的嵌入式系统的软硬件特性，一般流程包括：初始化硬件、设置异常和中断向量表、把程序拷贝到片上SRAM中、完成代码的重映射等，最后跳转到main函数入口。</li></ul></li><li>中断异常处理<ul><li>中断和异常是嵌入式系统非常重要的一个环节，因此，嵌入式系统软件还必须正确地配置中断和异常处理函数。</li></ul></li></ul><h3 id="嵌入式系统链接脚本"><a href="#嵌入式系统链接脚本" class="headerlink" title="嵌入式系统链接脚本"></a>嵌入式系统链接脚本</h3><p>上文中介绍了如何在Linux系统的PC电脑上开发一个Hello World程序，对其进行编译，然后运行在此电脑上。在这种方式下，程序员也无需关心编译过程中的“链接”这一步骤所使用的链接脚本，无需为程序分配具体的内存空间。</p><p>但是在嵌入式系统中，程序员除了开发以main函数为主体的功能程序之外，还需要关注“链接脚本”为程序分配合适的存储器空间，譬如程序段放在什么区间、数据段放在什么区间等等。</p><h3 id="减小代码体积"><a href="#减小代码体积" class="headerlink" title="减小代码体积"></a>减小代码体积</h3><p>嵌入式平台上往往存储器资源有限，嵌入式系统（譬如常见的ARM   MCU或8051单片机）的存储器容量通常只在几KB到几MB之间，且只有闪存而没有硬盘这种大容量存储设备，在这种资源有限的环境中，程序的代码体积（Code  Size）显得尤其重要，因此，有效地降低降低代码体积（Code Size）是嵌入式软件开发必须要考虑的问题，常见的方法如：</p><ul><li>使用newlib-nano作为C运行库以取得较小代码体积（Code Size）的C库函数。</li><li>尽量少使用C语言的大型库函数，譬如在正式发行版本的程序中避免使用printf和scanf等函数。</li><li>如果在开发的过程中一定需要使用printf函数，可以使用某些自己实现的阉割版printf函数（而不是C运行库中提供的printf函数）以生成较小的代码体积。</li><li>除此之外，在C/C++语言的语法和程序开发方面也有众多技巧以取得更小的代码体积（Code Size）。</li></ul><h3 id="支持printf函数"><a href="#支持printf函数" class="headerlink" title="支持printf函数"></a>支持printf函数</h3><p>上文中介绍了如何在Linux系统的PC电脑上开发一个Hello World程序，程序中使用C语言的标准库函数printf打印了一个“Hello  World”字符串。该程序在Linux系统里面运行的时候字符串被成功的输出到了Linux的终端界面上。在这个过程中，程序员无需关心Linux系统到底是如何将printf函数的字符串输出到Linux终端上的。事实上，在Linux本地编译的程序会链接使用Linux系统的C运行库glibc，而glibc充当了应用程序和Linux操作系统之间的接口，glibc提供的  printf 函数就会调用如sys_write等操作系统的底层系统调用函数，从而能够将“字符串”输出到Linux终端上。</p><p>从上述过程中可以看出，由于有glibc的支持，所以printf函数能够在Linux系统中正确的进行输出。但是在嵌入式系统中，printf的输出却不那么容易了，基于如下几个原因：</p><ul><li>嵌入式系统使用newlib作为C运行库，而newlib的C运行库所提供的printf函数最终依赖于如本文中所介绍的newlib桩函数write，因此必须实现此write函数才能够正确的执行printf函数。</li><li>嵌入式系统往往没有“显示终端”存在，譬如常见的单片机其作为一个黑盒子一般的芯片，根本没有显示终端。因此，为了能够支持显示输出，通常需要借助单片机芯片的UART接口将printf函数的输出重新定向到主机PC的COM口上，然后借助主机PC的串口调试助手显示出输出信息。同理，对于scanf输入函数，也需要通过主机PC的串口调试助手获取输入然后通过主机PC的COM口发送给单片机芯片的UART接口。</li><li>从以上两点可以看出，嵌入式平台的UART接口非常重要，往往扮演了输出管道的角色，为了能够将printf函数的输出定向到UART接口，需要实现newlib的桩函数write，使其通过编程UART的相关寄存器将字符通过UART接口输出。</li></ul><h3 id="提供板级支持包"><a href="#提供板级支持包" class="headerlink" title="提供板级支持包"></a>提供板级支持包</h3><p>对于特定的嵌入式硬件平台，为了方便用户在硬件平台上开发嵌入式程序，硬件平台一般会提供板级支持包（Board Support Package，BSP）。板级支持包所包含的内容没有绝对的标准，通常说来，其必须包含如下内容：</p><ul><li>底层硬件设备的地址分配信息</li><li>底层硬件设备的驱动函数</li><li>系统的引导程序</li><li>中断和异常处理服务程序</li><li>系统的链接脚本</li><li>如果使用newlib作为C运行库，一般还提供newlib桩函数的实现。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文将介绍如何将高层的C/C++语言编写的程序转换成为处理器能够执行的二进制代码的过程，该过程即一般编译原理书籍所介绍的过程，包括四个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预处理（Preprocessing）&lt;/li&gt;
&lt;li&gt;编译（Compilation）&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="RISCV" scheme="https://suda-morris.github.io/categories/RISCV/"/>
    
    
      <category term="Compile" scheme="https://suda-morris.github.io/tags/Compile/"/>
    
  </entry>
  
  <entry>
    <title>pyside2</title>
    <link href="https://suda-morris.github.io/2018/10/29/pyside2/"/>
    <id>https://suda-morris.github.io/2018/10/29/pyside2/</id>
    <published>2018-10-29T02:46:38.000Z</published>
    <updated>2018-11-01T02:53:12.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PySide2安装"><a href="#PySide2安装" class="headerlink" title="PySide2安装"></a>PySide2安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install pyside2 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h2 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore, QtWidgets, QtGui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QtWidgets.QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        QtWidgets.QWidget.__init__(self)</span><br><span class="line"></span><br><span class="line">        self.hello = [<span class="string">"Hallo Welt"</span>, <span class="string">"你好，世界"</span>, <span class="string">"Hei maailma"</span>,</span><br><span class="line">                      <span class="string">"Hola Mundo"</span>, <span class="string">"Привет мир"</span>]</span><br><span class="line"></span><br><span class="line">        self.button = QtWidgets.QPushButton(<span class="string">"Click me!"</span>)</span><br><span class="line">        self.text = QtWidgets.QLabel(<span class="string">"Hello World"</span>)</span><br><span class="line">        self.text.setAlignment(QtCore.Qt.AlignCenter)</span><br><span class="line"></span><br><span class="line">        self.text.setFont(QtGui.QFont(<span class="string">"Titillium"</span>, <span class="number">30</span>))</span><br><span class="line">        self.button.setFont(QtGui.QFont(<span class="string">"Titillium"</span>, <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">        self.layout = QtWidgets.QVBoxLayout()</span><br><span class="line">        self.layout.addWidget(self.text)</span><br><span class="line">        self.layout.addWidget(self.button)</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line"></span><br><span class="line">        self.button.clicked.connect(self.magic)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">magic</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.text.setText(random.choice(self.hello))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QtWidgets.QApplication([])</span><br><span class="line"></span><br><span class="line">    widget = MyWidget()</span><br><span class="line">    widget.resize(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">    widget.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="使用QML"><a href="#使用QML" class="headerlink" title="使用QML"></a>使用QML</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PySide2.QtWidgets <span class="keyword">import</span> QApplication</span><br><span class="line"><span class="keyword">from</span> PySide2.QtQuick <span class="keyword">import</span> QQuickView</span><br><span class="line"><span class="keyword">from</span> PySide2.QtCore <span class="keyword">import</span> QUrl</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    view = QQuickView()</span><br><span class="line">    url = QUrl(<span class="string">"app.qml"</span>)</span><br><span class="line">    view.setSource(url)</span><br><span class="line">    view.show()</span><br><span class="line">    app.exec_()</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import QtQuick 2.0</span><br><span class="line">Rectangle&#123;</span><br><span class="line">width:300</span><br><span class="line">height:300</span><br><span class="line">color:"cyan"</span><br><span class="line">Text&#123;</span><br><span class="line">text:"Hello world"</span><br><span class="line">anchors.centerIn:parent</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="http://doc.qt.io/qtforpython/tutorials/index.html" target="_blank" rel="noopener">官方教程</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PySide2安装&quot;&gt;&lt;a href=&quot;#PySide2安装&quot; class=&quot;headerlink&quot; title=&quot;PySide2安装&quot;&gt;&lt;/a&gt;PySide2安装&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="Python" scheme="https://suda-morris.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python Socket</title>
    <link href="https://suda-morris.github.io/2018/10/17/python-socket/"/>
    <id>https://suda-morris.github.io/2018/10/17/python-socket/</id>
    <published>2018-10-17T14:36:12.000Z</published>
    <updated>2018-10-29T02:46:05.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python中的Socket编程"><a href="#Python中的Socket编程" class="headerlink" title="Python中的Socket编程"></a>Python中的Socket编程</h1><h2 id="Python标准库中的socket模块"><a href="#Python标准库中的socket模块" class="headerlink" title="Python标准库中的socket模块"></a>Python标准库中的socket模块</h2><blockquote><p>socket对象支持使用TCP或者UDP协议进行网络通信，并提供了socket编程所需要的对象、函数和常量</p></blockquote><h3 id="简单TCP服务器实例"><a href="#简单TCP服务器实例" class="headerlink" title="简单TCP服务器实例"></a>简单TCP服务器实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server_host = <span class="string">"192.168.1.103"</span></span><br><span class="line">server_port = <span class="number">3629</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class="comment"># 本套接字是建立在IPv4基础上的流式套接字</span></span><br><span class="line">    server_sock.bind((server_host, server_port))  <span class="comment"># 绑定本地地址和端口号</span></span><br><span class="line">    server_sock.listen(<span class="number">5</span>)  <span class="comment"># 使能监听</span></span><br><span class="line"></span><br><span class="line">    client_sock, client_addr_info = server_sock.accept()  <span class="comment"># 阻塞，等待客户端连接</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = client_sock.recv(<span class="number">1024</span>)  <span class="comment"># 接收数据</span></span><br><span class="line">        data = data.decode(<span class="string">"utf-8"</span>)  <span class="comment"># 数据解码</span></span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">"bye"</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(<span class="string">"Receive from Client[&#123;addr_info&#125;]:&#123;content&#125;"</span>.format(addr_info=client_addr_info, content=data))</span><br><span class="line">        data = data + <span class="string">"--&gt; OK"</span></span><br><span class="line">        client_sock.send(data.encode(<span class="string">"utf-8"</span>))  <span class="comment"># 发送数据给客户端</span></span><br><span class="line"></span><br><span class="line">    client_sock.close()  <span class="comment"># 关闭客户端套接字</span></span><br><span class="line">    server_sock.close()  <span class="comment"># 关闭服务端套接字</span></span><br></pre></td></tr></table></figure><h3 id="简单TCP客户端实例"><a href="#简单TCP客户端实例" class="headerlink" title="简单TCP客户端实例"></a>简单TCP客户端实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server_host = <span class="string">"192.168.1.103"</span></span><br><span class="line">server_port = <span class="number">3629</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class="comment"># 本套接字是建立在IPv4基础上的流式套接字</span></span><br><span class="line">    client_sock.connect((server_host, server_port))  <span class="comment"># 向服务器发起连接</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = input(<span class="string">"Please Enter a Message to Send: "</span>)</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            client_sock.send(data.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">"bye"</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            data = client_sock.recv(<span class="number">1024</span>)</span><br><span class="line">            data = data.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">            print(<span class="string">"Receive from Server: &#123;content&#125;"</span>.format(content=data))</span><br><span class="line">    client_sock.close()</span><br></pre></td></tr></table></figure><h3 id="简单UDP服务器实例"><a href="#简单UDP服务器实例" class="headerlink" title="简单UDP服务器实例"></a>简单UDP服务器实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server_host = <span class="string">"192.168.1.103"</span></span><br><span class="line">server_port = <span class="number">3629</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    server_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  <span class="comment"># 本套接字是建立在IPv4基础上的数据报套接字</span></span><br><span class="line">    server_sock.bind((server_host, server_port))  <span class="comment"># 绑定IP地址和端口号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data, client_addr_info = server_sock.recvfrom(<span class="number">1024</span>)</span><br><span class="line">        data = data.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">"bye"</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(<span class="string">"Receive from Client[&#123;addr_info&#125;]:&#123;content&#125;"</span>.format(addr_info=client_addr_info, content=data))</span><br><span class="line">        data = data + <span class="string">" --&gt; OK"</span></span><br><span class="line">        server_sock.sendto(data.encode(<span class="string">"utf-8"</span>), client_addr_info)</span><br><span class="line">    server_sock.close()</span><br></pre></td></tr></table></figure><h3 id="简单UDP客户端实例"><a href="#简单UDP客户端实例" class="headerlink" title="简单UDP客户端实例"></a>简单UDP客户端实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server_host = <span class="string">"192.168.1.103"</span></span><br><span class="line">server_port = <span class="number">3629</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    client_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  <span class="comment"># 本套接字是建立在IPv4基础上的数据报套接字</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = input(<span class="string">"Please Enter a Message to Send: "</span>)</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            client_sock.sendto(data.encode(<span class="string">"utf-8"</span>), (server_host, server_port))</span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">"bye"</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            data, server_addr_info = client_sock.recvfrom(<span class="number">1024</span>)</span><br><span class="line">            data = data.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">            print(<span class="string">"Receive from Server[&#123;addr_info&#125;]:&#123;content&#125;"</span>.format(addr_info=server_addr_info, content=data))</span><br><span class="line">    client_sock.close()</span><br></pre></td></tr></table></figure><h2 id="小项目—备份服务器与客户端的简单实现-多线程版"><a href="#小项目—备份服务器与客户端的简单实现-多线程版" class="headerlink" title="小项目—备份服务器与客户端的简单实现(多线程版)"></a>小项目—备份服务器与客户端的简单实现(多线程版)</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/10/17/idOnEQ.png" alt="bak_server_protocol" title="">                </div>                <div class="image-caption">bak_server_protocol</div>            </figure><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.ttk <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">DEFAULT_BAK_PATH = <span class="string">r"E:\MyBak"</span>  <span class="comment"># 服务器端默认备份路径</span></span><br><span class="line"></span><br><span class="line">SERV_RUN_FLAG = <span class="keyword">True</span>  <span class="comment"># 服务器运行标志</span></span><br><span class="line">flag_lock = threading.Lock()  <span class="comment"># 运行标志的指令锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_infos</span><span class="params">(client)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    接受客户端传来的文件列表信息</span></span><br><span class="line"><span class="string">    :param client:客户端连接套接字</span></span><br><span class="line"><span class="string">    :return:data要备份的文件列表信息，compress是否是压缩文件</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    fmt_str = <span class="string">'Q?'</span>  <span class="comment"># 长整形+布尔型</span></span><br><span class="line">    headsize = struct.calcsize(fmt_str)</span><br><span class="line">    data = client.recv(headsize)  <span class="comment"># 接受文件信息列表的长度</span></span><br><span class="line">    infos_len, compress = struct.unpack(fmt_str, data)  <span class="comment"># unpack字节数据</span></span><br><span class="line">    data = <span class="string">b""</span>  <span class="comment"># 保存文件列表信息</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:  <span class="comment"># 每次最多接收1K字节</span></span><br><span class="line">        <span class="keyword">if</span> infos_len &gt; <span class="number">1024</span>:</span><br><span class="line">            data += client.recv(<span class="number">1024</span>)</span><br><span class="line">            infos_len -= <span class="number">1024</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data += client.recv(infos_len)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    data = pickle.loads(data)  <span class="comment"># 使用pickle反序列化</span></span><br><span class="line">    <span class="keyword">return</span> data, compress</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mk_file_path</span><span class="params">(filepath_rel)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    根据文件的相对路径创建服务器端的路径</span></span><br><span class="line"><span class="string">    :param filepath_rel: 客户端文件的相对路径</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    paths = filepath_rel.split(os.path.sep)[:<span class="number">-1</span>]  <span class="comment"># 按照目录级别切分，去掉最后一项(文件名)</span></span><br><span class="line">    p = DEFAULT_BAK_PATH</span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> paths:</span><br><span class="line">        p = os.path.join(p, path)  <span class="comment"># 逐级创建文件夹</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(p):</span><br><span class="line">            os.mkdir(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_compress_size</span><span class="params">(client)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取压缩文件的大小</span></span><br><span class="line"><span class="string">    :param client: 客户端连接套接字</span></span><br><span class="line"><span class="string">    :return: size压缩文件的大小</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    fmt_str = <span class="string">'Q'</span>  <span class="comment"># 长整型</span></span><br><span class="line">    size = struct.calcsize(fmt_str)</span><br><span class="line">    data = client.recv(size)</span><br><span class="line">    size = struct.unpack(fmt_str, data)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_file</span><span class="params">(client, filepath_rel, file_size, compress)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    接收并保存单个文件</span></span><br><span class="line"><span class="string">    :param client:客户端连接套接字</span></span><br><span class="line"><span class="string">    :param filepath_rel:文件的相对地址</span></span><br><span class="line"><span class="string">    :param file_size:文件大小</span></span><br><span class="line"><span class="string">    :param compress:是否是压缩文件</span></span><br><span class="line"><span class="string">    :return:返回接收成功与否</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    res = <span class="keyword">True</span></span><br><span class="line">    mk_file_path(filepath_rel)</span><br><span class="line">    filepath = os.path.join(DEFAULT_BAK_PATH, filepath_rel)  <span class="comment"># 文件在服务器端的完整路径</span></span><br><span class="line">    <span class="keyword">if</span> compress:</span><br><span class="line">        file_size = get_compress_size(client)</span><br><span class="line">        filepath = <span class="string">""</span>.join([os.path.splitext(filepath)[<span class="number">0</span>], <span class="string">".tar.gz"</span>])  <span class="comment"># 修改文件拓展名</span></span><br><span class="line">    f = open(filepath, <span class="string">"wb+"</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">if</span> file_size &gt; <span class="number">1024</span>:</span><br><span class="line">                data = client.recv(<span class="number">1024</span>)</span><br><span class="line">                f.write(data)</span><br><span class="line">                file_size -= <span class="number">1024</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data = client.recv(file_size)</span><br><span class="line">                f.write(data)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        res = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_echo</span><span class="params">(client, result)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    发送当前文件的备份结果给客户端</span></span><br><span class="line"><span class="string">    :param client: 客户端连接的套接字</span></span><br><span class="line"><span class="string">    :param result: 当前文件备份的结果</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        client.send(<span class="string">b"success"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        client.send(<span class="string">b"failure"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_operate</span><span class="params">(client_sock)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    客户端处理线程</span></span><br><span class="line"><span class="string">    :param client_sock:客户端连接套接字</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    files_infos, compress = get_file_infos(client_sock)  <span class="comment"># 获取客户端传送的文件列表信息以及是否发送压缩文件</span></span><br><span class="line">    <span class="keyword">for</span> file_size, file_path_rel <span class="keyword">in</span> files_infos:  <span class="comment"># 逐个接收文件</span></span><br><span class="line">        res = recv_file(client_sock, file_path_rel, file_size, compress)</span><br><span class="line">        send_echo(client_sock, res)</span><br><span class="line">    client_sock.close()  <span class="comment"># 关闭客户端套接字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(host, port)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    启动服务后运行的线程函数</span></span><br><span class="line"><span class="string">    :param host: 服务器IP地址</span></span><br><span class="line"><span class="string">    :param port: 服务器端口号</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(DEFAULT_BAK_PATH):  <span class="comment"># 判断本地备份根目录是否存在</span></span><br><span class="line">        os.mkdir(DEFAULT_BAK_PATH)</span><br><span class="line">    server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class="comment"># 创建流失套接字</span></span><br><span class="line">    server_sock.settimeout(<span class="number">1</span>)  <span class="comment"># 设置超时时间1s</span></span><br><span class="line">    server_sock.bind((host, int(port)))  <span class="comment"># 绑定服务器端的IP和端口号</span></span><br><span class="line">    server_sock.listen(<span class="number">1</span>)  <span class="comment"># 同一时间只处理一个客户端的连接</span></span><br><span class="line">    flag_lock.acquire()  <span class="comment"># 访问SERV_RUN_FLAG之前需要先获取指令锁</span></span><br><span class="line">    <span class="keyword">while</span> SERV_RUN_FLAG:</span><br><span class="line">        flag_lock.release()  <span class="comment"># 访问完成后立马释放指令锁</span></span><br><span class="line">        client_sock = <span class="keyword">None</span>  <span class="comment"># 客户端连接的套接字</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            client_sock, addr_info = server_sock.accept()  <span class="comment"># 1s内没有发生客户端连接动作就会产生超时异常</span></span><br><span class="line">        <span class="keyword">except</span> socket.timeout:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">if</span> client_sock:  <span class="comment"># 确实有客户端发起连接请求</span></span><br><span class="line">            t = threading.Thread(target=client_operate, args=(client_sock,))  <span class="comment"># 单独开线程处理客户端的需求</span></span><br><span class="line">            t.start()</span><br><span class="line">        flag_lock.acquire()  <span class="comment"># 访问SERV_RUN_FLAG之前需要先获取指令锁</span></span><br><span class="line">    server_sock.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span><span class="params">(Frame)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        自定义Frame</span></span><br><span class="line"><span class="string">        :param root: 父类容器对象</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super().__init__(root)</span><br><span class="line">        self.root = root</span><br><span class="line">        self.grid()  <span class="comment"># 网格布局</span></span><br><span class="line">        self.local_ip = <span class="string">"127.0.0.1"</span></span><br><span class="line">        self.local_ports = [<span class="number">10888</span>, <span class="number">20888</span>, <span class="number">30888</span>]</span><br><span class="line">        self.serv_ip = <span class="keyword">None</span></span><br><span class="line">        self.serv_port = <span class="keyword">None</span></span><br><span class="line">        self.__init_components()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init_components</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        初始化界面组件</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        proj_name = Label(self, text=<span class="string">u"远程备份服务器"</span>)</span><br><span class="line">        proj_name.grid(columnspan=<span class="number">2</span>)  <span class="comment"># 横跨两列</span></span><br><span class="line"></span><br><span class="line">        serv_ip_label = Label(self, text=<span class="string">u"服务地址"</span>)</span><br><span class="line">        serv_ip_label.grid(row=<span class="number">1</span>)</span><br><span class="line">        self.serv_ip = Combobox(self, values=self.__get_ip_address())  <span class="comment"># 下拉列表</span></span><br><span class="line">        self.serv_ip.set(self.local_ip)  <span class="comment"># 下拉列表默认值</span></span><br><span class="line">        self.serv_ip.grid(row=<span class="number">1</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        serv_port_label = Label(self, text=<span class="string">u"服务端口"</span>)</span><br><span class="line">        serv_port_label.grid(row=<span class="number">2</span>)</span><br><span class="line">        self.serv_port = Combobox(self, values=self.local_ports)</span><br><span class="line">        self.serv_port.set(self.local_ports[<span class="number">0</span>])</span><br><span class="line">        self.serv_port.grid(row=<span class="number">2</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.start_serv_btn = Button(self, text=<span class="string">u"启动服务"</span>, command=self.__start_serv)</span><br><span class="line">        self.start_serv_btn.grid(row=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        self.exit_serv_btn = Button(self, text=<span class="string">u"退出服务"</span>, command=self.__exit_serv)</span><br><span class="line">        self.exit_serv_btn.grid(row=<span class="number">3</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get_ip_address</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取服务器端可用的IP地址</span></span><br><span class="line"><span class="string">        :return: IP地址列表</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        hostname = socket.gethostname()  <span class="comment"># 获取主机名</span></span><br><span class="line">        info = socket.gethostbyname_ex(hostname)  <span class="comment"># 根据主机名获取IP地址信息</span></span><br><span class="line">        info = info[<span class="number">2</span>]  <span class="comment"># 第3项才是ip地址列表</span></span><br><span class="line">        info.append(self.local_ip)  <span class="comment"># 加上回环地址</span></span><br><span class="line">        <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__start_serv</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        【启动服务】按键处理程序</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        host = self.serv_ip.get()  <span class="comment"># 从下拉列表中获取用户设置的IP地址</span></span><br><span class="line">        port = self.serv_port.get()  <span class="comment"># 从下拉列表中获取用户设置的端口号</span></span><br><span class="line">        t = threading.Thread(target=start, args=(host, port))  <span class="comment"># 开启线程处理客户端连接请求</span></span><br><span class="line">        t.start()</span><br><span class="line">        self.start_serv_btn.state([<span class="string">"disabled"</span>, ])  <span class="comment"># 启动按钮变暗</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit_serv</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        【退出服务】按键处理程序</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">global</span> SERV_RUN_FLAG</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">if</span> flag_lock.acquire():</span><br><span class="line">                SERV_RUN_FLAG = <span class="keyword">False</span></span><br><span class="line">                flag_lock.release()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.root.destroy()  <span class="comment"># 退出界面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.title(<span class="string">u"备份服务器"</span>)</span><br><span class="line">    root.resizable(<span class="keyword">False</span>, <span class="keyword">False</span>)</span><br><span class="line">    app = MyFrame(root)</span><br><span class="line">    app.mainloop()</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.ttk <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_file_infos</span><span class="params">(client, file_infos, compress)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    发送文件信息</span></span><br><span class="line"><span class="string">    :param client:客户端连接套接字</span></span><br><span class="line"><span class="string">    :param file_infos: 文件信息，列表</span></span><br><span class="line"><span class="string">    :param compress: 是否需要压缩</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    fmt_str = <span class="string">'Q?'</span>  <span class="comment"># 长整型+布尔类型</span></span><br><span class="line">    infos_bytes = pickle.dumps(file_infos)  <span class="comment"># 对file_infos序列化操作</span></span><br><span class="line">    infos_bytes_len = len(infos_bytes)</span><br><span class="line">    infos_bytes_len_pack = struct.pack(fmt_str, infos_bytes_len, compress)  <span class="comment"># 用struct模块对长度值进行二进制编码</span></span><br><span class="line">    client.sendall(infos_bytes_len_pack)  <span class="comment"># 先发送长度</span></span><br><span class="line">    client.sendall(infos_bytes)  <span class="comment"># 再发送内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_file</span><span class="params">(client, file, compress)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    发送单个文件至服务器</span></span><br><span class="line"><span class="string">    :param client:客户端连接套接字</span></span><br><span class="line"><span class="string">    :param file:#要发送文件的绝对路径</span></span><br><span class="line"><span class="string">    :param compress:是否需要压缩</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> compress:</span><br><span class="line">        f = open(file, <span class="string">"rb"</span>)  <span class="comment"># 二进制只读方式读取文件</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = tempfile.NamedTemporaryFile()  <span class="comment"># 创建临时文件</span></span><br><span class="line">        tar = tarfile.open(mode=<span class="string">"w:gz"</span>, fileobj=f)  <span class="comment"># gzip 压缩</span></span><br><span class="line">        tar.add(file)</span><br><span class="line">        tar.close()</span><br><span class="line">        f.seek(<span class="number">0</span>)  <span class="comment"># 调整文件指针位置</span></span><br><span class="line">        file_size = os.stat(f.name).st_size  <span class="comment"># 计算压缩文件的大小</span></span><br><span class="line">        file_size_pack = struct.pack(<span class="string">'Q'</span>, file_size)  <span class="comment"># 压缩文件大小二进制编码</span></span><br><span class="line">        client.sendall(file_size_pack)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = f.read(<span class="number">1024</span>)  <span class="comment"># 每次发送1K字节，直到发送结束</span></span><br><span class="line">            <span class="keyword">if</span> data:</span><br><span class="line">                client.sendall(data)  <span class="comment"># 发送原文件或者时压缩文件</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bak_info</span><span class="params">(client, size=<span class="number">7</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    从服务器获取当前备份结果信息</span></span><br><span class="line"><span class="string">    :param client:客户端连接套接字</span></span><br><span class="line"><span class="string">    :param size:返回结果信息[success,failure]的字节数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    msg = client.recv(size)</span><br><span class="line">    print(msg.decode(<span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_infos_paths</span><span class="params">(root_path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取文件夹下的所有文件信息和文件路径</span></span><br><span class="line"><span class="string">    :param root_path:文件夹根目录</span></span><br><span class="line"><span class="string">    :return:infos文件信息列表，元素是元祖(文件大小，文件相对路径)，paths文件绝对路径</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    infos = []</span><br><span class="line">    paths = []</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root_path <span class="keyword">or</span> <span class="keyword">not</span> os.path.exists(root_path):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span>, <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">for</span> dirpath, dirnames, filenames <span class="keyword">in</span> os.walk(root_path):  <span class="comment"># 递归遍历根目录下所有文件</span></span><br><span class="line">        <span class="comment"># dirpath根目录，dirnames文件夹名，filenames文件名</span></span><br><span class="line">        <span class="keyword">for</span> file_name <span class="keyword">in</span> filenames:</span><br><span class="line">            file_path = os.path.join(dirpath, file_name)  <span class="comment"># 获取文件的绝对路径</span></span><br><span class="line">            paths.append(file_path)</span><br><span class="line">            file_size = os.stat(file_path).st_size  <span class="comment"># 获取文件大小</span></span><br><span class="line">            file_path_rel = file_path[len(root_path) + <span class="number">1</span>:]  <span class="comment"># 获取文件相对路径</span></span><br><span class="line">            infos.append((file_size, file_path_rel))</span><br><span class="line">    <span class="keyword">return</span> infos, paths</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(host, port, root_path, compress)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    开始备份工作的线程函数</span></span><br><span class="line"><span class="string">    :param host:服务器IP地址</span></span><br><span class="line"><span class="string">    :param port:服务器端口号</span></span><br><span class="line"><span class="string">    :param root_path:备份路径根目录</span></span><br><span class="line"><span class="string">    :param compress:是否需要压缩文件</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root_path):</span><br><span class="line">        print(<span class="string">u"备份的路径不存在!"</span>, root_path)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class="comment"># 建立流式套接字</span></span><br><span class="line">    client_sock.connect((host, port))  <span class="comment"># 连接服务器</span></span><br><span class="line">    file_infos, file_paths = get_file_infos_paths(root_path)  <span class="comment"># 获取指定目录下的文件信息与文件路径</span></span><br><span class="line">    send_file_infos(client_sock, file_infos, compress)  <span class="comment"># 发送需要备份的文件信息</span></span><br><span class="line">    <span class="keyword">for</span> fp <span class="keyword">in</span> file_paths:</span><br><span class="line">        send_file(client_sock, fp, compress)  <span class="comment"># 依次发送所有文件</span></span><br><span class="line">        print(fp)  <span class="comment"># 打印当前正在备份的文件</span></span><br><span class="line">        get_bak_info(client_sock)  <span class="comment"># 打印文件备份结果</span></span><br><span class="line">    client_sock.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span><span class="params">(Frame)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        自定义Frame</span></span><br><span class="line"><span class="string">        :param root: 父类容器对象</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super().__init__(root)</span><br><span class="line">        self.root = root  <span class="comment"># 保存父类容器控件</span></span><br><span class="line">        self.grid()  <span class="comment"># 整体使用网格布局</span></span><br><span class="line">        self.remote_ip_default = <span class="string">"127.0.0.1"</span>  <span class="comment"># 默认连接的服务器IP地址</span></span><br><span class="line">        self.remote_port_default = <span class="number">10888</span>  <span class="comment"># 默认连接的服务器端口号</span></span><br><span class="line">        self.remote_ip_var = StringVar()  <span class="comment"># 保存用户输入的服务器IP地址</span></span><br><span class="line">        self.remote_port_var = IntVar()  <span class="comment"># 保存用户输入的服务器端口号</span></span><br><span class="line">        self.bak_src_var = StringVar()  <span class="comment"># 保存用户输入的本地备份路径</span></span><br><span class="line">        self.compress_var = BooleanVar()  <span class="comment"># 保存用户是否需要对文件进行压缩处理</span></span><br><span class="line">        self.__init_components()  <span class="comment"># 初始化界面上的所有组件</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init_components</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        初始化界面组件</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        proj_name = Label(self, text=<span class="string">u"远程备份客户端"</span>)</span><br><span class="line">        proj_name.grid(columnspan=<span class="number">2</span>)  <span class="comment"># 横跨两列</span></span><br><span class="line"></span><br><span class="line">        serv_ip_label = Label(self, text=<span class="string">u"服务器地址："</span>)</span><br><span class="line">        serv_ip_label.grid(row=<span class="number">1</span>)</span><br><span class="line">        self.serv_ip = Entry(self, textvariable=self.remote_ip_var)  <span class="comment"># 输入框</span></span><br><span class="line">        self.remote_ip_var.set(self.remote_ip_default)</span><br><span class="line">        self.serv_ip.grid(row=<span class="number">1</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        serv_port_label = Label(self, text=<span class="string">u"服务器端口："</span>)</span><br><span class="line">        serv_port_label.grid(row=<span class="number">2</span>)</span><br><span class="line">        self.serv_port = Entry(self, textvariable=self.remote_port_var)</span><br><span class="line">        self.remote_port_var.set(self.remote_port_default)</span><br><span class="line">        self.serv_port.grid(row=<span class="number">2</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        bak_src_label = Label(self, text=<span class="string">u"备份的目标："</span>)</span><br><span class="line">        bak_src_label.grid(row=<span class="number">3</span>)</span><br><span class="line">        self.bak_src = Entry(self, textvariable=self.bak_src_var)</span><br><span class="line">        self.bak_src.grid(row=<span class="number">3</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        compress_label = Label(self, text=<span class="string">u"压缩备份："</span>)</span><br><span class="line">        compress_label.grid(row=<span class="number">4</span>)</span><br><span class="line">        self.compress_on = Checkbutton(self, text=<span class="string">u"开启压缩"</span>, variable=self.compress_var, onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>)  <span class="comment"># 单选框</span></span><br><span class="line">        self.compress_on.grid(row=<span class="number">4</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.start_serv_btn = Button(self, text=<span class="string">u"开始备份"</span>, command=self.__start_bak)  <span class="comment"># 按钮，绑定事件处理函数</span></span><br><span class="line">        self.start_serv_btn.grid(row=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        self.exit_serv_btn = Button(self, text=<span class="string">u"退出程序"</span>, command=self.__exit_bak)</span><br><span class="line">        self.exit_serv_btn.grid(row=<span class="number">5</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__start_bak</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        【开始备份】事件处理</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        host = self.remote_ip_var.get()</span><br><span class="line">        port = self.remote_port_var.get()</span><br><span class="line">        bak_path = self.bak_src_var.get()</span><br><span class="line">        compress = self.compress_var.get()</span><br><span class="line">        self.bak_src_var.set(<span class="string">""</span>)  <span class="comment"># 清空备份路径输入框</span></span><br><span class="line">        t = threading.Thread(target=start, args=(host, port, bak_path, compress))  <span class="comment"># 创建子线程</span></span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit_bak</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        【退出程序】事件处理</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.root.destroy()  <span class="comment"># 退出界面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    root = Tk()</span><br><span class="line">    root.title(<span class="string">u"备份客户端"</span>)</span><br><span class="line">    root.resizable(<span class="keyword">False</span>, <span class="keyword">False</span>)  <span class="comment"># 大小不允许伸缩</span></span><br><span class="line">    app = MyFrame(root)</span><br><span class="line">    app.mainloop()</span><br></pre></td></tr></table></figure><h2 id="SocketServer框架"><a href="#SocketServer框架" class="headerlink" title="SocketServer框架"></a>SocketServer框架</h2><blockquote><p>Python提供了SocketServer框架用来编写网络服务器，它预定义了一个基本的服务器框架</p><p>步骤：</p><ol><li>建立客户端处理类</li><li>初始化服务器类，传入相关参数</li><li>启动服务器</li></ol></blockquote><h3 id="SocketServer框架下的TCP服务器"><a href="#SocketServer框架下的TCP服务器" class="headerlink" title="SocketServer框架下的TCP服务器"></a>SocketServer框架下的TCP服务器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">"127.0.0.1"</span></span><br><span class="line">PORT = <span class="number">3629</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shut_server_down</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> server:</span><br><span class="line">        server.shutdown()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span><span class="params">(socketserver.StreamRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = self.rfile.readline()  <span class="comment"># 按行读取数据(需要数据中包含换行符)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            print(<span class="string">"Receive From Client: "</span>, data.decode(<span class="string">"utf-8"</span>).strip(<span class="string">'\n'</span>))</span><br><span class="line">            self.wfile.write(data)</span><br><span class="line">        threading.Thread(target=shut_server_down).start()  <span class="comment"># 服务器的shutdown方法需要在别的线程中调用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    server = socketserver.TCPServer((HOST, PORT), MyHandler)  <span class="comment"># 创建TCP服务器</span></span><br><span class="line">    server.serve_forever()  <span class="comment"># 运行服务器</span></span><br></pre></td></tr></table></figure><h4 id="配套的TCP客户端"><a href="#配套的TCP客户端" class="headerlink" title="配套的TCP客户端"></a>配套的TCP客户端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server_host = <span class="string">"192.168.1.104"</span></span><br><span class="line">server_port = <span class="number">3629</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class="comment"># 本套接字是建立在IPv4基础上的流式套接字</span></span><br><span class="line">    client_sock.connect((server_host, server_port))  <span class="comment"># 向服务器发起连接</span></span><br><span class="line">    data = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">while</span> data:</span><br><span class="line">        data = input(<span class="string">"Please Enter a Message to Send: "</span>)</span><br><span class="line">        data += <span class="string">'\n'</span></span><br><span class="line">        client_sock.send(data.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">        data = client_sock.recv(<span class="number">1024</span>)</span><br><span class="line">        data = data.decode(<span class="string">"utf-8"</span>).strip(<span class="string">'\n'</span>)</span><br><span class="line">        print(<span class="string">"Receive from Server: &#123;content&#125;"</span>.format(content=data))</span><br><span class="line">    client_sock.close()</span><br></pre></td></tr></table></figure><h3 id="SocketServer框架下的UDP服务器"><a href="#SocketServer框架下的UDP服务器" class="headerlink" title="SocketServer框架下的UDP服务器"></a>SocketServer框架下的UDP服务器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">"192.168.1.104"</span></span><br><span class="line">PORT = <span class="number">3629</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shut_server_down</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> server:</span><br><span class="line">        server.shutdown()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span><span class="params">(socketserver.DatagramRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        data, client_sock = self.request</span><br><span class="line">        data = data.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">"bye"</span>:</span><br><span class="line">            threading.Thread(target=shut_server_down).start()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        print(<span class="string">"Receive From Client: "</span>, data)</span><br><span class="line">        data = data + <span class="string">"---&gt;OK"</span></span><br><span class="line">        client_sock.sendto(data.encode(<span class="string">"utf-8"</span>), self.client_address)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    server = socketserver.UDPServer((HOST, PORT), MyHandler)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><h4 id="配套的UDP客户端"><a href="#配套的UDP客户端" class="headerlink" title="配套的UDP客户端"></a>配套的UDP客户端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server_host = <span class="string">"192.168.1.104"</span></span><br><span class="line">server_port = <span class="number">3629</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    client_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  <span class="comment"># 本套接字是建立在IPv4基础上的数据报套接字</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = input(<span class="string">"Please Enter a Message to Send: "</span>)</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            client_sock.sendto(data.encode(<span class="string">"utf-8"</span>), (server_host, server_port))</span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">"bye"</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            data = <span class="string">b""</span></span><br><span class="line">            <span class="keyword">while</span> len(data) == <span class="number">0</span>:  <span class="comment"># 防止接收到空数据</span></span><br><span class="line">                data, server_addr_info = client_sock.recvfrom(<span class="number">1024</span>)</span><br><span class="line">            data = data.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">            print(<span class="string">"Receive from Server[&#123;addr_info&#125;]:&#123;content&#125;"</span>.format(addr_info=server_addr_info, content=data))</span><br><span class="line">    client_sock.close()</span><br></pre></td></tr></table></figure><h2 id="使用SocketServer框架改写备份服务器程序"><a href="#使用SocketServer框架改写备份服务器程序" class="headerlink" title="使用SocketServer框架改写备份服务器程序"></a>使用SocketServer框架改写备份服务器程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.ttk <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">DEFAULT_BAK_PATH = <span class="string">r"E:\MyBak"</span>  <span class="comment"># 服务器端默认备份路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mk_file_path</span><span class="params">(filepath_rel)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    根据文件的相对路径创建服务器端的路径</span></span><br><span class="line"><span class="string">    :param filepath_rel: 客户端文件的相对路径</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    paths = filepath_rel.split(os.path.sep)[:<span class="number">-1</span>]  <span class="comment"># 按照目录级别切分，去掉最后一项(文件名)</span></span><br><span class="line">    p = DEFAULT_BAK_PATH</span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> paths:</span><br><span class="line">        p = os.path.join(p, path)  <span class="comment"># 逐级创建文件夹</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(p):</span><br><span class="line">            os.mkdir(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BakHandler</span><span class="params">(socketserver.StreamRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__client_operate()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__client_operate</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        客户端处理线程</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        files_infos, compress = self.__get_file_infos()  <span class="comment"># 获取客户端传送的文件列表信息以及是否发送压缩文件</span></span><br><span class="line">        <span class="keyword">for</span> file_size, file_path_rel <span class="keyword">in</span> files_infos:  <span class="comment"># 逐个接收文件</span></span><br><span class="line">            res = self.__recv_file(file_path_rel, file_size, compress)  <span class="comment"># request就是客户端连接的套接字</span></span><br><span class="line">            self.__send_echo(res)</span><br><span class="line">            self.request.close()  <span class="comment"># 关闭客户端套接字</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get_file_infos</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        接受客户端传来的文件列表信息</span></span><br><span class="line"><span class="string">        :return:data要备份的文件列表信息，compress是否是压缩文件</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        fmt_str = <span class="string">'Q?'</span>  <span class="comment"># 长整形+布尔型</span></span><br><span class="line">        headsize = struct.calcsize(fmt_str)</span><br><span class="line">        data = self.request.recv(headsize)  <span class="comment"># 接受文件信息列表的长度</span></span><br><span class="line">        infos_len, compress = struct.unpack(fmt_str, data)  <span class="comment"># unpack字节数据</span></span><br><span class="line">        data = <span class="string">b""</span>  <span class="comment"># 保存文件列表信息</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:  <span class="comment"># 每次最多接收1K字节</span></span><br><span class="line">            <span class="keyword">if</span> infos_len &gt; <span class="number">1024</span>:</span><br><span class="line">                data += self.request.recv(<span class="number">1024</span>)</span><br><span class="line">                infos_len -= <span class="number">1024</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data += self.request.recv(infos_len)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        data = pickle.loads(data)  <span class="comment"># 使用pickle反序列化</span></span><br><span class="line">        <span class="keyword">return</span> data, compress</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__send_echo</span><span class="params">(self, result)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        发送当前文件的备份结果给客户端</span></span><br><span class="line"><span class="string">        :param result: 当前文件备份的结果</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            self.request.send(<span class="string">b"success"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.request.send(<span class="string">b"failure"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__recv_file</span><span class="params">(self, filepath_rel, file_size, compress)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        接收并保存单个文件</span></span><br><span class="line"><span class="string">        :param filepath_rel:文件的相对地址</span></span><br><span class="line"><span class="string">        :param file_size:文件大小</span></span><br><span class="line"><span class="string">        :param compress:是否是压缩文件</span></span><br><span class="line"><span class="string">        :return:返回接收成功与否</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = <span class="keyword">True</span></span><br><span class="line">        mk_file_path(filepath_rel)</span><br><span class="line">        filepath = os.path.join(DEFAULT_BAK_PATH, filepath_rel)  <span class="comment"># 文件在服务器端的完整路径</span></span><br><span class="line">        <span class="keyword">if</span> compress:</span><br><span class="line">            file_size = self.__get_compress_size()</span><br><span class="line">            filepath = <span class="string">""</span>.join([os.path.splitext(filepath)[<span class="number">0</span>], <span class="string">".tar.gz"</span>])  <span class="comment"># 修改文件拓展名</span></span><br><span class="line">        f = open(filepath, <span class="string">"wb+"</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                <span class="keyword">if</span> file_size &gt; <span class="number">1024</span>:</span><br><span class="line">                    data = self.request.recv(<span class="number">1024</span>)</span><br><span class="line">                    f.write(data)</span><br><span class="line">                    file_size -= <span class="number">1024</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    data = self.request.recv(file_size)</span><br><span class="line">                    f.write(data)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            res = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            f.close()</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get_compress_size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取压缩文件的大小</span></span><br><span class="line"><span class="string">        :return: size压缩文件的大小</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        fmt_str = <span class="string">'Q'</span>  <span class="comment"># 长整型</span></span><br><span class="line">        size = struct.calcsize(fmt_str)</span><br><span class="line">        data = self.request.recv(size)</span><br><span class="line">        size = struct.unpack(fmt_str, data)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span><span class="params">(Frame)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        自定义Frame</span></span><br><span class="line"><span class="string">        :param root: 父类容器对象(根窗口)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super().__init__(root)</span><br><span class="line">        self.root = root</span><br><span class="line">        self.server = <span class="keyword">None</span></span><br><span class="line">        self.grid()  <span class="comment"># 网格布局</span></span><br><span class="line">        self.local_ip = <span class="string">"127.0.0.1"</span></span><br><span class="line">        self.local_ports = [<span class="number">10888</span>, <span class="number">20888</span>, <span class="number">30888</span>]</span><br><span class="line">        self.serv_ip = <span class="keyword">None</span></span><br><span class="line">        self.serv_port = <span class="keyword">None</span></span><br><span class="line">        self.__init_components()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init_components</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        初始化界面组件</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        proj_name = Label(self, text=<span class="string">u"远程备份服务器"</span>)</span><br><span class="line">        proj_name.grid(columnspan=<span class="number">2</span>)  <span class="comment"># 横跨两列</span></span><br><span class="line"></span><br><span class="line">        serv_ip_label = Label(self, text=<span class="string">u"服务地址"</span>)</span><br><span class="line">        serv_ip_label.grid(row=<span class="number">1</span>)</span><br><span class="line">        self.serv_ip = Combobox(self, values=self.__get_ip_address())  <span class="comment"># 下拉列表</span></span><br><span class="line">        self.serv_ip.set(self.local_ip)  <span class="comment"># 下拉列表默认值</span></span><br><span class="line">        self.serv_ip.grid(row=<span class="number">1</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        serv_port_label = Label(self, text=<span class="string">u"服务端口"</span>)</span><br><span class="line">        serv_port_label.grid(row=<span class="number">2</span>)</span><br><span class="line">        self.serv_port = Combobox(self, values=self.local_ports)</span><br><span class="line">        self.serv_port.set(self.local_ports[<span class="number">0</span>])</span><br><span class="line">        self.serv_port.grid(row=<span class="number">2</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.start_serv_btn = Button(self, text=<span class="string">u"启动服务"</span>, command=self.__start_serv)</span><br><span class="line">        self.start_serv_btn.grid(row=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        self.exit_serv_btn = Button(self, text=<span class="string">u"退出服务"</span>, command=self.__exit_serv)</span><br><span class="line">        self.exit_serv_btn.grid(row=<span class="number">3</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get_ip_address</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取服务器端可用的IP地址</span></span><br><span class="line"><span class="string">        :return: IP地址列表</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        hostname = socket.gethostname()  <span class="comment"># 获取主机名</span></span><br><span class="line">        info = socket.gethostbyname_ex(hostname)  <span class="comment"># 根据主机名获取IP地址信息</span></span><br><span class="line">        info = info[<span class="number">2</span>]  <span class="comment"># 第3项才是ip地址列表</span></span><br><span class="line">        info.append(self.local_ip)  <span class="comment"># 加上回环地址</span></span><br><span class="line">        <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__start_serv</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        【启动服务】按键处理程序</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(DEFAULT_BAK_PATH):  <span class="comment"># 判断本地备份根目录是否存在</span></span><br><span class="line">            os.mkdir(DEFAULT_BAK_PATH)</span><br><span class="line">        host = self.serv_ip.get()  <span class="comment"># 从下拉列表中获取用户设置的IP地址</span></span><br><span class="line">        port = self.serv_port.get()  <span class="comment"># 从下拉列表中获取用户设置的端口号</span></span><br><span class="line">        self.start_serv_btn.state([<span class="string">"disabled"</span>, ])  <span class="comment"># 启动按钮变暗</span></span><br><span class="line">        self.server = socketserver.ThreadingTCPServer((host, int(port)), BakHandler)  <span class="comment"># 创建多线程TCP服务器</span></span><br><span class="line">        threading.Thread(target=self.server.serve_forever).start()  <span class="comment"># 在新线程中启动服务器</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit_serv</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        【退出服务】按键处理程序</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.server:</span><br><span class="line">            threading.Thread(target=self.server.shutdown).start()</span><br><span class="line">        self.root.destroy()  <span class="comment"># 退出界面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    root = Tk()  <span class="comment"># 根窗口</span></span><br><span class="line">    root.title(<span class="string">u"备份服务器"</span>)</span><br><span class="line">    root.resizable(<span class="keyword">False</span>, <span class="keyword">False</span>)</span><br><span class="line">    app = MyFrame(root)</span><br><span class="line">    app.mainloop()</span><br></pre></td></tr></table></figure><h2 id="项目：简单FTP服务器与客户端的实现"><a href="#项目：简单FTP服务器与客户端的实现" class="headerlink" title="项目：简单FTP服务器与客户端的实现"></a>项目：简单FTP服务器与客户端的实现</h2><h3 id="FTP服务器的实现"><a href="#FTP服务器的实现" class="headerlink" title="FTP服务器的实现"></a>FTP服务器的实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_opr_file</span><span class="params">(client_addr, item)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    向FTPDataHandler类的操作列表中添加新操作</span></span><br><span class="line"><span class="string">    命令通道和数据通道，实际上是通过FTPDataHandler类中的client_oper字典联系在一起的</span></span><br><span class="line"><span class="string">    :param client_addr: 客户端的ip地址</span></span><br><span class="line"><span class="string">    :param item: 新操作</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> client_addr <span class="keyword">in</span> FTPDataHandler.client_oper:</span><br><span class="line">        FTPDataHandler.client_oper[client_addr].append(item)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        FTPDataHandler.client_oper[client_addr] = [item, ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FTPHandler</span><span class="params">(socketserver.StreamRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, request=None, client_addr=None, server=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        FTP服务器的处理类</span></span><br><span class="line"><span class="string">        :param request: 请求对象，即连接的客户端socket</span></span><br><span class="line"><span class="string">        :param client_addr: 客户端地址</span></span><br><span class="line"><span class="string">        :param server: 与自己绑定的服务器对象(即后面的MyThreadFTPServer对象)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.cmd_keys = (<span class="string">"QUIT"</span>, <span class="string">"USER"</span>, <span class="string">"NOOP"</span>, <span class="string">"TYPE"</span>, <span class="string">"PASV"</span>, <span class="string">"PORT"</span>, <span class="string">"RETR"</span>, <span class="string">"STOR"</span>)  <span class="comment"># FTP服务器支持的命令</span></span><br><span class="line">        self.coms = &#123;&#125;  <span class="comment"># 字典，&#123;命令:执行方法&#125;</span></span><br><span class="line">        self.__init_coms()  <span class="comment"># 初始化字典coms</span></span><br><span class="line">        self.server = server  <span class="comment"># 与服务类绑定的服务器的引用</span></span><br><span class="line">        self.cmd_port = <span class="number">21</span>  <span class="comment"># 命令端口号</span></span><br><span class="line">        self.data_port = <span class="number">20</span>  <span class="comment"># 数据端口号</span></span><br><span class="line">        self.pasv_data_ip = <span class="keyword">None</span>  <span class="comment"># 被动模式下，数据模块线程服务器的IP地址</span></span><br><span class="line">        self.pasv_data_port = <span class="keyword">None</span>  <span class="comment"># 被动模式下，数据模块线程服务器的端口号</span></span><br><span class="line">        self.args = <span class="keyword">None</span>  <span class="comment"># 某条命令对应的参数</span></span><br><span class="line">        self.loged = <span class="keyword">False</span>  <span class="comment"># 用户是否登陆</span></span><br><span class="line">        self.pasv_mode = <span class="keyword">None</span>  <span class="comment"># 当前服务器是否工作在被动模式</span></span><br><span class="line">        super().__init__(request, client_addr, server)  <span class="comment"># 调用父类的构造函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init_coms</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        初始化字典coms，键为命令名字，值为具体的方法</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> self.cmd_keys:</span><br><span class="line">            self.coms[key] = getattr(self, <span class="string">"exe_"</span> + key.lower())  <span class="comment"># 获取exe_开头的成员方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        重写父类的处理函数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            cmds = self.rfile.readline()  <span class="comment"># 读取一行用户发来的命令</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cmds:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            cmds = cmds.decode(<span class="string">"utf-8"</span>)  <span class="comment"># 解码</span></span><br><span class="line">            cmd = self.__parse_cmd(cmds)  <span class="comment"># 解析命令</span></span><br><span class="line">            <span class="keyword">if</span> cmd <span class="keyword">in</span> self.cmd_keys:</span><br><span class="line">                self.coms[cmd]()  <span class="comment"># 执行命令对应的方法</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.__send(<span class="number">500</span>, <span class="string">"Invalid command."</span>)</span><br><span class="line">            <span class="keyword">if</span> cmd == <span class="string">"QUIT"</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__parse_cmd</span><span class="params">(self, cmds)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        从字符串中提取命令动词和参数</span></span><br><span class="line"><span class="string">        :param cmds:包含命令、参数的字符串</span></span><br><span class="line"><span class="string">        :return:命令动词，大写</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">' '</span> <span class="keyword">in</span> cmds:  <span class="comment"># 根据空格来判断是否包含命令参数</span></span><br><span class="line">            cmd, args = cmds.split(<span class="string">' '</span>)  <span class="comment"># 切分命令动词与命令参数</span></span><br><span class="line">            self.args = args.strip(<span class="string">'\n'</span>).strip()  <span class="comment"># 清除换行符与空格</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cmd = cmds.strip(<span class="string">'\n'</span>).strip()</span><br><span class="line">        <span class="keyword">return</span> cmd.upper()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__send</span><span class="params">(self, code, info)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        向客户端返回命令执行状态</span></span><br><span class="line"><span class="string">        :param code:状态码</span></span><br><span class="line"><span class="string">        :param info:状态信息</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        infos = <span class="string">"%d %s\n"</span> % (code, info)</span><br><span class="line">        self.request.sendall(infos.encode(<span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__make_pasv_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        返回进入主动模式的信息</span></span><br><span class="line"><span class="string">        :return: 返回给客户端的信息，包括主动模式数据通道的IP地址和端口号，按照FTP协议的格式要求发送</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        ip_info = self.pasv_data_ip.split(<span class="string">'.'</span>)  <span class="comment"># IP地址之间的.号使用,号来替代</span></span><br><span class="line">        ip_info = <span class="string">','</span>.join(ip_info)</span><br><span class="line">        porta_info = str(self.pasv_data_port // <span class="number">256</span>)</span><br><span class="line">        portb_info = str(self.pasv_data_port % <span class="number">256</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">','</span>.join((ip_info, porta_info, portb_info))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter_pasv</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        进入被动模式，开启数据服务器</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.server.data_server:</span><br><span class="line">            self.pasv_data_ip, self.pasv_data_port = self.server.create_data_server()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exe_quit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        QUIT命令的执行动作</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.__send(<span class="number">221</span>, <span class="string">"bye."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exe_user</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        USER命令的执行动作</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        user = self.args  <span class="comment"># 获取登陆的用户名</span></span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">in</span> (<span class="string">""</span>, <span class="string">"anonymous"</span>):</span><br><span class="line">            self.loged = <span class="keyword">True</span></span><br><span class="line">            self.__send(<span class="number">230</span>, <span class="string">"identified!"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.__send(<span class="number">530</span>, <span class="string">"Only use anonymous."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exe_noop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        NOOP命令的执行动作</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.__send(<span class="number">200</span>, <span class="string">"ok."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exe_type</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        TYPE命令的执行动作</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.__send(<span class="number">200</span>, <span class="string">"ok."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exe_pasv</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        PASV命令的执行动作</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.loged:</span><br><span class="line">            self.__send(<span class="number">332</span>, <span class="string">"Please login."</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> self.pasv_mode:  <span class="comment"># 已经passive模式了</span></span><br><span class="line">            info = <span class="string">"entering passive mode (%s)"</span> % self.__make_pasv_info()</span><br><span class="line">            self.__send(<span class="number">227</span>, info)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.__enter_pasv()  <span class="comment"># 进入passive模式</span></span><br><span class="line">            info = <span class="string">"entering passive mode (%s)"</span> % self.__make_pasv_info()</span><br><span class="line">            self.pasv_mode = <span class="keyword">True</span></span><br><span class="line">            self.__send(<span class="number">227</span>, info)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  <span class="comment"># 进入passive模式失败</span></span><br><span class="line">            print(e)</span><br><span class="line">            self.pasv_mode = <span class="keyword">False</span></span><br><span class="line">            self.__send(<span class="number">500</span>, <span class="string">"Fail to enter passvie mode."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exe_port</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        PORT命令的执行动作</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.__send(<span class="number">500</span>, <span class="string">"Do not support port mode."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exe_retr</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        RETR命令的执行动作</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.join(<span class="string">"/root"</span>, <span class="string">"server"</span>, self.args)):  <span class="comment"># 确保要下载的文件是存在的</span></span><br><span class="line">            self.__send(<span class="number">550</span>, <span class="string">"File &#123;file_path&#125; not exist!"</span>.format(file_path=self.args))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        client_addr = self.request.getpeername()[<span class="number">0</span>]  <span class="comment"># 获取客户端的IP地址</span></span><br><span class="line">        add_opr_file(client_addr, (<span class="string">"RETR"</span>, self.args))  <span class="comment"># 向数据通道中添加新的任务</span></span><br><span class="line">        self.__send(<span class="number">150</span>, <span class="string">"ok."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exe_stor</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        STOR命令的执行动作</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        client_addr = self.request.getpeername()[<span class="number">0</span>]</span><br><span class="line">        add_opr_file(client_addr, (<span class="string">"STOR"</span>, self.args))  <span class="comment"># 向数据通道中添加新的任务</span></span><br><span class="line">        self.__send(<span class="number">150</span>, <span class="string">"ok."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FTPDataHandler</span><span class="params">(socketserver.StreamRequestHandler)</span>:</span></span><br><span class="line">    client_oper = &#123;&#125;  <span class="comment"># 字典，键为客户端IP地址，值为列表，存放具体的操作</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        数据服务器针对每个连接的客户端的操作</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        peerip = self.request.getpeername()[<span class="number">0</span>]  <span class="comment"># 获取连接的客户端的IP地址</span></span><br><span class="line">        opr = self.__get_opr_args(peerip)  <span class="comment"># 根据IP地址查询该客户端具体的操作</span></span><br><span class="line">        <span class="keyword">if</span> opr:</span><br><span class="line">            <span class="keyword">if</span> opr[<span class="number">0</span>] == <span class="string">"RETR"</span>:</span><br><span class="line">                self.retr_file(opr[<span class="number">1</span>])  <span class="comment"># 下载文件</span></span><br><span class="line">            <span class="keyword">elif</span> opr[<span class="number">0</span>] == <span class="string">"STOR"</span>:</span><br><span class="line">                self.stor_file(opr[<span class="number">1</span>])  <span class="comment"># 上传文件</span></span><br><span class="line">        self.request.close()  <span class="comment"># 处理完依次上传或者下载任务后就关闭客户端套接字</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get_opr_args</span><span class="params">(self, peerip)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        根据IP地址查询客户端需要服务的内容</span></span><br><span class="line"><span class="string">        :param peerip: 远端的IP地址</span></span><br><span class="line"><span class="string">        :return: opr具体的操作</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> peerip <span class="keyword">in</span> self.client_oper:</span><br><span class="line">            opr = self.client_oper[peerip].pop(<span class="number">0</span>)  <span class="comment"># 弹出列表中的第一个</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.client_oper[peerip]:  <span class="comment"># 针对该IP地址，列表中没有其余操作了</span></span><br><span class="line">                self.client_oper.pop(peerip)  <span class="comment"># 在字段中删除这个IP地址为键的项目</span></span><br><span class="line">            <span class="keyword">return</span> opr</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retr_file</span><span class="params">(self, filepath)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        客户端下载文件(对应服务器端的发送文件)</span></span><br><span class="line"><span class="string">        :param filepath: 文件路径</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        filepath = os.path.join(<span class="string">"/root"</span>, <span class="string">"server"</span>, filepath)</span><br><span class="line">        print(filepath)</span><br><span class="line">        f = open(filepath, <span class="string">"rb"</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = f.read(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> data:</span><br><span class="line">                self.request.sendall(data)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stor_file</span><span class="params">(self, filepath)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        客户端上传文件(对应服务器端的接收并保存文件)</span></span><br><span class="line"><span class="string">        :param filepath:文件路径</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        filepath = os.path.join(<span class="string">"/root"</span>, <span class="string">"server"</span>, filepath)</span><br><span class="line">        print(filepath)</span><br><span class="line">        f = open(filepath, <span class="string">"wb"</span>)  <span class="comment"># 将新文件保存到当前目录的bakt文件夹下</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = self.request.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> data:</span><br><span class="line">                f.write(data)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThreadFTPServer</span><span class="params">(socketserver.ThreadingTCPServer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, addr, handler)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        自定义多线程FTP服务器</span></span><br><span class="line"><span class="string">        :param addr: 服务器地址，元祖(IP地址，端口号)，21命令端口，20数据端口</span></span><br><span class="line"><span class="string">        :param handler:处理客户端连接的对象</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.data_server = <span class="keyword">None</span>  <span class="comment"># 专门负责数据通道的服务器</span></span><br><span class="line">        super().__init__(addr, handler)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shutdown</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        重写父类的shutdown函数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.data_server:  <span class="comment"># 是否有数据通道服务器没有关闭</span></span><br><span class="line">            threading.Thread(target=self.data_server.shutdown).start()</span><br><span class="line">        super().shutdown()  <span class="comment"># 调用父类的挂机函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_data_server</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        创建数据通道专用服务器</span></span><br><span class="line"><span class="string">        :return:pasv_data_ip数据服务器的IP地址；pasv_data_port数据服务器的端口号</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.data_server = socketserver.ThreadingTCPServer((<span class="string">"127.0.0.1"</span>, <span class="number">0</span>), FTPDataHandler)</span><br><span class="line">        pasv_data_ip, pasv_data_port = self.data_server.server_address  <span class="comment"># 获取数据服务器的ip地址和端口号</span></span><br><span class="line">        threading.Thread(target=self.data_server.serve_forever).start()  <span class="comment"># 开启新线程，启动数据服务器</span></span><br><span class="line">        <span class="keyword">return</span> pasv_data_ip, pasv_data_port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    ftp_server = MyThreadFTPServer((<span class="string">"127.0.0.1"</span>, <span class="number">21</span>), FTPHandler)</span><br><span class="line">    threading.Thread(target=ftp_server.serve_forever).start()  <span class="comment"># 开启新线程，启动FTP服务器</span></span><br><span class="line">    print(<span class="string">"FTP Server Start..."</span>)</span><br><span class="line">    <span class="comment"># time.sleep(30)</span></span><br><span class="line">    <span class="comment"># ftp_server.shutdown()</span></span><br></pre></td></tr></table></figure><h3 id="FTP客户端的实现"><a href="#FTP客户端的实现" class="headerlink" title="FTP客户端的实现"></a>FTP客户端的实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file</span><span class="params">(host, port, file_path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    从服务器下载文件</span></span><br><span class="line"><span class="string">    :param host: 服务器IP地址</span></span><br><span class="line"><span class="string">    :param port: 服务器端口号</span></span><br><span class="line"><span class="string">    :param file_path: 文件路径</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((host, port))</span><br><span class="line">    file_path = os.path.join(<span class="string">"/root"</span>, <span class="string">"client"</span>, file_path)  <span class="comment"># 文件保存在服务器的bakt文件夹下</span></span><br><span class="line">    print(file_path)</span><br><span class="line">    f = open(file_path, <span class="string">"wb"</span>)</span><br><span class="line">    data = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">while</span> data:</span><br><span class="line">        data = s.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            f.write(data)</span><br><span class="line">    s.close()</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put_data</span><span class="params">(host, port, file_path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    上传文件至服务器</span></span><br><span class="line"><span class="string">    :param host: 服务器的IP地址</span></span><br><span class="line"><span class="string">    :param port: 服务器的端口号</span></span><br><span class="line"><span class="string">    :param file_path: 本地文件路径</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((host, port))</span><br><span class="line">    print(file_path)</span><br><span class="line">    f = open(file_path, <span class="string">"rb"</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = f.read(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            s.sendall(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    s.close()</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FTPClient</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, host=<span class="string">"localhost"</span>, port=<span class="number">21</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        自定义FTP客户端</span></span><br><span class="line"><span class="string">        :param host:服务器IP地址</span></span><br><span class="line"><span class="string">        :param port:服务器端口号</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.host = host  <span class="comment"># 服务器ip地址</span></span><br><span class="line">        self.port = port  <span class="comment"># 服务器端口号</span></span><br><span class="line">        self.cmds = (<span class="string">"QUIT"</span>, <span class="string">"USER"</span>, <span class="string">"NOOP"</span>, <span class="string">"TYPE"</span>, <span class="string">"PASV"</span>, <span class="string">"PORT"</span>, <span class="string">"RETR"</span>, <span class="string">"STOR"</span>)  <span class="comment"># 支持的FTP命令</span></span><br><span class="line">        self.line_sep = <span class="string">'\n'</span></span><br><span class="line">        self.loged = <span class="keyword">False</span>  <span class="comment"># 是否已经登陆服务器</span></span><br><span class="line">        self.sock = <span class="keyword">None</span>  <span class="comment"># 连接服务器端的套接字</span></span><br><span class="line">        self.pasv_mode = <span class="keyword">None</span>  <span class="comment"># 是否处于被动模式</span></span><br><span class="line">        self.pasv_host = <span class="keyword">None</span>  <span class="comment"># 被动模式的服务器ip地址</span></span><br><span class="line">        self.pasv_port = <span class="keyword">None</span>  <span class="comment"># 被动模式的服务器端口号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cmd_connect</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        连接服务器</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.sock.connect((self.host, self.port))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__login</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        登录服务器</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.sock:</span><br><span class="line">            self.send_cmd(<span class="string">"USER"</span>)</span><br><span class="line">            res = self.read_line(self.sock)</span><br><span class="line">            <span class="keyword">if</span> res.startswith(<span class="string">"230"</span>):</span><br><span class="line">                print(<span class="string">"Log in Successfully!"</span>)</span><br><span class="line">                self.loged = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_line</span><span class="params">(self, sock)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        按行读取服务器返回数据</span></span><br><span class="line"><span class="string">        :param sock: 套接字</span></span><br><span class="line"><span class="string">        :return: data接收到的一行数据</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        data = <span class="string">""</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> data.endswith(self.line_sep):</span><br><span class="line">            d = sock.recv(<span class="number">1</span>)</span><br><span class="line">            data += d.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__parse_cmd</span><span class="params">(self, cmd_str)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        从字符串中解析命令</span></span><br><span class="line"><span class="string">        :param cmd_str: 命令字符串</span></span><br><span class="line"><span class="string">        :return: 返回命令动词(大写)，命令参数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">' '</span> <span class="keyword">in</span> cmd_str:</span><br><span class="line">            cmd_lst = cmd_str.split(<span class="string">' '</span>)</span><br><span class="line">            cmd = cmd_lst[<span class="number">0</span>]</span><br><span class="line">            args = <span class="string">' '</span>.join(cmd_lst[<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cmd = cmd_str</span><br><span class="line">            args = <span class="string">''</span></span><br><span class="line">        <span class="keyword">return</span> cmd.upper(), args</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_cmd</span><span class="params">(self, cmd, args=<span class="string">""</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        发送命令</span></span><br><span class="line"><span class="string">        :param cmd: 命令动词</span></span><br><span class="line"><span class="string">        :param args: 命令参数</span></span><br><span class="line"><span class="string">        :return: 返回命令发送成功与否</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.sock:</span><br><span class="line">            <span class="keyword">if</span> args:</span><br><span class="line">                cmd = <span class="string">' '</span>.join((cmd, args))</span><br><span class="line">                <span class="keyword">if</span> cmd.startswith(<span class="string">"RETR"</span>) <span class="keyword">or</span> cmd.startswith(<span class="string">"STOR"</span>):</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> self.pasv_mode:</span><br><span class="line">                        print(<span class="string">"Please enter passive mode first"</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> args:</span><br><span class="line">                        print(<span class="string">"Please specify a file"</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                <span class="keyword">if</span> cmd.startswith(<span class="string">"STOR"</span>):</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(args):</span><br><span class="line">                        print(<span class="string">"File not exist"</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            cmd += self.line_sep</span><br><span class="line">            self.sock.sendall(cmd.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        循环执行用户输入的命令</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        print(<span class="string">"Supported Commands: "</span>, self.cmds)</span><br><span class="line">        self.__cmd_connect()  <span class="comment"># 连接</span></span><br><span class="line">        self.__login()  <span class="comment"># 登陆</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            cmd_str = input(<span class="string">"Enter your commands: "</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cmd_str:</span><br><span class="line">                print(<span class="string">"FTP command can not be empty"</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            cmd, args = self.__parse_cmd(cmd_str)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.send_cmd(cmd, args):</span><br><span class="line">                print(<span class="string">"Fail to send your command: "</span>, cmd)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            res = self.read_line(self.sock)</span><br><span class="line">            print(res)</span><br><span class="line">            <span class="keyword">if</span> cmd.startswith(<span class="string">"PASV"</span>) <span class="keyword">and</span> res.startswith(<span class="string">"227"</span>):</span><br><span class="line">                self.pasv_mode = <span class="keyword">True</span></span><br><span class="line">                server_info = res[res.index(<span class="string">'('</span>) + <span class="number">1</span>:res.index(<span class="string">')'</span>)]</span><br><span class="line">                self.pasv_host = <span class="string">'.'</span>.join(server_info.split(<span class="string">','</span>)[:<span class="number">4</span>])</span><br><span class="line">                server_info = server_info.split(<span class="string">','</span>)[<span class="number">-2</span>:]</span><br><span class="line">                self.pasv_port = int(server_info[<span class="number">0</span>]) * <span class="number">256</span> + int(server_info[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> cmd.startswith(<span class="string">"RETR"</span>):  <span class="comment"># 下载文件</span></span><br><span class="line">                <span class="keyword">if</span> self.pasv_mode:</span><br><span class="line">                    threading.Thread(target=get_file, args=(self.pasv_host, self.pasv_port, args)).start()</span><br><span class="line">            <span class="keyword">if</span> cmd.startswith(<span class="string">"STOR"</span>):  <span class="comment"># 上传文件</span></span><br><span class="line">                <span class="keyword">if</span> self.pasv_mode:</span><br><span class="line">                    threading.Thread(target=put_data, args=(self.pasv_host, self.pasv_port, args)).start()</span><br><span class="line">            <span class="keyword">if</span> cmd.startswith(<span class="string">"QUIT"</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.sock.close()</span><br><span class="line">        self.sock = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    ftp_client = FTPClient()</span><br><span class="line">    ftp_client.start()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python中的Socket编程&quot;&gt;&lt;a href=&quot;#Python中的Socket编程&quot; class=&quot;headerlink&quot; title=&quot;Python中的Socket编程&quot;&gt;&lt;/a&gt;Python中的Socket编程&lt;/h1&gt;&lt;h2 id=&quot;Python标准库
      
    
    </summary>
    
      <category term="Python" scheme="https://suda-morris.github.io/categories/Python/"/>
    
    
      <category term="Socket" scheme="https://suda-morris.github.io/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>Logistic Regression</title>
    <link href="https://suda-morris.github.io/2018/10/15/logistic-regression/"/>
    <id>https://suda-morris.github.io/2018/10/15/logistic-regression/</id>
    <published>2018-10-15T04:36:12.000Z</published>
    <updated>2018-10-29T02:46:05.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h1><blockquote><ol><li>Logistic回归虽然是名字中带有“回归”，但实际上它是一种<strong>分类算法</strong>，主要应用与<strong>二分类</strong>问题(输出只有两种结果，比如0和1)</li><li>逻辑回归实质上可以看作是一种简单的<strong>神经网络</strong></li></ol></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/10/15/ialgpR.png" alt="LogReg_kiank" title="">                </div>                <div class="image-caption">LogReg_kiank</div>            </figure><h2 id="数学公式推导"><a href="#数学公式推导" class="headerlink" title="数学公式推导"></a>数学公式推导</h2><p>假设神经元的突触的权重向量为<strong>w</strong>，线性偏置为<strong>b</strong>(标量)，对于第i个样本$x^{(i)}$来说：</p><p>$$z^{(i)} = w^T x^{(i)} + b\tag{1}$$</p><p>得到的$z^{(i)}$需要进一步输入激活函数，激活函数的选择有很多种，考虑到Logistic回归的输出只有0和1两种情况，因此选用sigmoid函数会比较符合要求：</p><p>$$\hat{y}^{(i)}=a^{(i)}=sigmoid(z^{(i)})\tag{2}$$ </p><p>sigmoid函数的导数：</p><p>$$\frac{da}{dz}=a(1-a)\tag{3}$$</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/10/15/ialR6x.png" alt="Sigmoid" title="">                </div>                <div class="image-caption">Sigmoid</div>            </figure><p>如何衡量预测结果的好坏，需要定义损失函数<strong>L</strong>：</p><p>$$ L(a^{(i)},y^{(i)})=- y^{(i)}\ln(a^{(i)})-(1-y^{(i)})\ln(1-a^{(i)})\tag{4}$$</p><p>那么价值函数<strong>J</strong>就是所有样本的损失值的平均：</p><p>$$ J=\frac{1}{m}\sum_{i=1}^mL(a^{(i)}, y^{(i)})\tag{5}$$</p><p>我们的目标是通过多次的迭代，求得使得<strong>J</strong>最小的自变量参数w和b，这里使用的优化算法为梯度下降法，其中α称为学习率，是0~1之间的浮点数：</p><p>$$\theta=\theta-\alpha d\theta\tag{6}$$</p><p>我们把求解价值函数的过程称为<strong>正向传播</strong>，把求解梯度的过程称为<strong>反向传播</strong></p><p>价值函数对于第j个突触$w_j$的梯度：<br>$$<br>\frac{\partial J}{\partial w_j}=\frac{1}{m}\sum_{i=1}^m\frac{\partial}{\partial w_j}[-y^{(i)}\ln{(a^{(i)})}-(1-y^{(i)})\ln{(1-a^{(i)})}]\<br>=\frac{1}{m}\sum_{i=1}^{m}[\frac{-y^{(i)}}{a^{(i)}}\cdot\frac{\partial{a^{(i)}}}{\partial{w_j}}+\frac{(1-y^{i})}{1-a^{(i)}}\cdot\frac{\partial{a^{i}}}{\partial{w_j}}]\<br>=\frac{1}{m}\sum_{i=1}^{m}[\frac{\partial{a^{(i)}}}{\partial{w_j}}\cdot(\frac{1-y^{(i)}}{1-a^{(i)}}-\frac{y^{(i)}}{a^{(i)}})]\<br>=\frac{1}{m}\sum_{i=1}^{m}[\frac{d{a^{(i)}}}{d{z^{(i)}}}\cdot\frac{\partial{z^{(i)}}}{\partial{w_j}}\cdot(\frac{1-y^{(i)}}{1-a^{(i)}}-\frac{y^{(i)}}{a^{(i)}})]\<br>=\frac{1}{m}\sum_{i=1}^{m}[a^{(i)}\cdot(1-a^{(i)})\cdot x_j^{(i)}\cdot\frac{a^{(i)}-y^{(i)}}{a^{(i)}\cdot(1-a^{(i)})}]\<br>=\frac{1}{m}\sum_{i=1}^{m}[x_j^{(i)}\cdot(a^{(i)}-y^{(i)})]<br>$$<br>价值函数<strong>J</strong>对于所有突触的权重向量<strong>w</strong>的梯度：</p><p>$$ \frac{\partial J}{\partial w}=\frac{1}{m}X(A-Y)^T\tag{7}$$</p><p>价值函数<strong>J</strong>对偏置<strong>b</strong>的梯度：</p><p>$$ \frac{\partial J}{\partial b}=\frac{1}{m}\sum_{i=1}^m (a^{(i)}-y^{(i)})\tag{8}$$</p><p>所以，每一次迭代的过程中，对w和b的<strong>更新规则</strong>为：</p><p>$$w:=w-\alpha\frac{\partial{J}}{\partial{w}}\tag{9}$$</p><p>$$b:=b-\alpha\frac{\partial{J}}{\partial{b}}\tag{10}$$</p><h2 id="Python程序编写"><a href="#Python程序编写" class="headerlink" title="Python程序编写"></a>Python程序编写</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Compute the sigmoid of z</span></span><br><span class="line"><span class="string">    :param z: A scalar or numpy array of any size.</span></span><br><span class="line"><span class="string">    :return: sigmoid(z)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    s = <span class="number">1.0</span> / (<span class="number">1</span> + np.exp(<span class="number">-1</span> * z))</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogisticRegression</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_iterations=<span class="number">2000</span>, learning_rate=<span class="number">0.001</span>, print_cost=False)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Builds the logistic regression model</span></span><br><span class="line"><span class="string">        :param num_iterations: hyperparameter representing the number of iterations to optimize the parameters</span></span><br><span class="line"><span class="string">        :param learning_rate: hyperparameter representing the learning rate when update the parameters</span></span><br><span class="line"><span class="string">        :param print_cost: Set to true to print the cost every 100 iterations</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.n_iter = num_iterations</span><br><span class="line">        self.learn_rate = learning_rate</span><br><span class="line">        self.print_cost = print_cost</span><br><span class="line">        self.w = <span class="keyword">None</span>  <span class="comment"># weights, a numpy array of size</span></span><br><span class="line">        self.b = <span class="keyword">None</span>  <span class="comment"># bias, a scalar</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__initialize_with_zeros</span><span class="params">(self, dim)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.</span></span><br><span class="line"><span class="string">        :param dim: size of the w vector we want</span></span><br><span class="line"><span class="string">        :return: w -- initialized vector of shape (dim, 1); b -- initialized scalar (corresponds to the bias)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        w = np.zeros((dim, <span class="number">1</span>))</span><br><span class="line">        b = <span class="number">0</span></span><br><span class="line">        <span class="keyword">assert</span> (w.shape == (dim, <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">assert</span> (isinstance(b, float) <span class="keyword">or</span> isinstance(b, int))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> w, b</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__propagate</span><span class="params">(self, X, Y)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Implement the cost function and its gradient for the propagation</span></span><br><span class="line"><span class="string">        :param X: input data</span></span><br><span class="line"><span class="string">        :param Y: label vector</span></span><br><span class="line"><span class="string">        :return: grads --- results of backward propagation; cost --- results of forward propagation</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        m = X.shape[<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># FORWARD PROPAGATION (FROM X TO COST)</span></span><br><span class="line">        Z = np.dot(self.w.T, X) + self.b</span><br><span class="line">        A = sigmoid(Z)  <span class="comment"># compute activation</span></span><br><span class="line">        cost = <span class="number">-1</span> / m * (np.dot(Y, np.log(A).T) + np.dot(<span class="number">1</span> - Y, np.log((<span class="number">1</span> - A)).T))  <span class="comment"># compute cost</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># BACKWARD PROPAGATION (TO FIND GRAD)</span></span><br><span class="line">        dw = <span class="number">1</span> / m * (np.dot(X, (A - Y).T))  <span class="comment"># gradient of the loss with respect to w, thus same shape as w</span></span><br><span class="line">        db = np.sum(A - Y) / m  <span class="comment"># gradient of the loss with respect to b, thus same shape as b</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> (dw.shape == self.w.shape)</span><br><span class="line">        <span class="keyword">assert</span> (db.dtype == float)</span><br><span class="line">        cost = np.squeeze(cost)</span><br><span class="line">        <span class="keyword">assert</span> (cost.shape == ())</span><br><span class="line"></span><br><span class="line">        grads = &#123;<span class="string">"dw"</span>: dw,</span><br><span class="line">                 <span class="string">"db"</span>: db&#125;</span><br><span class="line">        <span class="keyword">return</span> grads, cost</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X_train, Y_train)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        This function optimizes w and b by running a gradient descent algorithm</span></span><br><span class="line"><span class="string">        :param X_train: input data</span></span><br><span class="line"><span class="string">        :param Y_train: label vector</span></span><br><span class="line"><span class="string">        :return: costs -- list of all the costs computed during the optimization</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># initialize parameters with zeros</span></span><br><span class="line">        self.w, self.b = self.__initialize_with_zeros(X_train.shape[<span class="number">0</span>])</span><br><span class="line">        costs = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.n_iter):</span><br><span class="line">            grads, cost = self.__propagate(X_train, Y_train)  <span class="comment"># Cost and gradient calculation</span></span><br><span class="line">            dw = grads[<span class="string">"dw"</span>]</span><br><span class="line">            db = grads[<span class="string">"db"</span>]</span><br><span class="line">            <span class="comment"># update rule</span></span><br><span class="line">            self.w -= self.learn_rate * dw</span><br><span class="line">            self.b -= self.learn_rate * db</span><br><span class="line">            <span class="comment"># Record the costs</span></span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                costs.append(cost)</span><br><span class="line">            <span class="comment"># Print the cost every 100 training examples</span></span><br><span class="line">            <span class="keyword">if</span> self.print_cost <span class="keyword">and</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">"Cost after iteration %i: %f"</span> % (i, cost))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> costs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X_test)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Predict whether the label is 0 or 1 using learned logistic regression parameters (w, b)</span></span><br><span class="line"><span class="string">        :param X_test: input data</span></span><br><span class="line"><span class="string">        :return: Y_prediction -- a numpy array (vector) containing all predictions (0/1) for the examples in X_test</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        m = X_test.shape[<span class="number">1</span>]</span><br><span class="line">        Y_prediction = np.zeros((<span class="number">1</span>, m))</span><br><span class="line">        w = self.w.reshape(X_test.shape[<span class="number">0</span>], <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># Compute vector "A" predicting the probabilities</span></span><br><span class="line">        A = sigmoid(np.dot(w.T, X_test) + self.b)</span><br><span class="line">        <span class="comment"># Convert probabilities A[0,i] to actual predictions p[0,i]</span></span><br><span class="line">        Y_prediction = np.where(A &gt; <span class="number">0.5</span>, [<span class="number">1</span>], [<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">assert</span> (Y_prediction.shape == (<span class="number">1</span>, m))</span><br><span class="line">        <span class="keyword">return</span> Y_prediction</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    train_size = <span class="number">150</span></span><br><span class="line">    df = pd.read_csv(<span class="string">"iris.csv"</span>, header=<span class="keyword">None</span>)</span><br><span class="line">    Y_train = df.loc[<span class="number">0</span>:train_size - <span class="number">1</span>, <span class="number">4</span>].values</span><br><span class="line">    Y_train = np.where(Y_train == <span class="string">"Iris-setosa"</span>, [<span class="number">1</span>], [<span class="number">0</span>])</span><br><span class="line">    Y_train = Y_train.reshape((<span class="number">1</span>, train_size))</span><br><span class="line">    X_train = df.loc[<span class="number">0</span>:train_size - <span class="number">1</span>, [<span class="number">0</span>, <span class="number">2</span>]].values</span><br><span class="line">    feature1_min, feature1_max = X_train[:, <span class="number">0</span>].min() - <span class="number">1</span>, X_train[:, <span class="number">0</span>].max() + <span class="number">1</span></span><br><span class="line">    feature2_min, feature2_max = X_train[:, <span class="number">1</span>].min() - <span class="number">1</span>, X_train[:, <span class="number">1</span>].max() + <span class="number">1</span></span><br><span class="line">    X_train = X_train.T.reshape((<span class="number">2</span>, train_size))</span><br><span class="line">    clf = LogisticRegression(num_iterations=<span class="number">2000</span>, learning_rate=<span class="number">0.001</span>, print_cost=<span class="keyword">True</span>)</span><br><span class="line">    clf.fit(X_train, Y_train)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将向量扩充为二维矩阵，作为测试样本</span></span><br><span class="line">    xx1, xx2 = np.meshgrid(np.arange(feature1_min, feature1_max, <span class="number">0.02</span>), np.arange(feature2_min, feature2_max, <span class="number">0.02</span>))</span><br><span class="line">    X_test = np.array([xx1.ravel(), xx2.ravel()])</span><br><span class="line">    <span class="comment"># 预测结果</span></span><br><span class="line">    Y_prediction = clf.predict(X_test)</span><br><span class="line">    Y_prediction = Y_prediction.reshape(xx1.shape)</span><br><span class="line">    <span class="comment"># 数据可视化</span></span><br><span class="line">    markers = (<span class="string">'s'</span>, <span class="string">'x'</span>)</span><br><span class="line">    colors = (<span class="string">"red"</span>, <span class="string">"blue"</span>)</span><br><span class="line">    plt.contourf(xx1, xx2, Y_prediction, c=<span class="string">"gray"</span>)</span><br><span class="line">    plt.xlim(feature1_min, feature1_max)</span><br><span class="line">    plt.ylim(feature2_min, feature2_max)</span><br><span class="line">    <span class="keyword">for</span> idx, y_train <span class="keyword">in</span> enumerate(np.unique(Y_train)):</span><br><span class="line">        plt.scatter(x=X_train[<span class="number">0</span>, np.squeeze(Y_train == y_train)], y=X_train[<span class="number">1</span>, np.squeeze(Y_train == y_train)],</span><br><span class="line">                    alpha=<span class="number">0.8</span>, c=colors[idx],</span><br><span class="line">                    marker=markers[idx], label=y_train)</span><br><span class="line">    plt.xlabel(<span class="string">u"花瓣长度"</span>, fontproperties=<span class="string">'SimHei'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">u"花茎长度"</span>, fontproperties=<span class="string">'SimHei'</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">"upper left"</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Logistic-Regression&quot;&gt;&lt;a href=&quot;#Logistic-Regression&quot; class=&quot;headerlink&quot; title=&quot;Logistic Regression&quot;&gt;&lt;/a&gt;Logistic Regression&lt;/h1&gt;&lt;bloc
      
    
    </summary>
    
      <category term="AI" scheme="https://suda-morris.github.io/categories/AI/"/>
    
    
      <category term="Logistic" scheme="https://suda-morris.github.io/tags/Logistic/"/>
    
  </entry>
  
  <entry>
    <title>NFC-PN532</title>
    <link href="https://suda-morris.github.io/2018/08/14/nfc-pn532/"/>
    <id>https://suda-morris.github.io/2018/08/14/nfc-pn532/</id>
    <published>2018-08-14T09:45:14.000Z</published>
    <updated>2018-08-14T10:49:34.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NFC——PN532介绍"><a href="#NFC——PN532介绍" class="headerlink" title="NFC——PN532介绍"></a>NFC——PN532介绍</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>PN532是一个高度集成的非接触式读写芯片，它包含80C51微控制器内核，集成了13.56MHz下的各种主动/被动式非接触通信方法和协议。</p><p>PN532传输模块支持6种不同的工作模式：</p><ol><li>读写器模式，支持ISO/IEC 14443A/MIFARE机制</li><li>读写器模式，支持FeliCa机制</li><li>读写器模式，支持ISO/IEC 14443B机制</li><li>卡操作模式，支持ISO 14443A/MIFARE机制</li><li>卡操作模式，支持FeliCa机制</li><li>ISO/IEC18092，ECM340点对点</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NFC——PN532介绍&quot;&gt;&lt;a href=&quot;#NFC——PN532介绍&quot; class=&quot;headerlink&quot; title=&quot;NFC——PN532介绍&quot;&gt;&lt;/a&gt;NFC——PN532介绍&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="NFC" scheme="https://suda-morris.github.io/tags/NFC/"/>
    
  </entry>
  
  <entry>
    <title>chisel-notes</title>
    <link href="https://suda-morris.github.io/2018/08/03/chisel/"/>
    <id>https://suda-morris.github.io/2018/08/03/chisel/</id>
    <published>2018-08-03T06:36:15.000Z</published>
    <updated>2018-09-13T01:47:59.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Chisel是UC Berkeley开发的一种开源硬件建模语言，支持高度参数化的生成器和分层的特定领域的硬件语言进行高级硬件设计。</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>安装Java环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install default-jdk</span><br></pre></td></tr></table></figure></li><li><p>安装sbt（Chisel使用的编译系统）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"deb https://dl.bintray.com/sbt/debian /"</span> | sudo tee -a /etc/apt/sources.list.d/sbt.list</span><br><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 642AC823</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install sbt</span><br></pre></td></tr></table></figure></li><li><p>安装Verilator（将Verilog文件编译成C++来做仿真）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git make autoconf g++ flex bison</span><br><span class="line">git <span class="built_in">clone</span> http://git.veripool.org/git/verilator</span><br><span class="line"><span class="built_in">cd</span> verilator</span><br><span class="line">git pull</span><br><span class="line">git checkout verilator_3_922</span><br><span class="line"><span class="built_in">unset</span> VERILATOR_ROOT <span class="comment"># For bash, unsetenv for csh</span></span><br><span class="line">autoconf <span class="comment"># Create ./configure script</span></span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li></ol><h2 id="上手实验"><a href="#上手实验" class="headerlink" title="上手实验"></a>上手实验</h2><ol><li><p>下载教程需要的代码仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ucb-bar/chisel-tutorial.git</span><br><span class="line"><span class="built_in">cd</span> chisel-tutorial</span><br><span class="line">git fetch origin</span><br><span class="line">git checkout release</span><br></pre></td></tr></table></figure></li><li><p>运行Chisel（期间会下载Chisel3软件，测试工具，Scala）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbt run</span><br></pre></td></tr></table></figure></li></ol><h2 id="Chisel入门"><a href="#Chisel入门" class="headerlink" title="Chisel入门"></a>Chisel入门</h2><h3 id="导入必要的软件包"><a href="#导入必要的软件包" class="headerlink" title="导入必要的软件包"></a>导入必要的软件包</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chisel3._</span><br><span class="line"><span class="keyword">import</span> chisel3.util._</span><br><span class="line"><span class="keyword">import</span> chisel3.iotesters.&#123;<span class="type">ChiselFlatSpec</span>, <span class="type">Driver</span>, <span class="type">PeekPokeTester</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="第一个模块"><a href="#第一个模块" class="headerlink" title="第一个模块"></a>第一个模块</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PassthroughGenerator</span>(<span class="params">width: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Module</span> </span>&#123; </span><br><span class="line">  <span class="keyword">val</span> io = <span class="type">IO</span>(<span class="keyword">new</span> <span class="type">Bundle</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> in = <span class="type">Input</span>(<span class="type">UInt</span>(width.<span class="type">W</span>))</span><br><span class="line">    <span class="keyword">val</span> out = <span class="type">Output</span>(<span class="type">UInt</span>(width.<span class="type">W</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">  io.out := io.in</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>所有的硬件模块都要继承Module类</li><li>所有的输入输出端口都需要在名字为<strong>io</strong>的常量中声明，该变量必须是<strong>IO</strong>类的实例，在实例化的时候需要传入Bundle类型的实例对象</li><li>在Bundle实例中指定输入和输入的信号</li><li><code>:=</code>运算符是Chisel自定义的，用来表示左边的信号由右边的信号来驱动</li></ul><h3 id="编译成Verilog-FIRRTL"><a href="#编译成Verilog-FIRRTL" class="headerlink" title="编译成Verilog/FIRRTL"></a>编译成Verilog/FIRRTL</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">println(getVerilog(<span class="keyword">new</span> <span class="type">PassthroughGenerator</span>(<span class="number">10</span>)))</span><br><span class="line">println(getFirrtl(<span class="keyword">new</span> <span class="type">PassthroughGenerator</span>(<span class="number">20</span>)))</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> testResult = <span class="type">Driver</span>(() =&gt; <span class="keyword">new</span> <span class="type">Passthrough</span>()) &#123;</span><br><span class="line">  c =&gt; <span class="keyword">new</span> <span class="type">PeekPokeTester</span>(c) &#123;</span><br><span class="line">    poke(c.io.in, <span class="number">0</span>)     <span class="comment">// Set our input to value 0</span></span><br><span class="line">    expect(c.io.out, <span class="number">0</span>)  <span class="comment">// Assert that the output correctly has 0</span></span><br><span class="line">    poke(c.io.in, <span class="number">1</span>)     <span class="comment">// Set our input to value 1</span></span><br><span class="line">    expect(c.io.out, <span class="number">1</span>)  <span class="comment">// Assert that the output correctly has 1</span></span><br><span class="line">    poke(c.io.in, <span class="number">2</span>)     <span class="comment">// Set our input to value 2</span></span><br><span class="line">    expect(c.io.out, <span class="number">2</span>)  <span class="comment">// Assert that the output correctly has 2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">assert(testResult)   <span class="comment">// Scala Code: if testResult == false, will throw an error</span></span><br><span class="line">println(<span class="string">"SUCCESS!!"</span>) <span class="comment">// Scala Code: if we get here, our tests passed!</span></span><br></pre></td></tr></table></figure><ul><li>调用<code>poke</code>可以设置某个输入信号的值</li><li>调用<code>except</code>可以检查某个输出信号是否和预期的相同</li><li>调用<code>peek</code>可以获取某个输出信号的值</li></ul><h3 id="关于printf"><a href="#关于printf" class="headerlink" title="关于printf"></a>关于printf</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintingModule</span> <span class="keyword">extends</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> io = <span class="type">IO</span>(<span class="keyword">new</span> <span class="type">Bundle</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> in = <span class="type">Input</span>(<span class="type">UInt</span>(<span class="number">4.</span><span class="type">W</span>))</span><br><span class="line">        <span class="keyword">val</span> out = <span class="type">Output</span>(<span class="type">UInt</span>(<span class="number">4.</span><span class="type">W</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    io.out := io.in</span><br><span class="line"></span><br><span class="line">    printf(<span class="string">"Print during simulation: Input is %d\n"</span>, io.in)</span><br><span class="line">    <span class="comment">// chisel printf has its own string interpolator too</span></span><br><span class="line">    printf(<span class="string">p"Print during simulation: IO is <span class="subst">$io</span>\n"</span>)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">s"Print during generation: Input is <span class="subst">$&#123;io.in&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintingModuleTester</span>(<span class="params">c: <span class="type">PrintingModule</span></span>) <span class="keyword">extends</span> <span class="title">PeekPokeTester</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">    poke(c.io.in, <span class="number">3</span>)</span><br><span class="line">    step(<span class="number">5</span>) <span class="comment">// circuit will print</span></span><br><span class="line">    </span><br><span class="line">    println(<span class="string">s"Print during testing: Input is <span class="subst">$&#123;peek(c.io.in)&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line">chisel3.iotesters.<span class="type">Driver</span>( () =&gt; <span class="keyword">new</span> <span class="type">PrintingModule</span> ) &#123; c =&gt; <span class="keyword">new</span> <span class="type">PrintingModuleTester</span>(c) &#125;</span><br></pre></td></tr></table></figure><ul><li>以下三种情况中使用打印功能会有所差别<ol><li>在编译生成硬件电路的时候</li><li>在运行电路仿真的时候</li><li>在运行测试模块的时候</li></ol></li><li><code>println</code><strong>不能</strong>在电路仿真的时候用来打印，因为此时的电路已经是Verilog或者Firrtl语言描述的</li></ul><h4 id="上述代码的运行结果为"><a href="#上述代码的运行结果为" class="headerlink" title="上述代码的运行结果为"></a>上述代码的运行结果为</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[info] [0.002] Elaborating design...</span><br><span class="line">Print during generation: Input is chisel3.core.UInt@7</span><br><span class="line">[info] [0.115] Done elaborating.</span><br><span class="line">Total FIRRTL Compile Time: 176.6 ms</span><br><span class="line">Total FIRRTL Compile Time: 14.3 ms</span><br><span class="line">End of dependency graph</span><br><span class="line">Circuit state created</span><br><span class="line">[info] [0.001] SEED 1536679256727</span><br><span class="line">Print during simulation: Input is 3</span><br><span class="line">Print during simulation: IO is Bundle(<span class="keyword">in</span> -&gt; 3, out -&gt; 3)</span><br><span class="line">Print during simulation: Input is 3</span><br><span class="line">Print during simulation: IO is Bundle(<span class="keyword">in</span> -&gt; 3, out -&gt; 3)</span><br><span class="line">Print during simulation: Input is 3</span><br><span class="line">Print during simulation: IO is Bundle(<span class="keyword">in</span> -&gt; 3, out -&gt; 3)</span><br><span class="line">Print during simulation: Input is 3</span><br><span class="line">Print during simulation: IO is Bundle(<span class="keyword">in</span> -&gt; 3, out -&gt; 3)</span><br><span class="line">Print during simulation: Input is 3</span><br><span class="line">Print during simulation: IO is Bundle(<span class="keyword">in</span> -&gt; 3, out -&gt; 3)</span><br><span class="line">[info] [0.007] Print during testing: Input is 3</span><br><span class="line"><span class="built_in">test</span> cmd2WrapperHelperPrintingModule Success: 0 tests passed <span class="keyword">in</span> 10 cycles taking 0.033230 seconds</span><br><span class="line">[info] [0.008] RAN 5 CYCLES PASSED</span><br></pre></td></tr></table></figure><h2 id="数字组合逻辑电路"><a href="#数字组合逻辑电路" class="headerlink" title="数字组合逻辑电路"></a>数字组合逻辑电路</h2><h3 id="多路选择与级联"><a href="#多路选择与级联" class="headerlink" title="多路选择与级联"></a>多路选择与级联</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOperatorsTwo</span> <span class="keyword">extends</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> io = <span class="type">IO</span>(<span class="keyword">new</span> <span class="type">Bundle</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> in      = <span class="type">Input</span>(<span class="type">UInt</span>(<span class="number">4.</span><span class="type">W</span>))</span><br><span class="line">    <span class="keyword">val</span> out_mux = <span class="type">Output</span>(<span class="type">UInt</span>(<span class="number">4.</span><span class="type">W</span>))</span><br><span class="line">    <span class="keyword">val</span> out_cat = <span class="type">Output</span>(<span class="type">UInt</span>(<span class="number">4.</span><span class="type">W</span>))</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> s = <span class="literal">true</span>.<span class="type">B</span></span><br><span class="line">  io.out_mux := <span class="type">Mux</span>(s, <span class="number">3.</span><span class="type">U</span>, <span class="number">0.</span><span class="type">U</span>) <span class="comment">// should return 3.U, since s is true</span></span><br><span class="line">  io.out_cat := <span class="type">Cat</span>(<span class="number">2.</span><span class="type">U</span>, <span class="number">1.</span><span class="type">U</span>)    <span class="comment">// concatenates 2 (b10) with 1 (b1) to give 5 (101)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println(getVerilog(<span class="keyword">new</span> <span class="type">MyOperatorsTwo</span>))</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOperatorsTwoTester</span>(<span class="params">c: <span class="type">MyOperatorsTwo</span></span>) <span class="keyword">extends</span> <span class="title">PeekPokeTester</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">  expect(c.io.out_mux, <span class="number">3</span>)</span><br><span class="line">  expect(c.io.out_cat, <span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line">assert(<span class="type">Driver</span>(() =&gt; <span class="keyword">new</span> <span class="type">MyOperatorsTwo</span>) &#123;c =&gt; <span class="keyword">new</span> <span class="type">MyOperatorsTwoTester</span>(c)&#125;)</span><br><span class="line">println(<span class="string">"SUCCESS!!"</span>)</span><br></pre></td></tr></table></figure><ul><li>Chisel内置了<code>Mux</code>和<code>Cat</code>运算符，<code>Mux</code>使用起来就像是C语言中的三元运算符，<code>Cat</code>的级联方式是：先MSB后LSB，并且一次运算只能操作两个参数</li></ul><h3 id="MAC（乘加）运算"><a href="#MAC（乘加）运算" class="headerlink" title="MAC（乘加）运算"></a>MAC（乘加）运算</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MAC</span> <span class="keyword">extends</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> io = <span class="type">IO</span>(<span class="keyword">new</span> <span class="type">Bundle</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> in_a = <span class="type">Input</span>(<span class="type">UInt</span>(<span class="number">4.</span><span class="type">W</span>))</span><br><span class="line">    <span class="keyword">val</span> in_b = <span class="type">Input</span>(<span class="type">UInt</span>(<span class="number">4.</span><span class="type">W</span>))</span><br><span class="line">    <span class="keyword">val</span> in_c = <span class="type">Input</span>(<span class="type">UInt</span>(<span class="number">4.</span><span class="type">W</span>))</span><br><span class="line">    <span class="keyword">val</span> out  = <span class="type">Output</span>(<span class="type">UInt</span>(<span class="number">8.</span><span class="type">W</span>))</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  io.out := io.in_a * io.in_b + io.in_c</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MACTester</span>(<span class="params">c: <span class="type">MAC</span></span>) <span class="keyword">extends</span> <span class="title">PeekPokeTester</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> cycles = <span class="number">100</span></span><br><span class="line">  <span class="keyword">import</span> scala.util.<span class="type">Random</span></span><br><span class="line">  <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until cycles) &#123;</span><br><span class="line">    <span class="keyword">val</span> in_a = <span class="type">Random</span>.nextInt(<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">val</span> in_b = <span class="type">Random</span>.nextInt(<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">val</span> in_c = <span class="type">Random</span>.nextInt(<span class="number">16</span>)</span><br><span class="line">    poke(c.io.in_a, in_a)</span><br><span class="line">    poke(c.io.in_b, in_b)</span><br><span class="line">    poke(c.io.in_c, in_c)</span><br><span class="line">    expect(c.io.out, in_a*in_b+in_c)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">assert(<span class="type">Driver</span>(() =&gt; <span class="keyword">new</span> <span class="type">MAC</span>) &#123;c =&gt; <span class="keyword">new</span> <span class="type">MACTester</span>(c)&#125;)</span><br><span class="line">println(<span class="string">"SUCCESS!!"</span>)</span><br></pre></td></tr></table></figure><h2 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h2><h3 id="when-elsewhen-otherwise"><a href="#when-elsewhen-otherwise" class="headerlink" title="when , elsewhen, otherwise"></a><code>when</code> , <code>elsewhen</code>, <code>otherwise</code></h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Max3 returns the max of its 3 arguments</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Max3</span> <span class="keyword">extends</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> io = <span class="type">IO</span>(<span class="keyword">new</span> <span class="type">Bundle</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> in1 = <span class="type">Input</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line">    <span class="keyword">val</span> in2 = <span class="type">Input</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line">    <span class="keyword">val</span> in3 = <span class="type">Input</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line">    <span class="keyword">val</span> out = <span class="type">Output</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">    </span><br><span class="line">  when(io.in1 &gt; io.in2 &amp;&amp; io.in1 &gt; io.in3) &#123;</span><br><span class="line">    io.out := io.in1  </span><br><span class="line">  &#125;.elsewhen(io.in2 &gt; io.in1 &amp;&amp; io.in2 &gt; io.in3) &#123;</span><br><span class="line">    io.out := io.in2 </span><br><span class="line">  &#125;.otherwise &#123;</span><br><span class="line">    io.out := io.in3</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// verify that the max of the three inputs is correct</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Max3Tester</span>(<span class="params">c: <span class="type">Max3</span></span>) <span class="keyword">extends</span> <span class="title">PeekPokeTester</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">  poke(c.io.in1, <span class="number">6</span>)</span><br><span class="line">  poke(c.io.in2, <span class="number">4</span>)  </span><br><span class="line">  poke(c.io.in3, <span class="number">2</span>)  </span><br><span class="line">  expect(c.io.out, <span class="number">6</span>)  <span class="comment">// input 1 should be biggest</span></span><br><span class="line">  poke(c.io.in2, <span class="number">7</span>)  </span><br><span class="line">  expect(c.io.out, <span class="number">7</span>)  <span class="comment">// now input 2 is</span></span><br><span class="line">  poke(c.io.in3, <span class="number">11</span>)  </span><br><span class="line">  expect(c.io.out, <span class="number">11</span>) <span class="comment">// and now input 3</span></span><br><span class="line">  poke(c.io.in3, <span class="number">3</span>)  </span><br><span class="line">  expect(c.io.out, <span class="number">7</span>)  <span class="comment">// show that decreasing an input works as well</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Max3</span></span><br><span class="line"><span class="keyword">val</span> works = <span class="type">Driver</span>(() =&gt; <span class="keyword">new</span> <span class="type">Max3</span>) &#123;</span><br><span class="line">  c =&gt; <span class="keyword">new</span> <span class="type">Max3Tester</span>(c)</span><br><span class="line">&#125;</span><br><span class="line">assert(works)        <span class="comment">// Scala Code: if works == false, will throw an error</span></span><br><span class="line">println(<span class="string">"SUCCESS!!"</span>) <span class="comment">// Scala Code: if we get here, our tests passed!</span></span><br></pre></td></tr></table></figure><ul><li>不同于Scala中的if语句，Chisel中的when语句不会有返回值</li></ul><h3 id="wire构造器"><a href="#wire构造器" class="headerlink" title="wire构造器"></a><code>wire</code>构造器</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Sort4 sorts its 4 inputs to its 4 outputs */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sort4</span> <span class="keyword">extends</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> io = <span class="type">IO</span>(<span class="keyword">new</span> <span class="type">Bundle</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> in0 = <span class="type">Input</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line">    <span class="keyword">val</span> in1 = <span class="type">Input</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line">    <span class="keyword">val</span> in2 = <span class="type">Input</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line">    <span class="keyword">val</span> in3 = <span class="type">Input</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line">    <span class="keyword">val</span> out0 = <span class="type">Output</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line">    <span class="keyword">val</span> out1 = <span class="type">Output</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line">    <span class="keyword">val</span> out2 = <span class="type">Output</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line">    <span class="keyword">val</span> out3 = <span class="type">Output</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> row10 = <span class="type">Wire</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line">  <span class="keyword">val</span> row11 = <span class="type">Wire</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line">  <span class="keyword">val</span> row12 = <span class="type">Wire</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line">  <span class="keyword">val</span> row13 = <span class="type">Wire</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line"></span><br><span class="line">  when(io.in0 &lt; io.in1) &#123;</span><br><span class="line">    row10 := io.in0            <span class="comment">// preserve first two elements</span></span><br><span class="line">    row11 := io.in1</span><br><span class="line">  &#125;.otherwise &#123;</span><br><span class="line">    row10 := io.in1            <span class="comment">// swap first two elements</span></span><br><span class="line">    row11 := io.in0</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  when(io.in2 &lt; io.in3) &#123;</span><br><span class="line">    row12 := io.in2            <span class="comment">// preserve last two elements</span></span><br><span class="line">    row13 := io.in3</span><br><span class="line">  &#125;.otherwise &#123;</span><br><span class="line">    row12 := io.in3            <span class="comment">// swap last two elements</span></span><br><span class="line">    row13 := io.in2</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> row21 = <span class="type">Wire</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line">  <span class="keyword">val</span> row22 = <span class="type">Wire</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line"></span><br><span class="line">  when(row11 &lt; row12) &#123;</span><br><span class="line">    row21 := row11            <span class="comment">// preserve middle 2 elements</span></span><br><span class="line">    row22 := row12</span><br><span class="line">  &#125;.otherwise &#123;</span><br><span class="line">    row21 := row12            <span class="comment">// swap middle two elements</span></span><br><span class="line">    row22 := row11</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> row20 = <span class="type">Wire</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line">  <span class="keyword">val</span> row23 = <span class="type">Wire</span>(<span class="type">UInt</span>(<span class="number">16.</span><span class="type">W</span>))</span><br><span class="line">  when(row10 &lt; row13) &#123;</span><br><span class="line">    row20 := row10            <span class="comment">// preserve middle 2 elements</span></span><br><span class="line">    row23 := row13</span><br><span class="line">  &#125;.otherwise &#123;</span><br><span class="line">    row20 := row13            <span class="comment">// swap middle two elements</span></span><br><span class="line">    row23 := row10</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  when(row20 &lt; row21) &#123;</span><br><span class="line">    io.out0 := row20            <span class="comment">// preserve first two elements</span></span><br><span class="line">    io.out1 := row21</span><br><span class="line">  &#125;.otherwise &#123;</span><br><span class="line">    io.out0 := row21            <span class="comment">// swap first two elements</span></span><br><span class="line">    io.out1 := row20</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  when(row22 &lt; row23) &#123;</span><br><span class="line">    io.out2 := row22            <span class="comment">// preserve first two elements</span></span><br><span class="line">    io.out3 := row23</span><br><span class="line">  &#125;.otherwise &#123;</span><br><span class="line">    io.out2 := row23            <span class="comment">// swap first two elements</span></span><br><span class="line">    io.out3 := row22</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// verify the all possible ordering of 4 numbers are sorted</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BetterSort4Tester</span>(<span class="params">c: <span class="type">Sort4</span></span>) <span class="keyword">extends</span> <span class="title">PeekPokeTester</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">  <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).permutations.foreach &#123; <span class="keyword">case</span> i0 :: i1 :: i2 :: i3 :: <span class="type">Nil</span> =&gt;</span><br><span class="line">    println(<span class="string">s"Sorting <span class="subst">$i0</span> <span class="subst">$i1</span> <span class="subst">$i2</span> <span class="subst">$i3</span>"</span>)</span><br><span class="line">    poke(c.io.in0, i0)</span><br><span class="line">    poke(c.io.in1, i1)</span><br><span class="line">    poke(c.io.in2, i2)</span><br><span class="line">    poke(c.io.in3, i3)</span><br><span class="line">    expect(c.io.out0, <span class="number">1</span>)</span><br><span class="line">    expect(c.io.out1, <span class="number">2</span>)</span><br><span class="line">    expect(c.io.out2, <span class="number">3</span>)</span><br><span class="line">    expect(c.io.out3, <span class="number">4</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Here's the tester</span></span><br><span class="line"><span class="keyword">val</span> works = iotesters.<span class="type">Driver</span>(() =&gt; <span class="keyword">new</span> <span class="type">Sort4</span>) &#123;</span><br><span class="line">c =&gt; <span class="keyword">new</span> <span class="type">BetterSort4Tester</span>(c)</span><br><span class="line">&#125;</span><br><span class="line">assert(works) <span class="comment">// Scala Code: if works == false, will throw an error</span></span><br><span class="line">println(<span class="string">"SUCCESS!!"</span>) <span class="comment">// Scala Code: if we get here, our tests passed!</span></span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="https://github.com/freechipsproject/chisel3/wiki" target="_blank" rel="noopener">Chisel3 Wiki</a></li><li><a href="https://github.com/ucb-bar/chisel-tutorial" target="_blank" rel="noopener">Chisel3 教程</a></li><li><a href="https://github.com/ucb-bar/chisel-template" target="_blank" rel="noopener">Chisel3 工程模板</a></li><li><a href="https://chisel.eecs.berkeley.edu/api/latest/index.html" target="_blank" rel="noopener">Chisel3 API查询</a></li><li><a href="https://chisel.eecs.berkeley.edu/doc/chisel-cheatsheet3.pdf" target="_blank" rel="noopener">Chisel3 小抄</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Chisel是UC Berkeley开发的一种开源硬件建模语言，支持高度参数化的生成器和分层的特定领域的硬件语言进
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="Chisel" scheme="https://suda-morris.github.io/tags/Chisel/"/>
    
  </entry>
  
  <entry>
    <title>LwIP Introduction---Based on ESP32</title>
    <link href="https://suda-morris.github.io/2018/07/30/lwip/"/>
    <id>https://suda-morris.github.io/2018/07/30/lwip/</id>
    <published>2018-07-30T05:20:23.000Z</published>
    <updated>2018-08-10T10:54:45.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-IP协议栈"><a href="#TCP-IP协议栈" class="headerlink" title="TCP/IP协议栈"></a>TCP/IP协议栈</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/02/P0JwdJ.png" alt="TCP/IP协议栈" title="">                </div>                <div class="image-caption">TCP/IP协议栈</div>            </figure><h2 id="LwIP架构"><a href="#LwIP架构" class="headerlink" title="LwIP架构"></a>LwIP架构</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/09/PyrZkR.png" alt="LwIP架构" title="">                </div>                <div class="image-caption">LwIP架构</div>            </figure><h2 id="进程模型"><a href="#进程模型" class="headerlink" title="进程模型"></a>进程模型</h2><blockquote><p>进程模型是指TCP/IP协议栈的各协议入IP协议、TCP协议、ICMP协议等是如何实现的。</p></blockquote><ul><li>TCP/IP协议栈的每个协议都通过一个不同的进程实现。在该模型下，每个进程都严格地与一个协议相对应。这种进程模型的优点是网络协议的每一层都很清晰，每一层都可以随时参与系统运行。该模型的缺点是进程间的上下文切换比较频繁，系统将为频繁的上下文切换付出较大的代价。</li><li>TCP/IP协议栈驻留在操作系统的内核中，应用程序通过系统调用与TCP/IP协议栈通信。该模型下，各协议栈并非严格地与一个进程相对应。</li><li>TCP/IP协议栈驻留在同一个进程中，独立于操作系统内核空间。LwIP采用正是这种方式，LwIP作为一个独立的进程，运行在用户空间内，其优点是可以方便地移植到不同的操作系统中运行。</li></ul><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><blockquote><p>LwIP的动态内存管理机制大致上可以分成三种：标准C运行库自带的内存分配策略、LwIP的动态内存堆分配策略、LwIP的动态内存池分配策略。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/01/PwhSgK.png" alt="LwIP内存管理" title="">                </div>                <div class="image-caption">LwIP内存管理</div>            </figure><ul><li>将MEM_LIBC_MALLOC设置为1，表明使用标准C库自带的内存分配策略</li><li>将MEMP_MEM_MALLOC设置为1，表明使用LwIP自己的动态内存堆分配策略</li><li>LwIP还支持内存池，不过在ESP-IDF中并没有被使能。相较于内存堆的动态分配，内存池效率更高，碎片少，但是会消耗更多的内存</li></ul><h2 id="缓冲管理"><a href="#缓冲管理" class="headerlink" title="缓冲管理"></a>缓冲管理</h2><blockquote><p>LwIP的缓冲管理机制的功能是尽量避免内存拷贝，尽量较少对内存和空间的需求，提高程序的执行效率。LwIP使用数据结构pbuf来描述内存的缓冲数据包。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/01/Pw4Mz6.png" alt="pbuf结构体" title="">                </div>                <div class="image-caption">pbuf结构体</div>            </figure><ul><li>由于实际发送或接收的数据包长度不一，而每个pbuf只能管理一部分数据，因此对于大容量的数据包，就必须使用多个pbuf才能完整地描述它</li><li>type表明了该pbuf的类型，目前LwIP定义了四种类型的pbuf，分别是：<code>PBUF_RAM</code>，<code>PBUF_ROM</code>，<code>PBUF_REF</code>，<code>PBUF_POOL</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/01/Pw4RWq.png" alt="pbuf类型定义" title="">                </div>                <div class="image-caption">pbuf类型定义</div>            </figure><ul><li>PBUF_RAM类型的pbuf是通过内存堆分配得到的，LwIP协议栈和应用程序要传递的数据一般都使用该类型的pbuf。</li><li>PBUF_POOL类型的pbuf是通过内存池分配得到的，由于分配此类型的pbuf可以快速完成，适合中断处理，因此它更多地应用在网络设备驱动层。</li><li>PBUF_REF和PBUF_ROM类型的pbuf基本相同，他们都是从内存池中申请分配pbuf结构首部空间，而不申请数据区的空间。两者的区别在于，前者指向RAM空间内的某段数据，后者指向ROM空间内的某段数据。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/10/P63kMq.png" alt="pbuf结构" title="">                </div>                <div class="image-caption">pbuf结构</div>            </figure><h3 id="pbuf管理API"><a href="#pbuf管理API" class="headerlink" title="pbuf管理API"></a>pbuf管理API</h3><blockquote><p>当使用Netconn API时，则使用netbuf（网络缓冲）发送/接收数据，netbuf只是pbuf结构的封装，它可容纳分配的或引用的数据。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/10/P61IaD.png" alt="pbuf管理API" title="">                </div>                <div class="image-caption">pbuf管理API</div>            </figure><h2 id="网络接口层"><a href="#网络接口层" class="headerlink" title="网络接口层"></a>网络接口层</h2><blockquote><p>在LwIP中，物理网络硬件的设备驱动通过网络接口结构体netif来描述一个硬件网络接口，并通过<code>netif_add</code>函数向全局变量netif链表结构增加一个硬件网络接口。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/09/Pys12V.png" alt="网络接口" title="">                </div>                <div class="image-caption">网络接口</div>            </figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Generic data structure used for all lwIP network interfaces.</span></span><br><span class="line"><span class="comment"> *  The following fields should be filled in by the initialization</span></span><br><span class="line"><span class="comment"> *  function for the device driver: hwaddr_len, hwaddr[], mtu, flags */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">netif</span> &#123;</span></span><br><span class="line">  <span class="comment">/** pointer to next in linked list */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">netif</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_IPV4</span></span><br><span class="line">  <span class="comment">/** IP address configuration in network byte order */</span></span><br><span class="line">  <span class="keyword">ip_addr_t</span> ip_addr;</span><br><span class="line">  <span class="keyword">ip_addr_t</span> netmask;</span><br><span class="line">  <span class="keyword">ip_addr_t</span> gw;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_IPV4 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_IPV6</span></span><br><span class="line">  <span class="comment">/** Array of IPv6 addresses for this netif. */</span></span><br><span class="line">  <span class="keyword">ip_addr_t</span> ip6_addr[LWIP_IPV6_NUM_ADDRESSES];</span><br><span class="line">  <span class="comment">/** The state of each IPv6 address (Tentative, Preferred, etc).</span></span><br><span class="line"><span class="comment">   * @see ip6_addr.h */</span></span><br><span class="line">  <span class="keyword">u8_t</span> ip6_addr_state[LWIP_IPV6_NUM_ADDRESSES];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ESP_LWIP</span></span><br><span class="line">  <span class="keyword">void</span> (*ipv6_addr_cb)(struct netif* netif, <span class="keyword">u8_t</span> ip_idex); <span class="comment">/* callback for ipv6 addr states changed */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_IPV6 */</span></span></span><br><span class="line">  <span class="comment">/** This function is called by the network device driver</span></span><br><span class="line"><span class="comment">   *  to pass a packet up the TCP/IP stack. */</span></span><br><span class="line">  netif_input_fn input;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_IPV4</span></span><br><span class="line">  <span class="comment">/** This function is called by the IP module when it wants</span></span><br><span class="line"><span class="comment">   *  to send a packet on the interface. This function typically</span></span><br><span class="line"><span class="comment">   *  first resolves the hardware address, then sends the packet. */</span></span><br><span class="line">  netif_output_fn output;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_IPV4 */</span></span></span><br><span class="line">  <span class="comment">/** This function is called by the ARP module when it wants</span></span><br><span class="line"><span class="comment">   *  to send a packet on the interface. This function outputs</span></span><br><span class="line"><span class="comment">   *  the pbuf as-is on the link medium. */</span></span><br><span class="line">  netif_linkoutput_fn linkoutput;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_IPV6</span></span><br><span class="line">  <span class="comment">/** This function is called by the IPv6 module when it wants</span></span><br><span class="line"><span class="comment">   *  to send a packet on the interface. This function typically</span></span><br><span class="line"><span class="comment">   *  first resolves the hardware address, then sends the packet. */</span></span><br><span class="line">  netif_output_ip6_fn output_ip6;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_IPV6 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_NETIF_STATUS_CALLBACK</span></span><br><span class="line">  <span class="comment">/** This function is called when the netif state is set to up or down</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  netif_status_callback_fn status_callback;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_NETIF_STATUS_CALLBACK */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_NETIF_LINK_CALLBACK</span></span><br><span class="line">  <span class="comment">/** This function is called when the netif link is set to up or down</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  netif_status_callback_fn link_callback;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_NETIF_LINK_CALLBACK */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_NETIF_REMOVE_CALLBACK</span></span><br><span class="line">  <span class="comment">/** This function is called when the netif has been removed */</span></span><br><span class="line">  netif_status_callback_fn remove_callback;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_NETIF_REMOVE_CALLBACK */</span></span></span><br><span class="line">  <span class="comment">/** This field can be set by the device driver and could point</span></span><br><span class="line"><span class="comment">   *  to state information for the device. */</span></span><br><span class="line">  <span class="keyword">void</span> *state;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_DHCP</span></span><br><span class="line">  <span class="comment">/** the DHCP client state information for this netif */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dhcp</span> *<span class="title">dhcp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ESP_LWIP</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">udp_pcb</span> *<span class="title">dhcps_pcb</span>;</span></span><br><span class="line">  dhcp_event_fn dhcp_event;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_DHCP */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_AUTOIP</span></span><br><span class="line">  <span class="comment">/** the AutoIP client state information for this netif */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">autoip</span> *<span class="title">autoip</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_IPV6_AUTOCONFIG</span></span><br><span class="line">  <span class="comment">/** is this netif enabled for IPv6 autoconfiguration */</span></span><br><span class="line">  <span class="keyword">u8_t</span> ip6_autoconfig_enabled;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_IPV6_AUTOCONFIG */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_IPV6_SEND_ROUTER_SOLICIT</span></span><br><span class="line">  <span class="comment">/** Number of Router Solicitation messages that remain to be sent. */</span></span><br><span class="line">  <span class="keyword">u8_t</span> rs_count;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_IPV6_SEND_ROUTER_SOLICIT */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_IPV6_DHCP6</span></span><br><span class="line">  <span class="comment">/** the DHCPv6 client state information for this netif */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dhcp6</span> *<span class="title">dhcp6</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_IPV6_DHCP6 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_NETIF_HOSTNAME</span></span><br><span class="line">  <span class="comment">/* the hostname for this netif, NULL is a valid value */</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>*  hostname;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_NETIF_HOSTNAME */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_CHECKSUM_CTRL_PER_NETIF</span></span><br><span class="line">  <span class="keyword">u16_t</span> chksum_flags;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_CHECKSUM_CTRL_PER_NETIF*/</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/** maximum transfer unit (in bytes) */</span></span><br><span class="line">  <span class="keyword">u16_t</span> mtu;</span><br><span class="line">  <span class="comment">/** number of bytes used in hwaddr */</span></span><br><span class="line">  <span class="keyword">u8_t</span> hwaddr_len;</span><br><span class="line">  <span class="comment">/** link level hardware address of this interface */</span></span><br><span class="line">  <span class="keyword">u8_t</span> hwaddr[NETIF_MAX_HWADDR_LEN];</span><br><span class="line">  <span class="comment">/** flags (see NETIF_FLAG_ above) */</span></span><br><span class="line">  <span class="keyword">u8_t</span> flags;</span><br><span class="line">  <span class="comment">/** descriptive abbreviation */</span></span><br><span class="line">  <span class="keyword">char</span> name[<span class="number">2</span>];</span><br><span class="line">  <span class="comment">/** number of this interface */</span></span><br><span class="line">  <span class="keyword">u8_t</span> num;</span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> MIB2_STATS</span></span><br><span class="line">  <span class="comment">/** link type (from "snmp_ifType" enum from snmp_mib2.h) */</span></span><br><span class="line">  <span class="keyword">u8_t</span> link_type;</span><br><span class="line">  <span class="comment">/** (estimate) link speed */</span></span><br><span class="line">  <span class="keyword">u32_t</span> link_speed;</span><br><span class="line">  <span class="comment">/** timestamp at last change made (up/down) */</span></span><br><span class="line">  <span class="keyword">u32_t</span> ts;</span><br><span class="line">  <span class="comment">/** counters */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">stats_mib2_netif_ctrs</span> <span class="title">mib2_counters</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* MIB2_STATS */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_IPV4 &amp;&amp; LWIP_IGMP</span></span><br><span class="line">  <span class="comment">/** This function could be called to add or delete an entry in the multicast</span></span><br><span class="line"><span class="comment">      filter table of the ethernet MAC.*/</span></span><br><span class="line">  netif_igmp_mac_filter_fn igmp_mac_filter;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_IPV4 &amp;&amp; LWIP_IGMP */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_IPV6 &amp;&amp; LWIP_IPV6_MLD</span></span><br><span class="line">  <span class="comment">/** This function could be called to add or delete an entry in the IPv6 multicast</span></span><br><span class="line"><span class="comment">      filter table of the ethernet MAC. */</span></span><br><span class="line">  netif_mld_mac_filter_fn mld_mac_filter;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_IPV6 &amp;&amp; LWIP_IPV6_MLD */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_NETIF_HWADDRHINT</span></span><br><span class="line">  <span class="keyword">u8_t</span> *addr_hint;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_NETIF_HWADDRHINT */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ENABLE_LOOPBACK</span></span><br><span class="line">  <span class="comment">/* List of packets to be queued for ourselves. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pbuf</span> *<span class="title">loop_first</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pbuf</span> *<span class="title">loop_last</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_LOOPBACK_MAX_PBUFS</span></span><br><span class="line">  <span class="keyword">u16_t</span> loop_cnt_current;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_LOOPBACK_MAX_PBUFS */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* ENABLE_LOOPBACK */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ESP_LWIP</span></span><br><span class="line">  <span class="keyword">void</span> (*l2_buffer_free_notify)(<span class="keyword">void</span> *user_buf); <span class="comment">/* Allows LWIP to notify driver when a L2-supplied pbuf can be freed */</span></span><br><span class="line">  <span class="keyword">ip_addr_t</span> last_ip_addr; <span class="comment">/* Store last non-zero ip address */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/09/PysfPI.png" alt="IP信息" title="">                </div>                <div class="image-caption">IP信息</div>            </figure></li><li>ip_addr，netmask，gw分别表示了IP地址、子网掩码、网关，建议这样子设定：<code>IP4_ADDR(&amp;ipaddr,192,168,1,100)</code></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/09/Pysqaj.png" alt="硬件信息" title="">                </div>                <div class="image-caption">硬件信息</div>            </figure></li><li>mtu表明最大的网络传输个数，以字节为单位</li><li>hwaddr存放了硬件接口的地址，对于以太网而言，就是MAC地址</li><li>flags是硬件接口状态信息标志位，如是否建立连接状态，是否允许广播功能等</li><li>name用来表示硬件接口使用的驱动类型，缩写，2个字节，比如蓝牙设备为“bl”，wifi设备为”wl”</li><li>num用来表示硬件接口的编号，当两个硬件接口的name字段相同时，该字段可以用来区分是哪一个硬件接口</li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/09/PysXin.png" alt="驱动功能" title="">                </div>                <div class="image-caption">驱动功能</div>            </figure></li><li>input是一个函数指针，它指向的函数用于将网络硬件接口接收到的数据包传递给上层TCP/IP协议栈</li><li>output是一个函数指针，它所指向的函数用于将IP层的数据包发送到网络硬件接口上</li><li>linkoutput是一个函数指针，在ARP模块中调用，output指向的函数也是通过调用linkoutput指向的函数实现数据报发送的</li></ul><h2 id="ARP处理"><a href="#ARP处理" class="headerlink" title="ARP处理"></a>ARP处理</h2><blockquote><p>ARP协议是TCP/IP协议的基础，本质是实现IP地址与底层物理地址的相互转换。ARP协议的核心是ARP缓存表，而ARP协议的实质就是对缓存表的建立、更新、查询等操作。ARP缓存表是由若干缓存表项组成，在LwIP中，描述缓存表项的数据结构叫etharp_entry。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/02/P0CQUA.png" alt="ARP协议数据包格式" title="">                </div>                <div class="image-caption">ARP协议数据包格式</div>            </figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">etharp_entry</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ARP_QUEUEING</span></span><br><span class="line">  <span class="comment">/** Pointer to queue of pending outgoing packets on this ARP entry. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">etharp_q_entry</span> *<span class="title">q</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* ARP_QUEUEING */</span></span></span><br><span class="line">  <span class="comment">/** Pointer to a single pending outgoing packet on this ARP entry. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pbuf</span> *<span class="title">q</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* ARP_QUEUEING */</span></span></span><br><span class="line">  <span class="keyword">ip4_addr_t</span> ipaddr;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">netif</span> *<span class="title">netif</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">eth_addr</span> <span class="title">ethaddr</span>;</span></span><br><span class="line">  <span class="keyword">u16_t</span> ctime;</span><br><span class="line">  <span class="keyword">u8_t</span> state;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>ipaddr存放IP地址，ethaddr存放物理地址，state表示缓存项的状态（例如是否为空，是否稳定），ctime记录ARP缓存项处于某个状态的时间，当某表项的ctime值大于规定的表项最大生存值时，LwIP内核会删除该表项。因此使用ARP功能时，必须设置一个ARP超时事件，该超时事件的基本功能就是对每个表项的ctime字段值加1，然后删除那些生存时间大于最大生存值的表项</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/02/P0PcWt.jpg" alt="ARP处理流程" title="">                </div>                <div class="image-caption">ARP处理流程</div>            </figure><ul><li>函数ethernet_input根据报文首部的帧类型字段判断接收到的报文类型，如果是IP包，则将该包传递给etharp_ip_input，如果是ARP包，则将该包递交给etharp_arp_input</li><li>函数etharp_ip_input调用函数update_arp_entry，它是将报文首部的MAC地址和IP地址更新到ARP缓存中</li><li>函数etharp_arp_input首先判断接收到的ARP数据包的类型，如果是ARP请求包，那么首先判断这个包是否是给自己的，如果是给自己的，就在原有包的基础上重组一个ARP应答包发送出去；如果不是给自己的，则直接忽略而如果接收到的数据包是ARP应答包，那么就调用update_arp_entry更新ARP缓存表</li></ul><h2 id="IP处理"><a href="#IP处理" class="headerlink" title="IP处理"></a>IP处理</h2><p><img src="https://s1.ax1x.com/2018/08/02/P0CUbQ.png" alt="IP协议数据包格式"></p><h4 id="LwIP软件大致框架"><a href="#LwIP软件大致框架" class="headerlink" title="LwIP软件大致框架"></a>LwIP软件大致框架</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/02/P0keJA.jpg" alt="LwIP整体框架图" title="">                </div>                <div class="image-caption">LwIP整体框架图</div>            </figure><ul><li>ip_input会做各项检查，包括协议版本号，IP首部的校验值，源IP地址是否有效等，然后检测IP数据包中的目的IP地址是否与本节点的IP地址相符，如果是本节点的IP地址，则根据该IP数据包首部的协议字段判断该数据包应该被递交到哪个上层协议，并调用相应的函数。如果是UDP协议，则调用udp_input函数；如果是TCP协议，则调用tcp_input函数；如果是ICMP协议，则调用icmp_input函数；如果是IGMP协议，则调用igmp_input函数；如果都不是，则调用函数icmp_dest_unreach返回一个协议不可达ICMP数据包给源主机。如果不是本节点的IP地址，则通过调用函数ip_forward对数据包进行转发。需要注意，由于一个节点可能含有多个IP地址，因此ip_input函数会遍历网络接口链表netif_list上的netif结构变量，来查找与IP数据包中相匹配的IP地址。</li><li>ip_output使用ip_route函数查找目标网络接口netif来发送IP数据包。当网络接口netif确定后，IP数据包通过函数ip_output_if发送出去。若ip_route没有找到合适的网络接口，则丢弃该报文，终止本次发送。函数ip_route通过遍历网络接口链表netif_list，查找与目的IIP地址在同一个子网中的网络接口，并将该网络接口返回给变量netif。</li></ul><h2 id="ICMP处理"><a href="#ICMP处理" class="headerlink" title="ICMP处理"></a>ICMP处理</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/02/P0AVmT.jpg" alt="ICMP协议数据包格式" title="">                </div>                <div class="image-caption">ICMP协议数据包格式</div>            </figure><ul><li>icmp_input在ip_input中被调用，它处理接收到的ICMP数据包，并根据包类型做相应的处理。在LwIP协议栈中，它只处理ICMP回显请求包，对其他类型的ICMP包不作响应。icmp_input在处理ICMP回显请求时，首先判断该数据包是否为广播或者组播包，如果是，则直接返回，不再继续处理；如果不是，则继续判断该数据包长度是否小于ICMP回显请求头部长度，如果是则丢弃数据包；如果不是则将该ICMP报文类型字段变为0，重新计算校验和，并将IP报文首部的源IP地址和目的IP地址交换位置，并通过调用函数ip_output_if将数据包发送出去。</li><li>函数icmp_dest_unreach在ip_input、udp_input中被调用，它的功能是通过调用函数icmp_send_response发送一个“目的不可到达”类型的icmp报文。在函数ip_input中，当所接收的IP报文协议字段不可识别时，icmp_dest_unreach就被调用。而在UDP处理器中，若不能找到与接收的报文相对应的端口号，则icmp_dest_unreach也将被调用。</li><li>函数icmp_time_exceeded在ip_forward中被调用，它的功能是通过调用函数icmp_send_response发送一个“超时”类型的ICMP报文。在函数ip_forward中，当TTL减小为0时，调用该函数。</li></ul><h2 id="UDP处理"><a href="#UDP处理" class="headerlink" title="UDP处理"></a>UDP处理</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/02/P0JfdH.png" alt="UDP协议数据包" title="">                </div>                <div class="image-caption">UDP协议数据包</div>            </figure><ul><li>函数udp_input将检查报文的UDP校验，最终调用函数recv，将收到的报文传递给应用层程序</li><li>当应用层程序要通过UDP协议向外发送IP报文时，将通过调用函数udp_send实现，函数udp_send通过调用IP层的函数ip_output_if实现报文的发送</li><li>LwIP使用链表结构体udp_pcb来保存每一个UDP会话的状态</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">udp_pcb</span> &#123;</span></span><br><span class="line"><span class="comment">/* Common members of all PCB types */</span></span><br><span class="line">  IP_PCB;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Protocol specific PCB members */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">udp_pcb</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">u8_t</span> flags;</span><br><span class="line">  <span class="comment">/** ports are in host byte order */</span></span><br><span class="line">  <span class="keyword">u16_t</span> local_port, remote_port;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_MULTICAST_TX_OPTIONS</span></span><br><span class="line">  <span class="comment">/** outgoing network interface for multicast packets */</span></span><br><span class="line">  <span class="keyword">ip_addr_t</span> multicast_ip;</span><br><span class="line">  <span class="comment">/** TTL for outgoing multicast packets */</span></span><br><span class="line">  <span class="keyword">u8_t</span> mcast_ttl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_MULTICAST_TX_OPTIONS */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_UDPLITE</span></span><br><span class="line">  <span class="comment">/** used for UDP_LITE only */</span></span><br><span class="line">  <span class="keyword">u16_t</span> chksum_len_rx, chksum_len_tx;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_UDPLITE */</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/** receive callback function */</span></span><br><span class="line">  udp_recv_fn recv;</span><br><span class="line">  <span class="comment">/** user-supplied argument for the recv callback */</span></span><br><span class="line">  <span class="keyword">void</span> *recv_arg;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="TCP处理"><a href="#TCP处理" class="headerlink" title="TCP处理"></a>TCP处理</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/02/P0JULF.png" alt="TCP协议数据包" title="">                </div>                <div class="image-caption">TCP协议数据包</div>            </figure><ul><li>TCP的滑动窗口协议是用于实现流量控制的</li><li>TCP的超时和重传机制提高了数据传输的可靠性</li><li>拥塞控制是通过慢启动算法和拥塞避免算法来实现的</li><li>LwIP中含有两个定时器函数：tcp_fasttmr和tcp_slowtmr，tcp_fasttmr每250ms调用一次，tcp_slowtmr每500ms调用一次。快速定时器主要做两个方面的事情：向上层递交上层一直未接收的数据，二是发送该连接上的延迟ACK请求数据段。慢速定时器参与了较多功能，如超时与重传、拥塞控制等。</li></ul><h2 id="常用API接口"><a href="#常用API接口" class="headerlink" title="常用API接口"></a>常用API接口</h2><blockquote><p>LwIP提供了3种应用程序接口：</p><ol><li>直接调用协议栈各模块的函数，它是基于回调函数的API接口，也成为RAW API接口，回调函数直接被协议栈代码调用，因此应用程序代码和TCP/IP协议栈运行在同一个进程里，无需使用操作系统，两者之间这种良好的结合可以使得程序的执行效率更高，而且在运行中它占用更少的内存资源</li><li>使用LwIP提供的专用API接口，也称为Sequential API接口，程序的执行过程基于open-read-write-close模型，需要操作系统的支持，另外需要在文件lwipopts.h中把宏定义<code>NO_SYS</code>定义为0。Sequential API被分成两部分实现，一部分驻留在应用程序进程中，另一部分在TCP/IP协议栈进程内实现。这两部分API之间采用由操作系统模拟层提供的进程间通信机制进行通信。在LwIP中，操作系统模拟层是LwIP协议栈的一部分，它存在的目的是方面LwIP的移植，它在底层操作系统和LwIP协议栈之间提供了一个接口，当用户移植LwIP到一个新的目标系统的时候，只需要修改这个接口内的函数即可。驻留在应用程序进程中的API接口与TCP/IP协议栈进程中的API之间通过共享内存传递数据，对该共享内存区的描述是采用netbuf结构体</li><li>BSD Socket兼容的Socket函数接口，但是BSD套接字需要将发送的数据从应用程序复制到TCP/IP协议栈的内部缓冲区，将会消耗系统有限的资源</li></ol></blockquote><h3 id="TCP-RAW-API"><a href="#TCP-RAW-API" class="headerlink" title="TCP RAW API"></a>TCP RAW API</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/10/P6l7j0.png" alt="TCP RAW API" title="">                </div>                <div class="image-caption">TCP RAW API</div>            </figure><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>struct tcp_pcb* tcp_new()</td><td>新建tcp协议控制块</td></tr><tr><td>ert_t tcp_bind(struct tcp_pcb<em> pcb,struct ip_addr</em> ipaddr,u16_t port)</td><td>绑定本地IP地址和端口号，如果ipaddr为IP_ADDR_ANY，则将连接绑定到所有的本地IP地址上</td></tr><tr><td>struct tcp_pcb<em> tcp_listen(struct tcp_pcb</em> pcb)</td><td>使指定的连接开始进入监听状态，如果监听成功，就返回一个新的连接控制块pcb</td></tr><tr><td>void tcp_accepted(struct tcp_pcb* pcb)</td><td>通知LwIP一个新来的连接已经被接收，这个函数通常在由tcp_accept指定的回调函数中被调用</td></tr><tr><td>void tcp_accept(struct tcp_pcb* pcb,err_t (*accept)(void* arg,struct tcp_pcb* newpcb,err_t err))</td><td>指定处于监听状态的连接，在成功建立连接后要调用的回调方法</td></tr><tr><td>err_t tcp_connect(struct tcp_pcb* pcb,struct ip_addr* ipaddr,u16_t port,err_t (* connected)(void* arg,struct tcp_pcb* tpcb,err_t err))</td><td>请求连接到执行的远程主机</td></tr><tr><td>err_t tcp_write(struct tcp_pcb* pcb,void* dataptr,u16_t len,u8_t copy)</td><td>发送TCP数据，将要发送的数据放入发送队列中，由协议栈内核发送，copy为0则不会为发送的数据分配新的内存空间</td></tr><tr><td>void tcp_sent(struct tcp_pcb* pcb,err_t (*sent)(void* arg,struct tcp_pcb* tpcb,u16_t len))</td><td>指定当远程主机成功接收数据后，应用程序调用的回调函数</td></tr><tr><td>void tcp_recv(struct tcp_pcb* pcb,err_t (* recv)(void* arg,struct tcp_pcb* tpcb,struct pbuf* p,err_t err))</td><td>指定接收数据时调用的回调函数</td></tr><tr><td>void tcp_recved(struct tcp_pcb* pcb,u16_t len)</td><td>用于获取接收到的数据的长度，必须在tcp_recv指定的回调函数中被调用</td></tr><tr><td>err_t tcp_close(struct tcp_pcb* pcb)</td><td>关闭一个指定的TCP连接，调用该函数后将会释放pcb控制块所占用的内存空间</td></tr><tr><td>void tcp_abort(struct tcp_pcb* pcb)</td><td>终止一个指定的连接，调用该函数后，pcb控制块所占用的内存空间将被释放</td></tr><tr><td>void tcp_err(struct tcp_pcb* pcb,void (*err)(void* arg,err_t err))</td><td>指定处理错误的回调函数</td></tr></tbody></table><h3 id="TCP-RAW-API-1"><a href="#TCP-RAW-API-1" class="headerlink" title="TCP RAW API"></a>TCP RAW API</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/10/P6lLHU.png" alt="UDP RAW API" title="">                </div>                <div class="image-caption">UDP RAW API</div>            </figure><h3 id="Netconn-API"><a href="#Netconn-API" class="headerlink" title="Netconn API"></a>Netconn API</h3><ul><li>数据结构netconn描述了应用程序要使用API函数机那里一个连接的各种属性，包括了连接的类型、最近的故障代码、回调函数等。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** A netconn descriptor */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">netconn</span> &#123;</span></span><br><span class="line">  <span class="comment">/** type of the netconn (TCP, UDP or RAW) */</span></span><br><span class="line">  <span class="keyword">enum</span> netconn_type type;</span><br><span class="line">  <span class="comment">/** current state of the netconn */</span></span><br><span class="line">  <span class="keyword">enum</span> netconn_state state;</span><br><span class="line">  <span class="comment">/** the lwIP internal protocol control block */</span></span><br><span class="line">  <span class="keyword">union</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ip_pcb</span>  *<span class="title">ip</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tcp_pcb</span> *<span class="title">tcp</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">udp_pcb</span> *<span class="title">udp</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">raw_pcb</span> *<span class="title">raw</span>;</span></span><br><span class="line">  &#125; pcb;</span><br><span class="line">  <span class="comment">/** the last error this netconn had */</span></span><br><span class="line">  <span class="keyword">err_t</span> last_err;</span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !LWIP_NETCONN_SEM_PER_THREAD</span></span><br><span class="line">  <span class="comment">/** sem that is used to synchronously execute functions in the core context */</span></span><br><span class="line">  <span class="keyword">sys_sem_t</span> op_completed;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/** mbox where received packets are stored until they are fetched</span></span><br><span class="line"><span class="comment">      by the netconn application thread (can grow quite big) */</span></span><br><span class="line">  <span class="keyword">sys_mbox_t</span> recvmbox;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_TCP</span></span><br><span class="line">  <span class="comment">/** mbox where new connections are stored until processed</span></span><br><span class="line"><span class="comment">      by the application thread */</span></span><br><span class="line">  <span class="keyword">sys_mbox_t</span> acceptmbox;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_TCP */</span></span></span><br><span class="line">  <span class="comment">/** only used for socket layer */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_SOCKET</span></span><br><span class="line">  <span class="keyword">int</span> socket;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_SOCKET */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_SO_SNDTIMEO</span></span><br><span class="line">  <span class="comment">/** timeout to wait for sending data (which means enqueueing data for sending</span></span><br><span class="line"><span class="comment">      in internal buffers) in milliseconds */</span></span><br><span class="line">  <span class="keyword">s32_t</span> send_timeout;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_SO_RCVTIMEO */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_SO_RCVTIMEO</span></span><br><span class="line">  <span class="comment">/** timeout in milliseconds to wait for new data to be received</span></span><br><span class="line"><span class="comment">      (or connections to arrive for listening netconns) */</span></span><br><span class="line">  <span class="keyword">int</span> recv_timeout;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_SO_RCVTIMEO */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_SO_RCVBUF</span></span><br><span class="line">  <span class="comment">/** maximum amount of bytes queued in recvmbox</span></span><br><span class="line"><span class="comment">      not used for TCP: adjust TCP_WND instead! */</span></span><br><span class="line">  <span class="keyword">int</span> recv_bufsize;</span><br><span class="line">  <span class="comment">/** number of bytes currently in recvmbox to be received,</span></span><br><span class="line"><span class="comment">      tested against recv_bufsize to limit bytes on recvmbox</span></span><br><span class="line"><span class="comment">      for UDP and RAW, used for FIONREAD */</span></span><br><span class="line">  <span class="keyword">int</span> recv_avail;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_SO_RCVBUF */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_SO_LINGER</span></span><br><span class="line">   <span class="comment">/** values &lt;0 mean linger is disabled, values &gt; 0 are seconds to linger */</span></span><br><span class="line">  <span class="keyword">s16_t</span> linger;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_SO_LINGER */</span></span></span><br><span class="line">  <span class="comment">/** flags holding more netconn-internal state, see NETCONN_FLAG_* defines */</span></span><br><span class="line">  <span class="keyword">u8_t</span> flags;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LWIP_TCP</span></span><br><span class="line">  <span class="comment">/** TCP: when data passed to netconn_write doesn't fit into the send buffer,</span></span><br><span class="line"><span class="comment">      this temporarily stores how much is already sent. */</span></span><br><span class="line">  <span class="keyword">size_t</span> write_offset;</span><br><span class="line">  <span class="comment">/** TCP: when data passed to netconn_write doesn't fit into the send buffer,</span></span><br><span class="line"><span class="comment">      this temporarily stores the message.</span></span><br><span class="line"><span class="comment">      Also used during connect and close. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">api_msg_msg</span> *<span class="title">current_msg</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LWIP_TCP */</span></span></span><br><span class="line">  <span class="comment">/** A callback function that is informed about events for this netconn */</span></span><br><span class="line">  netconn_callback callback;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/10/P61AED.png" alt="Netconn API" title="">                </div>                <div class="image-caption">Netconn API</div>            </figure><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>struct netconn* netconn_new_with_proto_and_callback(enum netconn_type t,u8_t proto,netconn_callback callback)</td><td>建立一个新的netconn连接</td></tr><tr><td>err_t netconn_delete(struct netconn* conn)</td><td>删除netconn所指向的连接</td></tr><tr><td>err_t netconn_getaddr(struct netconn* conn,struct ip_addr* addr,u16_t* port,u8_t local)</td><td>获取conn连接的主机IP地址和端口号</td></tr><tr><td>err_t netconn_bind(struct netconn* conn,struct ip_addr* addr,u16_t port)</td><td>将一个IP地址及端口号与conn指向的而连接绑定</td></tr><tr><td>err_t netconn_connect(struct netconn* conn,struct ip_addr* addr,u16_t port)</td><td>将服务器端的IP地址和端口号与conn指向的连接绑定</td></tr><tr><td>err_t netconn_disconnect(struct netconn* conn)</td><td>断开conn指向的连接</td></tr><tr><td>err_t netconn_listen_with_backlog(struct netconn* conn，u8_t backlog)</td><td>将conn指向的连接设定为监听状态</td></tr><tr><td>struct netconn* netconn_accept(struct netconn* conn)</td><td>接收客户端的连接，该函数会阻塞在acceptmbox邮箱上</td></tr><tr><td>struct netbuf* netconn_recv(struct netconn* conn)</td><td>接收数据，接收到的数据被封装为netbuf结构</td></tr><tr><td>err_t netconn_sendto(struct netconn* conn,struct netbuf* buf,struct ip_addr* addr,u16_t port)</td><td>向一个指定的IP地址和端口号发送数据，这个函数只能用在conn类型为UDP或者RAW的连接中</td></tr><tr><td>err_t netconn_write(struct netconn* conn,const void* dataptr,size_t size,u8_t apiflag)</td><td>向相应的TCP连接上发送数据，这个函数只能用于发送TCP的报文</td></tr><tr><td>err_t nnetconn_close(struct netconn* conn)</td><td>关闭conn指向的连接</td></tr></tbody></table><ul><li>netconn_new_with_proto_and_callback首先调用netconn_alloc函数分配并初始化一个netconn结构，接下来该函数会构建一个api_msg消息，该消息要求内核执行函数do_newconn，最后调用函数tcpip_apimsg来将消息包装成tcpip_msg结构并发送出去。tcpip_thread函数解析该消息并调用函数do_newconn，do_newconn根据参数的类型调用函数tcp_new创建一个TCP控制块</li><li>tcpip_thread是处理TCP/IP的内核协议栈进程，它只接收tcpip_msg结构封装的消息，并根据消息的类型来判定该消息来自物理网卡或应用层程序。如果接收到网卡的IP报文，则将该报文递交给ip_input函数；如果是应用层程序发送的消息，则通过调用消息指定的内核处理函数来完成相应的功能</li></ul><h3 id="Socket-API"><a href="#Socket-API" class="headerlink" title="Socket API"></a>Socket API</h3><blockquote><p>LwIP提供了标准BSD套接字API，它也是有序API，在内存构建于Netconn API之上。所谓“有序”是指其执行模型基于典型的阻塞式打开-读-写-关闭机制。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/10/P61V4H.png" alt="Socket API" title="">                </div>                <div class="image-caption">Socket API</div>            </figure><h2 id="LwIP移植"><a href="#LwIP移植" class="headerlink" title="LwIP移植"></a>LwIP移植</h2><blockquote><ol><li>以太网接口任务用于接收来自物理网卡的数据报文，同时将收到的报文通过FreeRTOS提供的邮箱传递给TCP/IP协议栈任务。以太网接口任务平时处于挂起状态，当硬件收到报文时，将产生接收报文中断，该终端以信号量的方式将以太网接口任务激活</li><li>应用程序使用TCP/IP协议栈提供的Sequential API接口访问LwIP，同时这两个独立的任务需要使用FreeRTOS提供的邮箱机制实现彼此之间信息的交互。Sequential API接口函数在FreeRTOS操作系统运行环境下是“阻塞”函数，也就是说应用程序任务在调用Sequential API接口函数时，将会被阻塞，直到收到来自TCP/IP协议栈返回的消息应答</li><li>基于LwIP的TCP/IP协议栈与应用程序运行在两个独立的任务中</li></ol></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/09/PyyVRx.jpg" alt="网卡驱动移植" title="">                </div>                <div class="image-caption">网卡驱动移植</div>            </figure><ol><li>以太网接口文件ethernetif.c的移植，主要包含<code>ethernet_low_level_init</code>，<code>ethernet_low_level_output</code>，<code>ethernetif_input</code>，<code>ethernetif_init</code>这几个函数的功能<ul><li><code>ethernetif_input</code>函数用于从底层物理网卡读取报文，并将该报文向上传递给LwIP协议栈函数ethernet_input进行处理</li><li><code>ethernetif_init</code>函数指定了网络接口netif对应的主机名及网卡描述，并指定了该网卡的MAC地址，同事还指定了netif的发送数据报文函数</li></ul></li><li>操作系统模拟层文件sys_arch.c的移植，总的来时操作系统模拟层主要完成了与信号量、消息邮箱机制、线程相关的功能<ul><li>在sys_arch.h文件中对信号量、邮箱、线程对象进行重定义</li><li>sys_mbox_new函数，使用FreeRTOS提供的消息队列机制创建一个空的消息队列</li><li>sys_mbox_free函数，删除一个队列，当该队列中还有未被取出的消息时，该函数应当报错，并通知应用程序</li><li>sys_mbox_post函数，将消息发送到消息队列中，该函数是一个阻塞函数，当消息被发送至队列后，该函数才会退出阻塞状态</li><li>sys_mbox_trypost函数，用于尝试将某个消息发送至消息队列中，当消息被成功投递后，则返回成功，否则返回失败</li><li>sys_arch_mbox_fetch函数，用于从消息队列中取出一条消息，该函数是一个阻塞函数，调用该函数的线程若未取到消息，则在形参timeout所指定的时间内，该线程被阻塞。当超过timeout所指定的时间后，该线程恢复至就绪状态。若timeout为0，则调用该函数的线程一直被阻塞，直到收到消息</li><li>sys_arch_mbox_tryfetch函数尝试从消息队列中取出消息，它是一个非阻塞函数，当取到消息时，则返回成功，否则立即退出，返回队列空</li><li>sys_sem_new函数创建一个信号量，并根据形参的值指定好当前信号量的状态</li><li>sys_arch_sem_wait函数在形参timeout指定的时间被阻塞，若timeout为0，则调用该函数的线程将一直被阻塞，直到等待的信号量被释放。但该函数取到信号量时，它将返回取到的该信号量所占的时间</li><li>sys_sem_signal函数用于释放一个信号量</li><li>sys_sem_free函数用于删除一个信号量</li><li>sys_thread_new函数用于创建一个新的线程</li><li>sys_init函数是操作系统模拟层的初始化函数，主要对定时器管理数组进行了初始化</li><li>sys_zrch_timeouts函数用于返回当前任务的定时器管理链表首地址</li><li>sys_arch_protect函数和sys_arch_unprotect函数在访问临界区资源时成对使用</li></ul></li><li>ethernet_input函数的实现在独立模式和RTOS模式时是不同的：<ul><li>在独立应用中，此函数必须被插入到应用的主循环中，以便轮询任何收到的包</li><li>在RTOS应用中，此函数为一个阻塞线程，只有当得到所等待的信号量时才处理接收到的数据包。当以太网外设收到数据并产生中断时，会在中断处理函数中释放此信号量</li></ul></li></ol><h2 id="LwIP配置"><a href="#LwIP配置" class="headerlink" title="LwIP配置"></a>LwIP配置</h2><blockquote><p>LwIP提供了名为lwipopts.h的文件，它允许用户充分配置栈及其所有模块。用户不需要定义所有LwIP选项：如果未定义某选项，则使用opt.h文件中定义的默认值</p></blockquote><ul><li>内存配置</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/08/10/P6GG5D.png" alt="LwIP内存配置" title="">                </div>                <div class="image-caption">LwIP内存配置</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TCP-IP协议栈&quot;&gt;&lt;a href=&quot;#TCP-IP协议栈&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP协议栈&quot;&gt;&lt;/a&gt;TCP/IP协议栈&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
               
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="LwIP" scheme="https://suda-morris.github.io/tags/LwIP/"/>
    
  </entry>
  
  <entry>
    <title>ESP32 介绍</title>
    <link href="https://suda-morris.github.io/2018/07/05/esp32/"/>
    <id>https://suda-morris.github.io/2018/07/05/esp32/</id>
    <published>2018-07-05T01:48:00.000Z</published>
    <updated>2018-11-08T05:19:51.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ESP32关键特征简介"><a href="#ESP32关键特征简介" class="headerlink" title="ESP32关键特征简介"></a>ESP32关键特征简介</h2><ul><li>双核CPU，集成WiFi(802.11bgn)和双模蓝牙(经典蓝牙+蓝牙BLE)</li><li>CPU最高主频240MHz(600MIPS)，内部集成8MHz的高速振荡器和低速RC谐振器(通常是150KHz，可调)</li><li>CPU支持DSP指令，包括32比特的乘法，32比特的除法和40比特的MAC（乘加操作）</li><li>支持32个中断向量</li><li>448 kB ROM（存放启动代码和核心功能函数），520 kB SRAM（存放指令和数据），16 kB SRAM in RTC（包括8kB的快速内存和8kB的慢速内存，快速内存可以用来保存数据，主CPU从Deepsleep模式唤醒时候会访问这块内存；慢速内存在Deep-sleep模式下由RTC协处理器访问）</li><li>1kbit的熔丝位，其中256比特用于配置系统的MAC地址和芯片的相关设定，剩余部分供用户保存flash秘钥，芯片ID等</li><li>支持片外SPI接口的Flash和SRAM</li><li>两组定时器，每组包括两个64位的常规定时器和1个看门狗定时器</li><li>一个RTC定时器和RTC看门狗</li><li>34个GPIO</li><li>18通道的SAR ADC（12比特）</li><li>2个8比特DAC</li><li>10路电容触摸传感器</li><li>4个SPI接口，2个I2S接口，2个I2C接口，3个UART接口</li><li>1个SDIO主控制器，1个SDIO从控制器</li><li>一路以太网MAC(包括专用DMA，支持1588协议)</li><li>一路CAN2.0</li><li>一路红外收发器</li><li>电机PWM</li><li>16通道LED PWM调试器</li><li>霍尔传感器</li><li>秘钥加密加速(AES，SHA-2，RSA，ECC)</li><li>随机数发生器</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/07/25/PtGOD1.png" alt="ESP32芯片内部框图" title="">                </div>                <div class="image-caption">ESP32芯片内部框图</div>            </figure><h2 id="ESP32-Strapping-引脚配置"><a href="#ESP32-Strapping-引脚配置" class="headerlink" title="ESP32 Strapping 引脚配置"></a>ESP32 Strapping 引脚配置</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/07/25/PtYdFf.png" alt="strapping引脚配置" title="">                </div>                <div class="image-caption">strapping引脚配置</div>            </figure><h2 id="ESP32-内存映射"><a href="#ESP32-内存映射" class="headerlink" title="ESP32 内存映射"></a>ESP32 内存映射</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/07/25/PtNsZn.png" alt="内存映射" title="">                </div>                <div class="image-caption">内存映射</div>            </figure><ul><li>ESP32可以通过高速缓存来访问片外的QSPI Flash，最高16MB的外部Flash可以被映射到CPU的指令内存空间和只读空间。如果映射到指令空间，一次最多可以映射11MB+248KB（超过3MB+24KB后，cache的性能会下降）；如果映射到只读空间，一次最对可以映射4MB，并且支持8bit、16bit和32bit的读操作</li><li>ESP32可以通过高速缓存来访问片外的QSPI SRAM，最高8MB的外部SRAM可以被映射到CPU的数据空间，并且一次最多可以映射4MB，支持8bit、16bit和32bit的读写操作</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/07/25/Pta1AI.png" alt="ESP32内存映射表" title="">                </div>                <div class="image-caption">ESP32内存映射表</div>            </figure><h2 id="ESP32的低功耗管理"><a href="#ESP32的低功耗管理" class="headerlink" title="ESP32的低功耗管理"></a>ESP32的低功耗管理</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/07/25/PtBLWt.png" alt="低功耗模式" title="">                </div>                <div class="image-caption">低功耗模式</div>            </figure><h2 id="ESP32-GPIO-MUX"><a href="#ESP32-GPIO-MUX" class="headerlink" title="ESP32 GPIO-MUX"></a>ESP32 GPIO-MUX</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/07/25/Ptrcgx.png" alt="GPIO-MUX" title="">                </div>                <div class="image-caption">GPIO-MUX</div>            </figure><h2 id="ESP32系统时钟"><a href="#ESP32系统时钟" class="headerlink" title="ESP32系统时钟"></a>ESP32系统时钟</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/11/08/i7aN6I.png" alt="系统时钟结构" title="">                </div>                <div class="image-caption">系统时钟结构</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/11/08/i7afBV.png" alt="外设支持的时钟源" title="">                </div>                <div class="image-caption">外设支持的时钟源</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ESP32关键特征简介&quot;&gt;&lt;a href=&quot;#ESP32关键特征简介&quot; class=&quot;headerlink&quot; title=&quot;ESP32关键特征简介&quot;&gt;&lt;/a&gt;ESP32关键特征简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;双核CPU，集成WiFi(802.11bgn)和双模蓝牙
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="ESP32" scheme="https://suda-morris.github.io/tags/ESP32/"/>
    
  </entry>
  
  <entry>
    <title>FreeRTOS Introduction---Based on ESP32</title>
    <link href="https://suda-morris.github.io/2018/05/30/freertos/"/>
    <id>https://suda-morris.github.io/2018/05/30/freertos/</id>
    <published>2018-05-30T12:56:00.000Z</published>
    <updated>2018-07-19T07:36:39.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FreeRTOS系统配置"><a href="#FreeRTOS系统配置" class="headerlink" title="FreeRTOS系统配置"></a>FreeRTOS系统配置</h2><blockquote><p>FreeRTOS的系统配置文件为FreeRTOSConfig.h，在此配置文件中可以完成FreeRTOS的裁剪和配置。FreeRTOS中的裁剪和配置使用条件编译的方式来实现。</p></blockquote><ul><li>“INCLUDE_”开始的宏，用来表示使能或者失能FreeRTOS中的相应API函数，比如<code>INCLUDE_vTaskPrioritySet</code>用来决定是否可以使用vTaskPrioritySet函数</li><li>“config”开始的宏也用来对FreeRTOS的进行裁剪和配置，比如<ul><li><code>configAPPLICATION_ALLOCATED_HEAP</code>宏，如果不开启，那么FreeRTOS的堆内存由编译器分配，开启后，堆内存将由用户自行设置<ul><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/07/03/PE0q2D.png" alt="configASSERT设置" title="">                </div>                <div class="image-caption">configASSERT设置</div>            </figure></li></ul></li><li><code>configCHECK_FOR_STACK_OVERFLOW</code>宏如果不为零，用户必须提供一个钩子函数<code>vApplicationStackOverflowHook</code><ul><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/07/03/PEB4SS.png" alt="PEB4SS.png" title="">                </div>                <div class="image-caption">PEB4SS.png</div>            </figure></li><li>当堆栈溢出太严重时可能会损毁该函数的两个参数，这时可以通过查看变量pxCurrentTCB来确定哪个任务发生了堆栈溢出</li><li><code>vApplicationStackOverflowHook( ( TaskHandle_t ) pxCurrentTCB[ xPortGetCoreID() ], pxCurrentTCB[ xPortGetCoreID() ]-&gt;pcTaskName );</code></li><li>堆栈溢出有两种检测方法：<ul><li>方法1：上下文切换的时候需要保存现场，现场是保存在堆栈中的，这个时候任务堆栈使用率很可能达到最大值，方法1就是不断检测任务堆栈指针是否指向有效空间，如果指向了无效空间，则调用钩子函数。该方法的特点是快，缺点是不能检测所有的堆栈溢出</li><li>方法2：在创建任务的时候向任务堆栈填充一个已知的标记值，然后检测堆栈后面的几个字节是否被改写，如果被改写，则调用钩子函数，方法2几乎能够检测到所有的堆栈溢出</li></ul></li></ul></li><li><code>configMAX_PRIORITIES</code>设置任务的优先级数量，设置好后任务就可以使用从0～configMAX_PRIORITIES-1的优先级，其中0是最低优先级<ul><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/07/03/PEsHwd.png" alt="PEsHwd.png" title="">                </div>                <div class="image-caption">PEsHwd.png</div>            </figure></li></ul></li><li><code>configMINIMAL_STACK_SIZE</code>设置空闲任务的最小任务堆栈大小，以<strong>字</strong>为单位<ul><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/07/03/PEyFkn.png" alt="PEyFkn.png" title="">                </div>                <div class="image-caption">PEyFkn.png</div>            </figure></li></ul></li><li><code>configTOTAL_HEAP_SIZE</code>设置堆的大小，如果使用了动态内存管理，则FreeRTOS在创建任务、信号量、队列等的时候就会从用户指定的内存中获取空间<ul><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/07/03/PEyUne.png" alt="PEyUne.png" title="">                </div>                <div class="image-caption">PEyUne.png</div>            </figure></li></ul></li><li><code>configKERNEL_INTERRUPT_PRIORITY</code>设置了内核中断系统中systick中断的优先级(FreeRTOS中systick的中断优先级是最低的)<ul><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/07/04/PEv1LF.png" alt="PEv1LF.png" title="">                </div>                <div class="image-caption">PEv1LF.png</div>            </figure></li></ul></li><li><code>configMAX_SYSCALL_INTERRUPT_PRIORITY</code>设置了FreeRTOS系统可管理的最大优先级，这里实际值为<em>3</em>，高于此优先级的中断是不会被FreeRTOS内核屏蔽的，对实时性要求严格的任务就可以使用这些优先级，中断服务函数也不能调用FreeRTOS的API函数；低于（包括本身）此优先级的中断可以安全地调用以FromISR结尾的API函数<ul><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/07/04/PExpTJ.png" alt="PExpTJ.png" title="">                </div>                <div class="image-caption">PExpTJ.png</div>            </figure></li></ul></li></ul></li></ul><h2 id="FreeRTOS中的Task"><a href="#FreeRTOS中的Task" class="headerlink" title="FreeRTOS中的Task"></a>FreeRTOS中的Task</h2><ul><li><p>任务控制块</p><ul><li><blockquote><p>xTaskCreate()创建任务的时候，会自动给每个任务分配一个任务控制块</p></blockquote></li><li><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Task control block.  A task control block (TCB) is allocated for each task,</span></span><br><span class="line"><span class="comment"> * and stores task state information, including a pointer to the task's context</span></span><br><span class="line"><span class="comment"> * (the task's run time environment, including register values)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tskTaskControlBlock</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">volatile</span> StackType_t*pxTopOfStack;<span class="comment">//任务堆栈栈顶</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( portUSING_MPU_WRAPPERS == 1 )</span></span><br><span class="line">xMPU_SETTINGSxMPUSettings;<span class="comment">//MPU相关的设置</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">ListItem_txGenericListItem;<span class="comment">//状态列表项</span></span><br><span class="line">ListItem_txEventListItem;<span class="comment">//事件列表项</span></span><br><span class="line">UBaseType_tuxPriority;<span class="comment">//任务优先级</span></span><br><span class="line">StackType_t*pxStack;<span class="comment">//任务堆栈起始地址</span></span><br><span class="line"><span class="keyword">char</span>pcTaskName[ configMAX_TASK_NAME_LEN ];<span class="comment">//任务名字</span></span><br><span class="line">BaseType_txCoreID;<span class="comment">//执行任务的处理器核ID</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( portSTACK_GROWTH &gt; 0 || configENABLE_TASK_SNAPSHOT == 1 )</span></span><br><span class="line">StackType_t*pxEndOfStack;<span class="comment">//任务堆栈栈底</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( portCRITICAL_NESTING_IN_TCB == 1 )</span></span><br><span class="line">UBaseType_t uxCriticalNesting; <span class="comment">//临界区嵌套深度</span></span><br><span class="line"><span class="keyword">uint32_t</span>uxOldInterruptState; <span class="comment">/*&lt; Interrupt state before the outer taskEnterCritical was called */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_TRACE_FACILITY == 1 )</span></span><br><span class="line">UBaseType_tuxTCBNumber;<span class="comment">/*&lt; Stores a number that increments each time a TCB is created.  It allows debuggers to determine when a task has been deleted and then recreated. */</span></span><br><span class="line">UBaseType_t  uxTaskNumber;<span class="comment">/*&lt; Stores a number specifically for use by third party trace code. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_MUTEXES == 1 )</span></span><br><span class="line">UBaseType_t uxBasePriority;<span class="comment">//任务基础优先级</span></span><br><span class="line">UBaseType_t uxMutexesHeld;<span class="comment">//任务获取到的互斥信号量个数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_APPLICATION_TASK_TAG == 1 )</span></span><br><span class="line">TaskHookFunction_t pxTaskTag;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>( configNUM_THREAD_LOCAL_STORAGE_POINTERS &gt; 0 )</span></span><br><span class="line"><span class="keyword">void</span> *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configTHREAD_LOCAL_STORAGE_DELETE_CALLBACKS )</span></span><br><span class="line">TlsDeleteCallbackFunction_t pvThreadLocalStoragePointersDelCallback[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configGENERATE_RUN_TIME_STATS == 1 )</span></span><br><span class="line"><span class="keyword">uint32_t</span>ulRunTimeCounter;<span class="comment">//记录任务运行总时间</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_NEWLIB_REENTRANT == 1 )</span></span><br><span class="line"><span class="comment">/* Allocate a Newlib reent structure that is specific to this task.</span></span><br><span class="line"><span class="comment">Note Newlib support has been included by popular demand, but is not</span></span><br><span class="line"><span class="comment">used by the FreeRTOS maintainers themselves.  FreeRTOS is not</span></span><br><span class="line"><span class="comment">responsible for resulting newlib operation.  User must be familiar with</span></span><br><span class="line"><span class="comment">newlib and must provide system-wide implementations of the necessary</span></span><br><span class="line"><span class="comment">stubs. Be warned that (at the time of writing) the current newlib design</span></span><br><span class="line"><span class="comment">implements a system-wide malloc() that must be provided with locks. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">reent</span> <span class="title">xNewLib_reent</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_TASK_NOTIFICATIONS == 1 )</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">uint32_t</span> ulNotifiedValue;<span class="comment">//任务通知值</span></span><br><span class="line"><span class="keyword">volatile</span> eNotifyValue eNotifyState;<span class="comment">//任务通知状态</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* See the comments above the definition of</span></span><br><span class="line"><span class="comment">tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )</span></span><br><span class="line"><span class="keyword">uint8_t</span>ucStaticallyAllocated; <span class="comment">//如果任务是静态创建的，该变量就为pdTRUE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125; tskTCB;</span><br><span class="line"><span class="keyword">typedef</span> tskTCB TCB_t;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>任务堆栈</p><ul><li><blockquote><p>任务调度器在进行任务切换的时候，会将当前任务的现场(CPU寄存器值等等)保存在此任务的任务堆栈中；此任务下次运行的时候就会先用堆栈中保存的值来恢复现场，之后任务就会接着从上次中断的地方开始运行。使用动态的方法创建任务时，任务堆栈会自动创建；使用静态的方法创建任务时，任务堆栈需要用户自行定义。任务堆栈的数据类型为<code>StackType_t</code>，其大小为4字节，所以动态创建的任务，其堆栈大小是传入数值4倍</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> portSTACK_TYPE uint32_t</span></span><br><span class="line"><span class="keyword">typedef</span> portSTACK_TYPE StackType_t</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="尾调用-调度任务创建和删除API函数"><a href="#尾调用-调度任务创建和删除API函数" class="headerlink" title="尾调用 调度任务创建和删除API函数"></a>尾调用 调度任务创建和删除API函数</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>xTaskCreate()</td><td>使用动态的方法创建一个任务</td></tr><tr><td>xTaskCreateStatic()</td><td>使用静态的方法创建一个任务</td></tr><tr><td>xTaskCreateRestricted()</td><td>创建一个使用MPU进行限制的任务，相关内存使用动态内存分配</td></tr><tr><td>vTaskDelete()</td><td>删除一个任务</td></tr></tbody></table><h4 id="任务挂起和恢复API函数"><a href="#任务挂起和恢复API函数" class="headerlink" title="任务挂起和恢复API函数"></a>任务挂起和恢复API函数</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>vTaskSuspend()</td><td>挂起一个任务，传入某个任务的句柄，NULL表示当前任务</td></tr><tr><td>vTaskResume()</td><td>恢复一个任务的运行</td></tr><tr><td>xTaskResumeFromISR()</td><td>中断服务函数中恢复一个任务的运行。返回pdTRUE表示恢复运行的任务的优先级等于或者高于正在运行的任务（被中断打断的任务），这意味着在退出中断服务函数的时候必须进行一次上下文切换（调用<em>portYIELD_FROM_ISR</em>）。返回pdFALSE表示恢复运行的任务的优先级低于当前正在运行的任务（被中断打断的任务），这意味着在退出中断服务函数的以后不需要进行上下文切换</td></tr></tbody></table><h4 id="其他常用API函数-部分函数需要在配置文件中开启相关的宏"><a href="#其他常用API函数-部分函数需要在配置文件中开启相关的宏" class="headerlink" title="其他常用API函数(部分函数需要在配置文件中开启相关的宏)"></a>其他常用API函数(部分函数需要在配置文件中开启相关的宏)</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>xTaskGetHandle()</td><td>根据任务名字获取某个任务的任务句柄</td></tr><tr><td>vTaskStartScheduler()</td><td>开启任务调度</td></tr><tr><td>vTaskSuspendAll()</td><td>挂起任务调度器，支持嵌套</td></tr><tr><td>vTaskResumeAll()</td><td>恢复调度器</td></tr><tr><td>vTaskDelay()</td><td>任务延时，单位是时钟节拍</td></tr><tr><td>uxTaskPriorityGet()</td><td>获取指定任务的优先级</td></tr><tr><td>vTaskPrioritySet()</td><td>改变一个任务的任务优先级</td></tr><tr><td>uxTaskGetSystemState()</td><td>获取系统中所有任务的任务状态</td></tr><tr><td>vTaskGetInfo()</td><td>获取单个任务的状态</td></tr><tr><td>xTaskGetCurrentTaskHandle()</td><td>获取当前任务的任务句柄</td></tr><tr><td>xTaskGetHandle()</td><td>根据任务名字获取任务的任务句柄</td></tr><tr><td>xTaskGetIdleTaskHandle()</td><td>返回空闲任务的任务句柄</td></tr><tr><td>uxTaskGetStackHighWaterMark()</td><td>检查任务从创建好到现在的历史剩余最小值，FreeRTOS把这个历史剩余最小值叫“高水位线”</td></tr><tr><td>eTaskGetState()</td><td>查询某个任务的运行状态</td></tr><tr><td>pcTaskGetName()</td><td>根据某个任务的任务句柄来查询这个任务对应的任务名</td></tr><tr><td>xTaskGetTickCount()/xTaskGetTickCountFromISR()</td><td>查询任务调度器从启动到现在的时间计数器xTickCount的值，每个滴答定时器中断时xTickCount就会加1</td></tr><tr><td>xTaskGetSchedulerState()</td><td>获取FreeRTOS的任务调度器运行情况：运行、关闭还是挂起</td></tr><tr><td>uxTaskGetNumberOfTasks()</td><td>查询系统当前存在的任务数量</td></tr><tr><td>vTaskList()</td><td>创建一个表格来描述每个任务的详细信息</td></tr><tr><td>vTaskGetRunTimeStats()</td><td>统计任务的运行时间信息，任务的运行时间信息提供了每个任务获取到CPU使用权总的时间</td></tr><tr><td>SetThreadLocalStoragePointer()</td><td>设置线程本地存储指针的值，每个任务都有自己的指针数组来作为线程本地存储，使用这些线程本地存储可以用来在任务控制块中存储一些应用信息，这些信息只属于线程自己</td></tr><tr><td>GetThreadLocalStoragePointer()</td><td>获取线程本地存储指针的值</td></tr></tbody></table><h2 id="FreeRTOS开关中断"><a href="#FreeRTOS开关中断" class="headerlink" title="FreeRTOS开关中断"></a>FreeRTOS开关中断</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/07/04/PEzUKK.png" alt="PEzUKK.png" title="">                </div>                <div class="image-caption">PEzUKK.png</div>            </figure><ul><li>关闭中断是指优先级低于XCHAL_EXCM_LEVEL的中断将会被屏蔽</li></ul><h2 id="FreeRTOS临界段代码保护"><a href="#FreeRTOS临界段代码保护" class="headerlink" title="FreeRTOS临界段代码保护"></a>FreeRTOS临界段代码保护</h2><table><thead><tr><th>函数/宏</th><th>描述</th></tr></thead><tbody><tr><td>taskENTER_CRITICAL()</td><td>任务级进入临界段</td></tr><tr><td>taskEXIT_CRITICAL()</td><td>任务级退出临界段</td></tr><tr><td>taskENTER_CRITICAL_FROME_ISR()</td><td>中断级进入临界段（中断优先级不能高于configMAX_SYSCALL_INTERRUPT_PRIORITY）</td></tr><tr><td>taskEXIT_CRITICAL_FROM_ISR()</td><td>中断级退出临界段</td></tr></tbody></table><h2 id="FreeRTOS列表（双向循环链表）和列表项"><a href="#FreeRTOS列表（双向循环链表）和列表项" class="headerlink" title="FreeRTOS列表（双向循环链表）和列表项"></a>FreeRTOS列表（双向循环链表）和列表项</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">xLIST</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">listFIRST_LIST_INTEGRITY_CHECK_VALUE<span class="comment">//用来检查列表的完整性</span></span><br><span class="line">configLIST_VOLATILE UBaseType_t uxNumberOfItems;<span class="comment">//记录列表中列表项的数量</span></span><br><span class="line">ListItem_t * configLIST_VOLATILE pxIndex;<span class="comment">//记录最新的列表项，用于遍历列表</span></span><br><span class="line">MiniListItem_t xListEnd;<span class="comment">//标记列表的最后一项</span></span><br><span class="line">listSECOND_LIST_INTEGRITY_CHECK_VALUE<span class="comment">//用来检查列表的完整性</span></span><br><span class="line">&#125; List_t;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xLIST_ITEM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE</span><br><span class="line">configLIST_VOLATILE TickType_t xItemValue;<span class="comment">//序号，用来对列表项进行排列</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xLIST_ITEM</span> * <span class="title">configLIST_VOLATILE</span> <span class="title">pxNext</span>;</span><span class="comment">//指向下一个列表项</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xLIST_ITEM</span> * <span class="title">configLIST_VOLATILE</span> <span class="title">pxPrevious</span>;</span><span class="comment">//指向前一个列表项</span></span><br><span class="line"><span class="keyword">void</span> * pvOwner;<span class="comment">//指向实际包含有该列表项的对象</span></span><br><span class="line"><span class="keyword">void</span> * configLIST_VOLATILE pvContainer;<span class="comment">//指向此列表项归属的列表</span></span><br><span class="line">listSECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">xLIST_ITEM</span> <span class="title">ListItem_t</span>;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xMINI_LIST_ITEM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE</span><br><span class="line">configLIST_VOLATILE TickType_t xItemValue;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xLIST_ITEM</span> * <span class="title">configLIST_VOLATILE</span> <span class="title">pxNext</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xLIST_ITEM</span> * <span class="title">configLIST_VOLATILE</span> <span class="title">pxPrevious</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">xMINI_LIST_ITEM</span> <span class="title">MiniListItem_t</span>;</span></span><br></pre></td></tr></table></figure><h4 id="列表操作相关API"><a href="#列表操作相关API" class="headerlink" title="列表操作相关API"></a>列表操作相关API</h4><table><thead><tr><th>函数名</th><th>描述</th></tr></thead><tbody><tr><td>void vListInitialise( List_t * const pxList )</td><td>列表初始化</td></tr><tr><td>void vListInitialiseItem( ListItem_t * const pxItem )</td><td>列表项初始化</td></tr><tr><td>void vListInsert( List_t <em> const pxList, ListItem_t </em> const pxNewListItem )</td><td>列表项插入（指定位置）</td></tr><tr><td>void vListInsertEnd( List_t <em> const pxList, ListItem_t </em> const pxNewListItem )</td><td>列表项插入（末尾）</td></tr><tr><td>UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )</td><td>列表项删除</td></tr><tr><td>listGET_OWNER_OF_NEXT_ENTRY(pxTCB,pxList)</td><td>列表的遍历</td></tr></tbody></table><ul><li>vListInsert中，列表项的插入位置是根据列表项中的xItemValue来决定，按照<strong>升序</strong>方式排列，例如xItemValue的值为portMAX_DELAY就表示要插入的位置是列表的最末尾</li><li>vListInsertEnd中，列表项插入的位置是pxList中pxIndex指向的列表项的前面</li><li>uxListRemove函数会返回删除后列表的剩余长度，该函数只是将指定的列表项从列表中删除掉，并不会将这个列表项的内存释放掉</li><li>列表中的成员变量pxIndex是用来便利列表的，每调用一次宏listGET_OWNER_OF_NEXT_ENTRY，列表的pxIndex就会指向下一个列表项，并且返回这个列表项的pxOwner变量值</li></ul><h2 id="FreeRTOS的调度器"><a href="#FreeRTOS的调度器" class="headerlink" title="FreeRTOS的调度器"></a>FreeRTOS的调度器</h2><h4 id="vTaskStartScheduler函数"><a href="#vTaskStartScheduler函数" class="headerlink" title="vTaskStartScheduler函数"></a>vTaskStartScheduler函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vTaskStartScheduler</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BaseType_t xReturn;</span><br><span class="line">BaseType_t i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给每个内核都创建一个空闲任务，优先级设为最低（0），任务名为“IDLE”</span></span><br><span class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;portNUM_PROCESSORS; i++) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( INCLUDE_xTaskGetIdleTaskHandle == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line">xReturn = xTaskCreatePinnedToCore( prvIdleTask, <span class="string">"IDLE"</span>, tskIDLE_STACK_SIZE, ( <span class="keyword">void</span> * ) <span class="literal">NULL</span>, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &amp;xIdleTaskHandle[i], i ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">&#123;</span><br><span class="line">xReturn = xTaskCreatePinnedToCore( prvIdleTask, <span class="string">"IDLE"</span>, tskIDLE_STACK_SIZE, ( <span class="keyword">void</span> * ) <span class="literal">NULL</span>, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), <span class="literal">NULL</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* INCLUDE_xTaskGetIdleTaskHandle */</span><span class="comment">/* Event lists are always in priority order. */</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建软件定时器任务，任务名为“Tmr Svc”，此任务只在内核0上运行</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_TIMERS == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( xReturn == pdPASS )</span><br><span class="line">&#123;</span><br><span class="line">xReturn = xTimerCreateTimerTask();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* configUSE_TIMERS */</span></span></span><br><span class="line"><span class="keyword">if</span>( xReturn == pdPASS )</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//在开启调度器之前不允许被中断打扰，在这里将中断关闭。之前创建的任务堆栈中包含有一个状态字，指示这中断是打开状态，所以当第一个任务运行起来后，中断将会再一次被开启。</span></span><br><span class="line">portDISABLE_INTERRUPTS();</span><br><span class="line">xTickCount = ( TickType_t ) <span class="number">0U</span>;</span><br><span class="line"><span class="comment">//如果需要使用时间统计功能，下面的这个宏需要用户自定义（配置一个计数器或定时器）</span></span><br><span class="line">portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();</span><br><span class="line">xSchedulerRunning = pdTRUE;<span class="comment">//表示调度器开始运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化相关硬件：滴答定时器等，这需要用户自行实现</span></span><br><span class="line"><span class="keyword">if</span>( xPortStartScheduler() != pdFALSE )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//一旦调度器起来后就永远不会执行到这里</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//只有调用了xTaskEndScheduler函数后才会执行到这里</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果创建空闲任务或者定时器任务时内存不够就会执行到这里</span></span><br><span class="line">configASSERT( xReturn );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xPortStartScheduler函数"><a href="#xPortStartScheduler函数" class="headerlink" title="xPortStartScheduler函数"></a>xPortStartScheduler函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BaseType_t <span class="title">xPortStartScheduler</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> XCHAL_CP_NUM &gt; 0</span></span><br><span class="line"><span class="comment">//初始化任务的协处理器</span></span><br><span class="line">_xt_coproc_init();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">//初始化滴答计数器的分频系数</span></span><br><span class="line">_xt_tick_divisor_init();</span><br><span class="line"><span class="comment">//配置、使能滴答计数器</span></span><br><span class="line">_frxt_tick_timer_init();</span><br><span class="line">port_xSchedulerRunning[xPortGetCoreID()] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//_frxt_dispatch函数不能直接用C语言调用。调度最高优先级的任务</span></span><br><span class="line">__<span class="function">asm__ <span class="title">volatile</span> <span class="params">(<span class="string">"call0    _frxt_dispatch\n"</span>)</span></span>;</span><br><span class="line"><span class="comment">//永远不会返回</span></span><br><span class="line"><span class="keyword">return</span> pdTRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xTaskCreatePinnedToCore函数"><a href="#xTaskCreatePinnedToCore函数" class="headerlink" title="xTaskCreatePinnedToCore函数"></a>xTaskCreatePinnedToCore函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在某个具体的核上创建任务</span></span><br><span class="line"><span class="function">BaseType_t <span class="title">xTaskCreatePinnedToCore</span><span class="params">(TaskFunction_t pxTaskCode,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">char</span> * <span class="keyword">const</span> pcName,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">uint32_t</span> usStackDepth,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">void</span> * <span class="keyword">const</span> pvParameters,</span></span></span><br><span class="line"><span class="function"><span class="params">UBaseType_t uxPriority,</span></span></span><br><span class="line"><span class="function"><span class="params">TaskHandle_t * <span class="keyword">const</span> pxCreatedTask,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">const</span> BaseType_t xCoreID )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TCB_t *pxNewTCB;</span><br><span class="line">    BaseType_t xReturn;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果任务栈向上生长，那么先开辟任务控制块TCB的内存，再开辟任务栈的内存，任务栈的地址保存在TCB中</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span>( portSTACK_GROWTH &gt; 0 )</span></span><br><span class="line">    &#123;</span><br><span class="line">        pxNewTCB = ( TCB_t * ) pvPortMallocTcbMem( <span class="keyword">sizeof</span>( TCB_t ) );</span><br><span class="line">        <span class="keyword">if</span>( pxNewTCB != <span class="literal">NULL</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            pxNewTCB-&gt;pxStack = ( StackType_t * ) pvPortMallocStackMem( ( ( ( <span class="keyword">size_t</span> ) usStackDepth ) * <span class="keyword">sizeof</span>( StackType_t ) ) ); </span><br><span class="line">            <span class="keyword">if</span>( pxNewTCB-&gt;pxStack == <span class="literal">NULL</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                vPortFree( pxNewTCB );</span><br><span class="line">                pxNewTCB = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="comment">//如果任务栈向下生长，那么先开辟任务栈的内存，再开辟任务控制块TCB的内存，任务栈的地址保存在TCB中</span></span><br><span class="line">    &#123;</span><br><span class="line">        StackType_t *pxStack;</span><br><span class="line">        pxStack = ( StackType_t * ) pvPortMallocStackMem( ( ( ( <span class="keyword">size_t</span> ) usStackDepth ) * <span class="keyword">sizeof</span>( StackType_t ) ) );</span><br><span class="line">        <span class="keyword">if</span>( pxStack != <span class="literal">NULL</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            pxNewTCB = ( TCB_t * ) pvPortMallocTcbMem( <span class="keyword">sizeof</span>( TCB_t ) ); </span><br><span class="line">            <span class="keyword">if</span>( pxNewTCB != <span class="literal">NULL</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                pxNewTCB-&gt;pxStack = pxStack;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                vPortFree( pxStack );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pxNewTCB = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* portSTACK_GROWTH */</span></span></span><br><span class="line">    <span class="keyword">if</span>( pxNewTCB != <span class="literal">NULL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">if</span>( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//标记该任务后期不需要的时候需要删除</span></span><br><span class="line">            pxNewTCB-&gt;ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* configSUPPORT_STATIC_ALLOCATION */</span></span></span><br><span class="line"><span class="comment">//初始化任务</span></span><br><span class="line">        prvInitialiseNewTask( pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, <span class="literal">NULL</span>, xCoreID );</span><br><span class="line">        <span class="comment">//将新创建的任务加入就绪列表中</span></span><br><span class="line">        prvAddNewTaskToReadyList( pxNewTCB, pxTaskCode, xCoreID );</span><br><span class="line">        xReturn = pdPASS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> xReturn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="prvInitialiseNewTask函数"><a href="#prvInitialiseNewTask函数" class="headerlink" title="prvInitialiseNewTask函数"></a>prvInitialiseNewTask函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prvInitialiseNewTask</span><span class="params">( TaskFunction_t pxTaskCode,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">char</span> * <span class="keyword">const</span> pcName,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">uint32_t</span> ulStackDepth,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">void</span> * <span class="keyword">const</span> pvParameters,</span></span></span><br><span class="line"><span class="function"><span class="params">UBaseType_t uxPriority,</span></span></span><br><span class="line"><span class="function"><span class="params">TaskHandle_t * <span class="keyword">const</span> pxCreatedTask,</span></span></span><br><span class="line"><span class="function"><span class="params">TCB_t *pxNewTCB,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> MemoryRegion_t * <span class="keyword">const</span> xRegions, <span class="keyword">const</span> BaseType_t xCoreID )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StackType_t *pxTopOfStack;</span><br><span class="line">UBaseType_t x;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>( portUSING_MPU_WRAPPERS == 1 )</span></span><br><span class="line"><span class="comment">//任务使用特权模式创建任务</span></span><br><span class="line">BaseType_t xRunPrivileged;</span><br><span class="line"><span class="keyword">if</span>( ( uxPriority &amp; portPRIVILEGE_BIT ) != <span class="number">0U</span> )</span><br><span class="line">&#123;</span><br><span class="line">xRunPrivileged = pdTRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">xRunPrivileged = pdFALSE;</span><br><span class="line">&#125;</span><br><span class="line">uxPriority &amp;= ~portPRIVILEGE_BIT;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* portUSING_MPU_WRAPPERS == 1 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>( ( configCHECK_FOR_STACK_OVERFLOW &gt; 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将任务栈初始化相同的值(0xA5)</span></span><br><span class="line">( <span class="keyword">void</span> ) <span class="built_in">memset</span>( pxNewTCB-&gt;pxStack, ( <span class="keyword">int</span> ) tskSTACK_FILL_BYTE, ( <span class="keyword">size_t</span> ) ulStackDepth * <span class="keyword">sizeof</span>( StackType_t ) );</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">//根据栈的不同生长方向来计算栈顶位置</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>( portSTACK_GROWTH &lt; 0 )</span></span><br><span class="line">&#123;</span><br><span class="line">pxTopOfStack = pxNewTCB-&gt;pxStack + ( ulStackDepth - ( <span class="keyword">uint32_t</span> ) <span class="number">1</span> );</span><br><span class="line">pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) &amp; ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); </span><br><span class="line"></span><br><span class="line"><span class="comment">//检查堆栈栈顶地址是否字节对齐</span></span><br><span class="line">configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack &amp; ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == <span class="number">0U</span>L ) );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configENABLE_TASK_SNAPSHOT == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line">pxNewTCB-&gt;pxEndOfStack = pxTopOfStack;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* portSTACK_GROWTH */</span></span></span><br><span class="line">&#123;</span><br><span class="line">pxTopOfStack = pxNewTCB-&gt;pxStack;</span><br><span class="line">configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB-&gt;pxStack &amp; ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == <span class="number">0U</span>L ) );</span><br><span class="line">pxNewTCB-&gt;pxEndOfStack = pxNewTCB-&gt;pxStack + ( ulStackDepth - ( <span class="keyword">uint32_t</span> ) <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* portSTACK_GROWTH */</span></span></span><br><span class="line"><span class="comment">//保存任务的任务名</span></span><br><span class="line"><span class="keyword">for</span>( x = ( UBaseType_t ) <span class="number">0</span>; x &lt; ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )</span><br><span class="line">&#123;</span><br><span class="line">pxNewTCB-&gt;pcTaskName[ x ] = pcName[ x ];</span><br><span class="line"><span class="keyword">if</span>( pcName[ x ] == <span class="number">0x00</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//任务名太长需要截断</span></span><br><span class="line">pxNewTCB-&gt;pcTaskName[ configMAX_TASK_NAME_LEN - <span class="number">1</span> ] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="comment">//修正不合法的优先级</span></span><br><span class="line"><span class="keyword">if</span>( uxPriority &gt;= ( UBaseType_t ) configMAX_PRIORITIES )</span><br><span class="line">&#123;</span><br><span class="line">uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) <span class="number">1U</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">pxNewTCB-&gt;uxPriority = uxPriority;<span class="comment">//初始化任务控制块的优先级字段</span></span><br><span class="line">pxNewTCB-&gt;xCoreID = xCoreID;<span class="comment">//初始化任务所在的内核ID号</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_MUTEXES == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line">pxNewTCB-&gt;uxBasePriority = uxPriority;<span class="comment">//如果使用了互斥信号量，就需要指定基础优先级</span></span><br><span class="line">pxNewTCB-&gt;uxMutexesHeld = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* configUSE_MUTEXES */</span></span></span><br><span class="line"></span><br><span class="line">vListInitialiseItem( &amp;( pxNewTCB-&gt;xGenericListItem ) );<span class="comment">//初始化通用列表项</span></span><br><span class="line">vListInitialiseItem( &amp;( pxNewTCB-&gt;xEventListItem ) );<span class="comment">//初始化事件列表项</span></span><br><span class="line">listSET_LIST_ITEM_OWNER( &amp;( pxNewTCB-&gt;xGenericListItem ), pxNewTCB );<span class="comment">//设置列表项归属</span></span><br><span class="line">listSET_LIST_ITEM_VALUE( &amp;( pxNewTCB-&gt;xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );<span class="comment">//设置事件列表项的值使得优先级从小到大排列</span></span><br><span class="line">listSET_LIST_ITEM_OWNER( &amp;( pxNewTCB-&gt;xEventListItem ), pxNewTCB );<span class="comment">//设置列表项归属</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( portCRITICAL_NESTING_IN_TCB == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line">pxNewTCB-&gt;uxCriticalNesting = ( UBaseType_t ) <span class="number">0U</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* portCRITICAL_NESTING_IN_TCB */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_APPLICATION_TASK_TAG == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line">pxNewTCB-&gt;pxTaskTag = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* configUSE_APPLICATION_TASK_TAG */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configGENERATE_RUN_TIME_STATS == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line">pxNewTCB-&gt;ulRunTimeCounter = <span class="number">0U</span>L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* configGENERATE_RUN_TIME_STATS */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( portUSING_MPU_WRAPPERS == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line">vPortStoreTaskMPUSettings( &amp;( pxNewTCB-&gt;xMPUSettings ), xRegions, pxNewTCB-&gt;pxStack, ulStackDepth );</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* Avoid compiler warning about unreferenced parameter. */</span></span><br><span class="line">( <span class="keyword">void</span> ) xRegions;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>( x = <span class="number">0</span>; x &lt; ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )</span><br><span class="line">&#123;</span><br><span class="line">pxNewTCB-&gt;pvThreadLocalStoragePointers[ x ] = <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configTHREAD_LOCAL_STORAGE_DELETE_CALLBACKS == 1)</span></span><br><span class="line">pxNewTCB-&gt;pvThreadLocalStoragePointersDelCallback[ x ] = <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_TASK_NOTIFICATIONS == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line">pxNewTCB-&gt;ulNotifiedValue = <span class="number">0</span>;</span><br><span class="line">pxNewTCB-&gt;eNotifyState = eNotWaitingNotification;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_NEWLIB_REENTRANT == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* Initialise this task's Newlib reent structure. */</span></span><br><span class="line">esp_reent_init(&amp;pxNewTCB-&gt;xNewLib_reent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>( INCLUDE_xTaskAbortDelay == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line">pxNewTCB-&gt;ucDelayAborted = pdFALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>( portUSING_MPU_WRAPPERS == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line">pxNewTCB-&gt;pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* portUSING_MPU_WRAPPERS */</span></span></span><br><span class="line">&#123;</span><br><span class="line">pxNewTCB-&gt;pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );<span class="comment">//初始化任务堆栈</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* portUSING_MPU_WRAPPERS */</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( ( <span class="keyword">void</span> * ) pxCreatedTask != <span class="literal">NULL</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//任务句柄其实就是任务控制块的地址</span></span><br><span class="line">*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="pxPortInitialiseStack函数"><a href="#pxPortInitialiseStack函数" class="headerlink" title="pxPortInitialiseStack函数"></a>pxPortInitialiseStack函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">StackType_t *<span class="title">pxPortInitialiseStack</span><span class="params">( StackType_t *pxTopOfStack, TaskFunction_t pxCode, <span class="keyword">void</span> *pvParameters )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StackType_t *sp, *tp;</span><br><span class="line">XtExcFrame  *frame;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> XCHAL_CP_NUM &gt; 0</span></span><br><span class="line"><span class="keyword">uint32_t</span> *p;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">uint32_t</span> *threadptr;</span><br><span class="line"><span class="keyword">void</span> *task_thread_local_start;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> _thread_local_start, _thread_local_end, _rodata_start;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> check that TLS area fits the stack</span></span><br><span class="line"><span class="keyword">uint32_t</span> thread_local_sz = (<span class="keyword">uint8_t</span> *)&amp;_thread_local_end - (<span class="keyword">uint8_t</span> *)&amp;_thread_local_start;</span><br><span class="line"></span><br><span class="line">thread_local_sz = ALIGNUP(<span class="number">0x10</span>, thread_local_sz);</span><br><span class="line"><span class="comment">/* 初始化任务堆栈，使之从高地址开始往下依次是：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">----LOW ADDRESSES ----------------------------------------HIGH ADDRESSES----------</span></span><br><span class="line"><span class="comment">task stack | interrupt stack frame | thread local vars | co-processor save area |</span></span><br><span class="line"><span class="comment">----------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">           ||</span></span><br><span class="line"><span class="comment">   SP                             pxTopOfStack</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">sp = (StackType_t *) (((UBaseType_t)(pxTopOfStack + <span class="number">1</span>) - XT_CP_SIZE - thread_local_sz - XT_STK_FRMSZ) &amp; ~<span class="number">0xf</span>);<span class="comment">//16字节对齐</span></span><br><span class="line"><span class="keyword">for</span> (tp = sp; tp &lt;= pxTopOfStack; ++tp)<span class="comment">//将sp到TopOfStack之间的内存清零</span></span><br><span class="line">*tp = <span class="number">0</span>;</span><br><span class="line">frame = (XtExcFrame *) sp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对一些必要的寄存赋值 */</span></span><br><span class="line">frame-&gt;pc   = (UBaseType_t) pxCode;             <span class="comment">//PC指针初始化为任务函数的入口地址</span></span><br><span class="line">frame-&gt;a0   = <span class="number">0</span>;                                <span class="comment">//组织GDB回溯</span></span><br><span class="line">frame-&gt;a1   = (UBaseType_t) sp + XT_STK_FRMSZ;  </span><br><span class="line">frame-&gt;<span class="built_in">exit</span> = (UBaseType_t) _xt_user_exit;      </span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set initial PS to int level 0, EXCM disabled ('rfe' will enable), user mode. */</span></span><br><span class="line"><span class="comment">/* Also set entry point argument parameter. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __XTENSA_CALL0_ABI__</span></span><br><span class="line">frame-&gt;a2 = (UBaseType_t) pvParameters;</span><br><span class="line">frame-&gt;ps = PS_UM | PS_EXCM;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="comment">/* + for windowed ABI also set WOE and CALLINC (pretend task was 'call4'd). */</span></span><br><span class="line">frame-&gt;a6 = (UBaseType_t) pvParameters;</span><br><span class="line">frame-&gt;ps = PS_UM | PS_EXCM | PS_WOE | PS_CALLINC(<span class="number">1</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> XT_USE_SWPRI</span></span><br><span class="line"><span class="comment">/* Set the initial virtual priority mask value to all 1's. */</span></span><br><span class="line">frame-&gt;vpri = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Init threadptr reg and TLS vars */</span></span><br><span class="line">task_thread_local_start = (<span class="keyword">void</span> *)(((<span class="keyword">uint32_t</span>)pxTopOfStack - XT_CP_SIZE - thread_local_sz) &amp; ~<span class="number">0xf</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(task_thread_local_start, &amp;_thread_local_start, thread_local_sz);</span><br><span class="line">threadptr = (<span class="keyword">uint32_t</span> *)(sp + XT_STK_EXTRA);</span><br><span class="line"><span class="comment">/* shift threadptr by the offset of _thread_local_start from DROM start;</span></span><br><span class="line"><span class="comment">   need to take into account extra 16 bytes offset */</span></span><br><span class="line">*threadptr = (<span class="keyword">uint32_t</span>)task_thread_local_start - ((<span class="keyword">uint32_t</span>)&amp;_thread_local_start - (<span class="keyword">uint32_t</span>)&amp;_rodata_start) - <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> XCHAL_CP_NUM &gt; 0</span></span><br><span class="line"><span class="comment">/* Init the coprocessor save area (see xtensa_context.h) */</span></span><br><span class="line">p = (<span class="keyword">uint32_t</span> *)(((<span class="keyword">uint32_t</span>) pxTopOfStack - XT_CP_SIZE) &amp; ~<span class="number">0xf</span>);</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">p[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">p[<span class="number">2</span>] = (((<span class="keyword">uint32_t</span>) p) + <span class="number">12</span> + XCHAL_TOTAL_SA_ALIGN - <span class="number">1</span>) &amp; -XCHAL_TOTAL_SA_ALIGN;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="prvAddNewTaskToReadyList函数"><a href="#prvAddNewTaskToReadyList函数" class="headerlink" title="prvAddNewTaskToReadyList函数"></a>prvAddNewTaskToReadyList函数</h4><blockquote><p>FreeRTOS使用不同的列表来表示任务的不同状态</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prvAddNewTaskToReadyList</span><span class="params">( TCB_t *pxNewTCB, TaskFunction_t pxTaskCode, BaseType_t xCoreID )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCB_t *curTCB, *tcb0, *tcb1;</span><br><span class="line">configASSERT( xCoreID == tskNO_AFFINITY || xCoreID &lt; portNUM_PROCESSORS);</span><br><span class="line">    <span class="comment">//确保列表在被更新的过程中不会被中断打断</span></span><br><span class="line">taskENTER_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">&#123;</span><br><span class="line">uxCurrentNumberOfTasks++;<span class="comment">//全局变量，统计任务数量</span></span><br><span class="line"><span class="comment">//判断这个任务在哪个内核上运行</span></span><br><span class="line"><span class="keyword">if</span> ( xCoreID == tskNO_AFFINITY )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ( portNUM_PROCESSORS == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">xCoreID = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">tcb0 = pxCurrentTCB[<span class="number">0</span>];</span><br><span class="line">tcb1 = pxCurrentTCB[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> ( tcb0 == <span class="literal">NULL</span> )</span><br><span class="line">&#123;</span><br><span class="line">xCoreID = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( tcb1 == <span class="literal">NULL</span> )</span><br><span class="line">&#123;</span><br><span class="line">xCoreID = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( tcb0-&gt;uxPriority &lt; pxNewTCB-&gt;uxPriority &amp;&amp; tcb0-&gt;uxPriority &lt; tcb1-&gt;uxPriority )</span><br><span class="line">&#123;</span><br><span class="line">xCoreID = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( tcb1-&gt;uxPriority &lt; pxNewTCB-&gt;uxPriority )</span><br><span class="line">&#123;</span><br><span class="line">xCoreID = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//两个核上的运行的任务，其优先级都比新的任务要高</span></span><br><span class="line">&#123;</span><br><span class="line">xCoreID = xPortGetCoreID();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当前的核上没有任务正在运行</span></span><br><span class="line"><span class="keyword">if</span>( pxCurrentTCB[ xCoreID ] == <span class="literal">NULL</span> )</span><br><span class="line">&#123;</span><br><span class="line">pxCurrentTCB[ xCoreID ] = pxNewTCB;</span><br><span class="line"><span class="keyword">if</span>( uxCurrentNumberOfTasks == ( UBaseType_t ) <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> portFIRST_TASK_HOOK</span></span><br><span class="line"><span class="keyword">if</span> ( xPortGetCoreID() == <span class="number">0</span> ) &#123;</span><br><span class="line">vPortFirstTaskHook(pxTaskCode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* configFIRST_TASK_HOOK */</span></span></span><br><span class="line"><span class="comment">//正在创建的任务是第一个任务，那么需要先初始化相应的列表</span></span><br><span class="line">prvInitialiseTaskLists();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( xSchedulerRunning == pdFALSE )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//新任务的优先级比正在运行的任务优先级高</span></span><br><span class="line"><span class="keyword">if</span> ( pxCurrentTCB[xCoreID] == <span class="literal">NULL</span> || pxCurrentTCB[xCoreID]-&gt;uxPriority &lt;= pxNewTCB-&gt;uxPriority )</span><br><span class="line">&#123;</span><br><span class="line">pxCurrentTCB[xCoreID] = pxNewTCB;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">uxTaskNumber++;<span class="comment">//uxTaskNumber加1，用作任务控制块编号</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_TRACE_FACILITY == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line">pxNewTCB-&gt;uxTCBNumber = uxTaskNumber;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* configUSE_TRACE_FACILITY */</span></span></span><br><span class="line">traceTASK_CREATE( pxNewTCB );</span><br><span class="line"></span><br><span class="line">prvAddTaskToReadyList( pxNewTCB );</span><br><span class="line"></span><br><span class="line">portSETUP_TCB( pxNewTCB );</span><br><span class="line">&#125;</span><br><span class="line">taskEXIT_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line"><span class="keyword">if</span>( xSchedulerRunning != pdFALSE )</span><br><span class="line">&#123;</span><br><span class="line">taskENTER_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">curTCB = pxCurrentTCB[ xCoreID ];</span><br><span class="line">        <span class="comment">//如果新任务的任务优先级最高，而且调度器已经开始正常运行了，那么就执行任务切换</span></span><br><span class="line"><span class="keyword">if</span>( curTCB == <span class="literal">NULL</span> || curTCB-&gt;uxPriority &lt; pxNewTCB-&gt;uxPriority )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( xCoreID == xPortGetCoreID() )</span><br><span class="line">&#123;</span><br><span class="line">taskYIELD_IF_USING_PREEMPTION();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">taskYIELD_OTHER_CORE(xCoreID, pxNewTCB-&gt;uxPriority);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">taskEXIT_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="prvAddTaskToReadyList宏"><a href="#prvAddTaskToReadyList宏" class="headerlink" title="prvAddTaskToReadyList宏"></a>prvAddTaskToReadyList宏</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> prvAddTaskToReadyList( pxTCB )\</span></span><br><span class="line">traceMOVED_TASK_TO_READY_STATE( pxTCB );\</span><br><span class="line">taskRECORD_READY_PRIORITY( ( pxTCB )-&gt;uxPriority );\</span><br><span class="line">vListInsertEnd( &amp;( pxReadyTasksLists[ ( pxTCB )-&gt;uxPriority ] ), &amp;( ( pxTCB )-&gt;xGenericListItem ) )<span class="comment">//将任务添加到就绪列表的末尾</span></span><br></pre></td></tr></table></figure><h4 id="vTaskDelete函数"><a href="#vTaskDelete函数" class="headerlink" title="vTaskDelete函数"></a>vTaskDelete函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vTaskDelete</span><span class="params">( TaskHandle_t xTaskToDelete )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TCB_t *pxTCB;</span><br><span class="line">    <span class="keyword">int</span> core = xPortGetCoreID();</span><br><span class="line">    UBaseType_t free_now;</span><br><span class="line"></span><br><span class="line">    taskENTER_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">    &#123;</span><br><span class="line">        pxTCB = prvGetTCBFromHandle( xTaskToDelete );<span class="comment">//根据任务句柄获取TCB指针</span></span><br><span class="line">        <span class="comment">//将任务从就绪列表中删除</span></span><br><span class="line">        <span class="keyword">if</span>( uxListRemove( &amp;( pxTCB-&gt;xGenericListItem ) ) == ( UBaseType_t ) <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            taskRESET_READY_PRIORITY( pxTCB-&gt;uxPriority );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            mtCOVERAGE_TEST_MARKER();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断该任务是否在等待某个事件，如果是这样，则这个任务会被放到相应的列表中，这里需要将其移除</span></span><br><span class="line">        <span class="keyword">if</span>( listLIST_ITEM_CONTAINER( &amp;( pxTCB-&gt;xEventListItem ) ) != <span class="literal">NULL</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            ( <span class="keyword">void</span> ) uxListRemove( &amp;( pxTCB-&gt;xEventListItem ) );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            mtCOVERAGE_TEST_MARKER();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发调试器刷新任务列表</span></span><br><span class="line">        uxTaskNumber++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被删除的任务是正在运行的任务，或者在别的核，那么就交给空闲任务来释放内存</span></span><br><span class="line">        <span class="keyword">if</span>( pxTCB == pxCurrentTCB[ core ] ||</span><br><span class="line">           (portNUM_PROCESSORS &gt; <span class="number">1</span> &amp;&amp; pxTCB == pxCurrentTCB[ !core ]) ||</span><br><span class="line">           (portNUM_PROCESSORS &gt; <span class="number">1</span> &amp;&amp; pxTCB-&gt;xCoreID == (!core)) )</span><br><span class="line">        &#123;</span><br><span class="line">            vListInsertEnd( &amp;xTasksWaitingTermination, &amp;( pxTCB-&gt;xGenericListItem ) );</span><br><span class="line">            ++uxTasksDeleted;</span><br><span class="line">            portPRE_TASK_DELETE_HOOK( pxTCB, &amp;xYieldPending[xPortGetCoreID()] );<span class="comment">//调用任务删除钩子函数</span></span><br><span class="line">            free_now = pdFALSE;<span class="comment">//不能立即释放内存</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//要删除的任务不是当前运行的，也不在别的核上</span></span><br><span class="line">        &#123;</span><br><span class="line">            --uxCurrentNumberOfTasks;</span><br><span class="line">            <span class="comment">//重新计算一下还要多长时间执行下一个任务，也就是下一个任务的解锁时间，防止有的任务的解锁时间参考了刚刚被删除的那个任务</span></span><br><span class="line">            prvResetNextTaskUnblockTime();</span><br><span class="line">            free_now = pdTRUE;</span><br><span class="line">        &#125;</span><br><span class="line">        traceTASK_DELETE( pxTCB );</span><br><span class="line">    &#125;</span><br><span class="line">    taskEXIT_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(free_now == pdTRUE)&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">if</span> ( configNUM_THREAD_LOCAL_STORAGE_POINTERS &gt; 0 ) &amp;&amp; ( configTHREAD_LOCAL_STORAGE_DELETE_CALLBACKS )</span></span><br><span class="line">        prvDeleteTLS( pxTCB );<span class="comment">//Run deletion callbacks before deleting TCB</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        prvDeleteTCB( pxTCB );<span class="comment">//Must only be called after del cb</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果删除的是正在运行的任务，那么删除完以后肯定需要强制进行一次任务切换</span></span><br><span class="line">    <span class="keyword">if</span>( xSchedulerRunning != pdFALSE )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( pxTCB == pxCurrentTCB[ core ] )</span><br><span class="line">        &#123;</span><br><span class="line">            configASSERT( uxSchedulerSuspended[ core ] == <span class="number">0</span> );</span><br><span class="line">            portPRE_TASK_DELETE_HOOK( pxTCB, &amp;xYieldPending[xPortGetCoreID()] );</span><br><span class="line">            portYIELD_WITHIN_API();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( portNUM_PROCESSORS &gt; <span class="number">1</span> &amp;&amp; pxTCB == pxCurrentTCB[ !core] )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果被删除的任务正在另外一个核上运行，强制另外一个核做任务切换</span></span><br><span class="line">            vPortYieldOtherCore( !core );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            mtCOVERAGE_TEST_MARKER();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vTaskSuspend函数"><a href="#vTaskSuspend函数" class="headerlink" title="vTaskSuspend函数"></a>vTaskSuspend函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vTaskSuspend</span><span class="params">( TaskHandle_t xTaskToSuspend )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TCB_t *pxTCB;</span><br><span class="line">    TCB_t *curTCB;</span><br><span class="line"></span><br><span class="line">    taskENTER_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">    &#123;</span><br><span class="line">        pxTCB = prvGetTCBFromHandle( xTaskToSuspend );</span><br><span class="line">        traceTASK_SUSPEND( pxTCB );</span><br><span class="line">        <span class="comment">//将任务从就绪列表中删除</span></span><br><span class="line">        <span class="keyword">if</span>( uxListRemove( &amp;( pxTCB-&gt;xGenericListItem ) ) == ( UBaseType_t ) <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            taskRESET_READY_PRIORITY( pxTCB-&gt;uxPriority );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            mtCOVERAGE_TEST_MARKER();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将任务从事件列表中删除</span></span><br><span class="line">        <span class="keyword">if</span>( listLIST_ITEM_CONTAINER( &amp;( pxTCB-&gt;xEventListItem ) ) != <span class="literal">NULL</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            ( <span class="keyword">void</span> ) uxListRemove( &amp;( pxTCB-&gt;xEventListItem ) );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            mtCOVERAGE_TEST_MARKER();</span><br><span class="line">        &#125;</span><br><span class="line">        traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);</span><br><span class="line">        <span class="comment">//将任务添加到挂起列表的最后</span></span><br><span class="line">        vListInsertEnd( &amp;xSuspendedTaskList, &amp;( pxTCB-&gt;xGenericListItem ) );</span><br><span class="line">        curTCB = pxCurrentTCB[ xPortGetCoreID() ];</span><br><span class="line">    &#125;</span><br><span class="line">    taskEXIT_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( pxTCB == curTCB )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( xSchedulerRunning != pdFALSE )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//确保当前核的任务调度器工作正常</span></span><br><span class="line">            configASSERT( uxSchedulerSuspended[ xPortGetCoreID() ] == <span class="number">0</span> );</span><br><span class="line">            portYIELD_WITHIN_API();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//任务调度器不在工作，只能手动查找下一个要运行的任务</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//所有的任务都被挂起，事实上这种情况几乎不存在，除非在空闲任务中调用了阻塞的API</span></span><br><span class="line">            <span class="keyword">if</span>( listCURRENT_LIST_LENGTH( &amp;xSuspendedTaskList ) == uxCurrentNumberOfTasks )</span><br><span class="line">            &#123;</span><br><span class="line">                taskENTER_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">                pxCurrentTCB[ xPortGetCoreID() ] = <span class="literal">NULL</span>;</span><br><span class="line">                taskEXIT_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//获取下一个要运行的任务</span></span><br><span class="line">                vTaskSwitchContext();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( xSchedulerRunning != pdFALSE )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果被挂起的任务当前不在运行，重新计算一下还要多长时间执行下一个任务，防止有的任务的解锁时间参考了刚刚被挂起的任务</span></span><br><span class="line">            taskENTER_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">            &#123;</span><br><span class="line">                prvResetNextTaskUnblockTime();</span><br><span class="line">            &#125;</span><br><span class="line">            taskEXIT_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            mtCOVERAGE_TEST_MARKER();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vTaskResume函数"><a href="#vTaskResume函数" class="headerlink" title="vTaskResume函数"></a>vTaskResume函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vTaskResume</span><span class="params">( TaskHandle_t xTaskToResume )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TCB_t * <span class="keyword">const</span> pxTCB = ( TCB_t * ) xTaskToResume;</span><br><span class="line"></span><br><span class="line">    configASSERT( xTaskToResume );</span><br><span class="line">    taskENTER_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">    <span class="comment">//xTaskToResume不能为NULL，也不应该存在恢复当前正在运行的任务这种情况</span></span><br><span class="line">    <span class="keyword">if</span>( ( pxTCB != <span class="literal">NULL</span> ) &amp;&amp; ( pxTCB != pxCurrentTCB[ xPortGetCoreID() ] ) )</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )</span><br><span class="line">            &#123;</span><br><span class="line">                traceTASK_RESUME( pxTCB );</span><br><span class="line">                <span class="comment">//将要恢复的任务从挂起列表中删除</span></span><br><span class="line">                ( <span class="keyword">void</span> ) uxListRemove(  &amp;( pxTCB-&gt;xGenericListItem ) );</span><br><span class="line">                <span class="comment">//将要恢复的任务添加到就绪任务列表中</span></span><br><span class="line">                prvAddTaskToReadyList( pxTCB );</span><br><span class="line">                <span class="comment">//如果被恢复的任务优先级更高</span></span><br><span class="line">                <span class="keyword">if</span>( tskCAN_RUN_HERE(pxTCB-&gt;xCoreID) &amp;&amp; pxTCB-&gt;uxPriority &gt;= pxCurrentTCB[ xPortGetCoreID() ]-&gt;uxPriority )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//这个yield不会让恢复的任务立即运行，但是会刷新就绪列表</span></span><br><span class="line">                    taskYIELD_IF_USING_PREEMPTION();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>( pxTCB-&gt;xCoreID != xPortGetCoreID() )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//被恢复的任务不属于当前的核</span></span><br><span class="line">                    taskYIELD_OTHER_CORE( pxTCB-&gt;xCoreID, pxTCB-&gt;uxPriority );</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    mtCOVERAGE_TEST_MARKER();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mtCOVERAGE_TEST_MARKER();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        mtCOVERAGE_TEST_MARKER();</span><br><span class="line">    &#125;</span><br><span class="line">    taskEXIT_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FreeRTOS任务切换"><a href="#FreeRTOS任务切换" class="headerlink" title="FreeRTOS任务切换"></a>FreeRTOS任务切换</h2><ul><li>FreeRTOS任务切换的场合</li></ul><blockquote><ol><li>执行一个会引起任务切换的API函数，比如<strong>taskYIELD</strong></li><li>系统滴答定时器中断</li></ol></blockquote><ul><li><del>任务切换一般是在PendSV（可挂起的系统调用）中断服务函数里面完成的</del></li></ul><h3 id="执行系统调用"><a href="#执行系统调用" class="headerlink" title="执行系统调用"></a>执行系统调用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> taskYIELD()portYIELD()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> portYIELD()vPortYield()</span></span><br></pre></td></tr></table></figure><h4 id="vPortYield函数"><a href="#vPortYield函数" class="headerlink" title="vPortYield函数"></a>vPortYield函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数void vPortYield(void)使用汇编实现，主要功能是保存待暂停任务的最小现场环境，清除CPENABLE，最后调用_frxt_dispatch函数实现真正的上下文切换</span></span><br><span class="line">    .globl  vPortYield</span><br><span class="line">    .type   vPortYield,@function</span><br><span class="line">    .align  <span class="number">4</span></span><br><span class="line">vPortYield:</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> __XTENSA_CALL0_ABI__</span></span><br><span class="line">    addi    sp,  sp, -XT_SOL_FRMSZ</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    entry   sp,  XT_SOL_FRMSZ</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    rsr     a2,  PS</span><br><span class="line">    s32i    a0,  sp, XT_SOL_PC</span><br><span class="line">    s32i    a2,  sp, XT_SOL_PS</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> __XTENSA_CALL0_ABI__</span></span><br><span class="line">    s32i    a12, sp, XT_SOL_A12         <span class="comment">/* save callee-saved registers      */</span></span><br><span class="line">    s32i    a13, sp, XT_SOL_A13</span><br><span class="line">    s32i    a14, sp, XT_SOL_A14</span><br><span class="line">    s32i    a15, sp, XT_SOL_A15</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="comment">/* Spill register windows. Calling xthal_window_spill() causes extra    */</span></span><br><span class="line">    <span class="comment">/* spills and reloads, so we will set things up to call the _nw version */</span></span><br><span class="line">    <span class="comment">/* instead to save cycles.                                              */</span></span><br><span class="line">    movi    a6,  ~(PS_WOE_MASK|PS_INTLEVEL_MASK)  <span class="comment">/* spills a4-a7 if needed */</span></span><br><span class="line">    <span class="keyword">and</span>     a2,  a2, a6                           <span class="comment">/* clear WOE, INTLEVEL    */</span></span><br><span class="line">    addi    a2,  a2, XCHAL_EXCM_LEVEL             <span class="comment">/* set INTLEVEL           */</span></span><br><span class="line">    wsr     a2,  PS</span><br><span class="line">    rsync</span><br><span class="line">    call0   xthal_window_spill_nw</span><br><span class="line">    l32i    a2,  sp, XT_SOL_PS                    <span class="comment">/* restore PS             */</span></span><br><span class="line">    wsr     a2,  PS</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    rsil    a2,  XCHAL_EXCM_LEVEL       <span class="comment">/* disable low/med interrupts       */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> XCHAL_CP_NUM &gt; 0</span></span><br><span class="line">    <span class="comment">/* Save coprocessor callee-saved state (if any). At this point CPENABLE */</span></span><br><span class="line">    <span class="comment">/* should still reflect which CPs were in use (enabled).                */</span></span><br><span class="line">    call0   _xt_coproc_savecs</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    movi    a2,  pxCurrentTCB</span><br><span class="line">getcoreid a3</span><br><span class="line">addx4a2,  a3, a2</span><br><span class="line">    l32i    a2,  a2, <span class="number">0</span>                  <span class="comment">/* a2 = pxCurrentTCB                */</span></span><br><span class="line">    movi    a3,  <span class="number">0</span></span><br><span class="line">    s32i    a3,  sp, XT_SOL_EXIT        <span class="comment">/* 0 to flag as solicited frame     */</span></span><br><span class="line">    s32i    sp,  a2, TOPOFSTACK_OFFS    <span class="comment">/* pxCurrentTCB-&gt;pxTopOfStack = SP  */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> XCHAL_CP_NUM &gt; 0</span></span><br><span class="line">    <span class="comment">/* Clear CPENABLE, also in task's co-processor state save area. */</span></span><br><span class="line">    l32i    a2,  a2, CP_TOPOFSTACK_OFFS <span class="comment">/* a2 = pxCurrentTCB-&gt;cp_state      */</span></span><br><span class="line">    movi    a3,  <span class="number">0</span></span><br><span class="line">    wsr     a3,  CPENABLE</span><br><span class="line">    beqz    a2,  <span class="number">1f</span></span><br><span class="line">    s16i    a3,  a2, XT_CPENABLE        <span class="comment">/* clear saved cpenable             */</span></span><br><span class="line"><span class="number">1</span>:</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Tail-call dispatcher. */</span></span><br><span class="line">    call0   _frxt_dispatch</span><br><span class="line">    <span class="comment">/* Never reaches here. */</span></span><br></pre></td></tr></table></figure><h4 id="frxt-dispatch函数"><a href="#frxt-dispatch函数" class="headerlink" title="_frxt_dispatch函数"></a>_frxt_dispatch函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该函数的功能是将上下文切换到最高优先级的就绪任务，恢复它的状态，最后将将控制权转交给它</span></span><br><span class="line">    .globl  _frxt_dispatch</span><br><span class="line">    .type   _frxt_dispatch,@function</span><br><span class="line">    .align  <span class="number">4</span></span><br><span class="line">_frxt_dispatch:</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> __XTENSA_CALL0_ABI__</span></span><br><span class="line">    call0   vTaskSwitchContext  <span class="comment">// Get next TCB to resume</span></span><br><span class="line">    movi    a2, pxCurrentTCB</span><br><span class="line">getcoreid a3</span><br><span class="line">addx4a2,  a3, a2</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    call4   vTaskSwitchContext  <span class="comment">// Get next TCB to resume</span></span><br><span class="line">    movi    a2, pxCurrentTCB</span><br><span class="line">getcoreid a3</span><br><span class="line">addx4a2,  a3, a2</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    l32i    a3,  a2, <span class="number">0</span></span><br><span class="line">    l32i    sp,  a3, TOPOFSTACK_OFFS     <span class="comment">/* SP = next_TCB-&gt;pxTopOfStack;  */</span></span><br><span class="line">    s32i    a3,  a2, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Determine the type of stack frame. */</span></span><br><span class="line">    l32i    a2,  sp, XT_STK_EXIT        <span class="comment">/* exit dispatcher or solicited flag */</span></span><br><span class="line">    bnez    a2,  .L_frxt_dispatch_stk</span><br><span class="line"></span><br><span class="line">.L_frxt_dispatch_sol:</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Solicited stack frame. Restore minimal context and return from vPortYield(). */</span></span><br><span class="line">    l32i    a3,  sp, XT_SOL_PS</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> __XTENSA_CALL0_ABI__</span></span><br><span class="line">    l32i    a12, sp, XT_SOL_A12</span><br><span class="line">    l32i    a13, sp, XT_SOL_A13</span><br><span class="line">    l32i    a14, sp, XT_SOL_A14</span><br><span class="line">    l32i    a15, sp, XT_SOL_A15</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    l32i    a0,  sp, XT_SOL_PC</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> XCHAL_CP_NUM &gt; 0</span></span><br><span class="line">    <span class="comment">/* Ensure wsr.CPENABLE is complete (should be, it was cleared on entry). */</span></span><br><span class="line">    rsync</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* As soons as PS is restored, interrupts can happen. No need to sync PS. */</span></span><br><span class="line">    wsr     a3,  PS</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> __XTENSA_CALL0_ABI__</span></span><br><span class="line">    addi    sp,  sp, XT_SOL_FRMSZ</span><br><span class="line">    ret</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    retw</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">.L_frxt_dispatch_stk:</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> XCHAL_CP_NUM &gt; 0</span></span><br><span class="line">    <span class="comment">/* Restore CPENABLE from task's co-processor save area. */</span></span><br><span class="line">    movi    a3, pxCurrentTCB            <span class="comment">/* cp_state =                       */</span></span><br><span class="line">getcoreid a2</span><br><span class="line">addx4a3,  a2, a3</span><br><span class="line">    l32i    a3, a3, <span class="number">0</span></span><br><span class="line">    l32i    a2, a3, CP_TOPOFSTACK_OFFS     <span class="comment">/* StackType_t                       *pxStack; */</span></span><br><span class="line">    l16ui   a3, a2, XT_CPENABLE         <span class="comment">/* CPENABLE = cp_state-&gt;cpenable;   */</span></span><br><span class="line">    wsr     a3, CPENABLE</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Interrupt stack frame. Restore full context and return to exit dispatcher. */</span></span><br><span class="line">    call0   _xt_context_restore</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* In Call0 ABI, restore callee-saved regs (A12, A13 already restored). */</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> __XTENSA_CALL0_ABI__</span></span><br><span class="line">    l32i    a14, sp, XT_STK_A14</span><br><span class="line">    l32i    a15, sp, XT_STK_A15</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> XCHAL_CP_NUM &gt; 0</span></span><br><span class="line">    <span class="comment">/* Ensure wsr.CPENABLE has completed. */</span></span><br><span class="line">    rsync</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Must return via the exit dispatcher corresponding to the entrypoint from which</span></span><br><span class="line"><span class="comment">    this was called. Interruptee's A0, A1, PS, PC are restored and the interrupt</span></span><br><span class="line"><span class="comment">    stack frame is deallocated in the exit dispatcher.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    l32i    a0, sp, XT_STK_EXIT</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><h4 id="vTaskSwitchContext函数"><a href="#vTaskSwitchContext函数" class="headerlink" title="vTaskSwitchContext函数"></a>vTaskSwitchContext函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//理论上，该函数只有在滴答定时器中断和crosscore中断中被调用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vTaskSwitchContext</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> irqstate=portENTER_CRITICAL_NESTED();</span><br><span class="line">tskTCB * pxTCB;</span><br><span class="line"><span class="keyword">if</span>( uxSchedulerSuspended[ xPortGetCoreID() ] != ( UBaseType_t ) pdFALSE )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* The scheduler is currently suspended - do not allow a context</span></span><br><span class="line"><span class="comment">switch. */</span></span><br><span class="line">xYieldPending[ xPortGetCoreID() ] = pdTRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">xYieldPending[ xPortGetCoreID() ] = pdFALSE;</span><br><span class="line">        xSwitchingContext[ xPortGetCoreID() ] = pdTRUE;</span><br><span class="line">traceTASK_SWITCHED_OUT();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configGENERATE_RUN_TIME_STATS == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> portALT_GET_RUN_TIME_COUNTER_VALUE</span></span><br><span class="line">portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Add the amount of time the task has been running to the</span></span><br><span class="line"><span class="comment">accumulated time so far.  The time the task started running was</span></span><br><span class="line"><span class="comment">stored in ulTaskSwitchedInTime.  Note that there is no overflow</span></span><br><span class="line"><span class="comment">protection here so count values are only valid until the timer</span></span><br><span class="line"><span class="comment">overflows.  The guard against negative values is to protect</span></span><br><span class="line"><span class="comment">against suspect run time stat counter implementations - which</span></span><br><span class="line"><span class="comment">are provided by the application, not the kernel. */</span></span><br><span class="line">taskENTER_CRITICAL_ISR(&amp;xTaskQueueMutex);</span><br><span class="line"><span class="keyword">if</span>( ulTotalRunTime &gt; ulTaskSwitchedInTime[ xPortGetCoreID() ] )</span><br><span class="line">&#123;</span><br><span class="line">pxCurrentTCB[ xPortGetCoreID() ]-&gt;ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime[ xPortGetCoreID() ] );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">taskEXIT_CRITICAL_ISR(&amp;xTaskQueueMutex);</span><br><span class="line">ulTaskSwitchedInTime[ xPortGetCoreID() ] = ulTotalRunTime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* configGENERATE_RUN_TIME_STATS */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Check for stack overflow, if configured. */</span></span><br><span class="line">taskFIRST_CHECK_FOR_STACK_OVERFLOW();</span><br><span class="line">taskSECOND_CHECK_FOR_STACK_OVERFLOW();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Select a new task to run */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> We cannot do taskENTER_CRITICAL_ISR(&amp;xTaskQueueMutex); here because it saves the interrupt context to the task tcb, and we're</span></span><br><span class="line"><span class="comment"> swapping that out here. Instead, we're going to do the work here ourselves. Because interrupts are already disabled, we only</span></span><br><span class="line"><span class="comment"> need to acquire the mutex.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_FREERTOS_PORTMUX_DEBUG</span></span><br><span class="line">vPortCPUAcquireMutex( &amp;xTaskQueueMutex, __FUNCTION__, __LINE__ );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">vPortCPUAcquireMutex( &amp;xTaskQueueMutex );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> portBASE_TYPE foundNonExecutingWaiter = pdFALSE, ableToSchedule = pdFALSE, resetListHead;</span><br><span class="line">portBASE_TYPE uxDynamicTopReady = uxTopReadyPriority;</span><br><span class="line"><span class="keyword">unsigned</span> portBASE_TYPE holdTop=pdFALSE;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  ToDo: This scheduler doesn't correctly implement the round-robin scheduling as done in the single-core</span></span><br><span class="line"><span class="comment"> *  FreeRTOS stack when multiple tasks have the same priority and are all ready; it just keeps grabbing the</span></span><br><span class="line"><span class="comment"> *  first one. ToDo: fix this.</span></span><br><span class="line"><span class="comment"> *  (Is this still true? if any, there's the issue with one core skipping over the processes for the other</span></span><br><span class="line"><span class="comment"> *  core, potentially not giving the skipped-over processes any time.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( ableToSchedule == pdFALSE &amp;&amp; uxDynamicTopReady &gt;= <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">resetListHead = pdFALSE;</span><br><span class="line"><span class="comment">// Nothing to do for empty lists</span></span><br><span class="line"><span class="keyword">if</span> (!listLIST_IS_EMPTY( &amp;( pxReadyTasksLists[ uxDynamicTopReady ] ) )) &#123;</span><br><span class="line"></span><br><span class="line">ableToSchedule = pdFALSE;</span><br><span class="line">tskTCB * pxRefTCB;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Remember the current list item so that we</span></span><br><span class="line"><span class="comment">can detect if all items have been inspected.</span></span><br><span class="line"><span class="comment">Once this happens, we move on to a lower</span></span><br><span class="line"><span class="comment">priority list (assuming nothing is suitable</span></span><br><span class="line"><span class="comment">for scheduling). Note: This can return NULL if</span></span><br><span class="line"><span class="comment">the list index is at the listItem */</span></span><br><span class="line">pxRefTCB = pxReadyTasksLists[ uxDynamicTopReady ].pxIndex-&gt;pvOwner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">void</span>*)pxReadyTasksLists[ uxDynamicTopReady ].pxIndex==(<span class="keyword">void</span>*)&amp;pxReadyTasksLists[ uxDynamicTopReady ].xListEnd) &#123;</span><br><span class="line"><span class="comment">//pxIndex points to the list end marker. Skip that and just get the next item.</span></span><br><span class="line">listGET_OWNER_OF_NEXT_ENTRY( pxRefTCB, &amp;( pxReadyTasksLists[ uxDynamicTopReady ] ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">listGET_OWNER_OF_NEXT_ENTRY( pxTCB, &amp;( pxReadyTasksLists[ uxDynamicTopReady ] ) );</span><br><span class="line"><span class="comment">/* Find out if the next task in the list is</span></span><br><span class="line"><span class="comment">already being executed by another core */</span></span><br><span class="line">foundNonExecutingWaiter = pdTRUE;</span><br><span class="line">portBASE_TYPE i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;portNUM_PROCESSORS; i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == xPortGetCoreID()) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pxCurrentTCB[i] == pxTCB) &#123;</span><br><span class="line">holdTop=pdTRUE; <span class="comment">//keep this as the top prio, for the other CPU</span></span><br><span class="line">foundNonExecutingWaiter = pdFALSE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (foundNonExecutingWaiter == pdTRUE) &#123;</span><br><span class="line"><span class="comment">/* If the task is not being executed</span></span><br><span class="line"><span class="comment">by another core and its affinity is</span></span><br><span class="line"><span class="comment">compatible with the current one,</span></span><br><span class="line"><span class="comment">prepare it to be swapped in */</span></span><br><span class="line"><span class="keyword">if</span> (pxTCB-&gt;xCoreID == tskNO_AFFINITY) &#123;</span><br><span class="line">pxCurrentTCB[xPortGetCoreID()] = pxTCB;</span><br><span class="line">ableToSchedule = pdTRUE;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pxTCB-&gt;xCoreID == xPortGetCoreID()) &#123;</span><br><span class="line">pxCurrentTCB[xPortGetCoreID()] = pxTCB;</span><br><span class="line">ableToSchedule = pdTRUE;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ableToSchedule = pdFALSE;</span><br><span class="line">holdTop=pdTRUE; <span class="comment">//keep this as the top prio, for the other CPU</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ableToSchedule = pdFALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ableToSchedule == pdFALSE) &#123;</span><br><span class="line">resetListHead = pdTRUE;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ((ableToSchedule == pdTRUE) &amp;&amp; (resetListHead == pdTRUE)) &#123;</span><br><span class="line">tskTCB * pxResetTCB;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">listGET_OWNER_OF_NEXT_ENTRY( pxResetTCB, &amp;( pxReadyTasksLists[ uxDynamicTopReady ] ) );</span><br><span class="line">&#125; <span class="keyword">while</span>(pxResetTCB != pxRefTCB);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> ((ableToSchedule == pdFALSE) &amp;&amp; (pxTCB != pxRefTCB));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!holdTop) --uxTopReadyPriority;</span><br><span class="line">&#125;</span><br><span class="line">--uxDynamicTopReady;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">traceTASK_SWITCHED_IN();</span><br><span class="line">        xSwitchingContext[ xPortGetCoreID() ] = pdFALSE;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Exit critical region manually as well: release the mux now, interrupts will be re-enabled when we</span></span><br><span class="line"><span class="comment">//exit the function.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_FREERTOS_PORTMUX_DEBUG</span></span><br><span class="line">vPortCPUReleaseMutex( &amp;xTaskQueueMutex, __FUNCTION__, __LINE__ );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">vPortCPUReleaseMutex( &amp;xTaskQueueMutex );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> CONFIG_FREERTOS_WATCHPOINT_END_OF_STACK</span></span><br><span class="line">vPortSetStackWatchpoint(pxCurrentTCB[xPortGetCoreID()]-&gt;pxStack);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">portEXIT_CRITICAL_NESTED(irqstate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="系统滴答定时器中断"><a href="#系统滴答定时器中断" class="headerlink" title="系统滴答定时器中断"></a>系统滴答定时器中断</h3><h4 id="frxt-timer-int"><a href="#frxt-timer-int" class="headerlink" title="_frxt_timer_int"></a>_frxt_timer_int</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该函数是系统滴答定时器中断处理函数，每一次tick时钟到来都会调用一次xPortSysTickHandler</span></span><br><span class="line">    .globl  _frxt_timer_int</span><br><span class="line">    .type   _frxt_timer_int,@function</span><br><span class="line">    .align  <span class="number">4</span></span><br><span class="line">_frxt_timer_int:</span><br><span class="line"></span><br><span class="line">    ENTRY(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_PM_TRACE</span></span><br><span class="line">    movi a6, <span class="number">1</span> <span class="comment">/* = ESP_PM_TRACE_TICK */</span></span><br><span class="line">    getcoreid a7</span><br><span class="line">    call4 esp_pm_trace_enter</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// CONFIG_PM_TRACE</span></span></span><br><span class="line"></span><br><span class="line">.L_xt_timer_int_catchup:</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Update the timer comparator for the next tick. */</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> XT_CLOCK_FREQ</span></span><br><span class="line">    movi    a2, XT_TICK_DIVISOR         <span class="comment">/* a2 = comparator increment          */</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    movi    a3, _xt_tick_divisor</span><br><span class="line">    l32i    a2, a3, <span class="number">0</span>                   <span class="comment">/* a2 = comparator increment          */</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    rsr     a3, XT_CCOMPARE             <span class="comment">/* a3 = old comparator value          */</span></span><br><span class="line">    add     a4, a3, a2                  <span class="comment">/* a4 = new comparator value          */</span></span><br><span class="line">    wsr     a4, XT_CCOMPARE             <span class="comment">/* update comp. and clear interrupt   */</span></span><br><span class="line">    esync</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> __XTENSA_CALL0_ABI__</span></span><br><span class="line">    <span class="comment">/* Preserve a2 and a3 across C calls. */</span></span><br><span class="line">    s32i    a2, sp, <span class="number">4</span></span><br><span class="line">    s32i    a3, sp, <span class="number">8</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Call the FreeRTOS tick handler (see port.c). */</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> __XTENSA_CALL0_ABI__</span></span><br><span class="line">    call0   xPortSysTickHandler</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    call4   xPortSysTickHandler</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> __XTENSA_CALL0_ABI__</span></span><br><span class="line">    <span class="comment">/* Restore a2 and a3. */</span></span><br><span class="line">    l32i    a2, sp, <span class="number">4</span></span><br><span class="line">    l32i    a3, sp, <span class="number">8</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check if we need to process more ticks to catch up. */</span></span><br><span class="line">    esync                               <span class="comment">/* ensure comparator update complete  */</span></span><br><span class="line">    rsr     a4, CCOUNT                  <span class="comment">/* a4 = cycle count                   */</span></span><br><span class="line">    sub     a4, a4, a3                  <span class="comment">/* diff = ccount - old comparator     */</span></span><br><span class="line">    blt     a2, a4, .L_xt_timer_int_catchup  <span class="comment">/* repeat while diff &gt; divisor */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_PM_TRACE</span></span><br><span class="line">    movi a6, <span class="number">1</span> <span class="comment">/* = ESP_PM_TRACE_TICK */</span></span><br><span class="line">    getcoreid a7</span><br><span class="line">    call4 esp_pm_trace_exit</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// CONFIG_PM_TRACE</span></span></span><br><span class="line"></span><br><span class="line">    RET(<span class="number">16</span>)</span><br></pre></td></tr></table></figure><h4 id="xPortSysTickHandler函数"><a href="#xPortSysTickHandler函数" class="headerlink" title="xPortSysTickHandler函数"></a>xPortSysTickHandler函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BaseType_t <span class="title">xPortSysTickHandler</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BaseType_t ret;</span><br><span class="line"></span><br><span class="line">portbenchmarkIntLatency();</span><br><span class="line">traceISR_ENTER(SYSTICK_INTR_ID);</span><br><span class="line">ret = xTaskIncrementTick();</span><br><span class="line"><span class="keyword">if</span>( ret != pdFALSE )</span><br><span class="line">&#123;</span><br><span class="line">portYIELD_FROM_ISR();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">traceISR_EXIT();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> portYIELD_FROM_ISR()        &#123;traceISR_EXIT_TO_SCHEDULER(); _frxt_setup_switch();&#125;</span></span><br></pre></td></tr></table></figure><h4 id="frxt-setup-switch函数"><a href="#frxt-setup-switch函数" class="headerlink" title="_frxt_setup_switch函数"></a>_frxt_setup_switch函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在内部设置一个flag，在退出中断的时候_frxt_int_exit会检查该flag，如果发现flag被设置了，就调用函数vPortYieldFromInt</span></span><br><span class="line">    .global     _frxt_setup_switch</span><br><span class="line">    .type       _frxt_setup_switch,@function</span><br><span class="line">    .align      <span class="number">4</span></span><br><span class="line">_frxt_setup_switch:</span><br><span class="line"></span><br><span class="line">    ENTRY(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">getcoreid a3</span><br><span class="line">    movi    a2, port_switch_flag</span><br><span class="line">addx4a2,  a3, a2</span><br><span class="line"></span><br><span class="line">    movi    a3, <span class="number">1</span></span><br><span class="line">    s32i    a3, a2, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    RET(<span class="number">16</span>)</span><br></pre></td></tr></table></figure><h4 id="vPortYieldFromInt"><a href="#vPortYieldFromInt" class="headerlink" title="vPortYieldFromInt"></a>vPortYieldFromInt</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    .globl  vPortYieldFromInt</span><br><span class="line">    .type   vPortYieldFromInt,@function</span><br><span class="line">    .align  <span class="number">4</span></span><br><span class="line">vPortYieldFromInt:</span><br><span class="line">    ENTRY(<span class="number">16</span>)</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> XCHAL_CP_NUM &gt; 0</span></span><br><span class="line">    <span class="comment">/* Save CPENABLE in task's co-processor save area, and clear CPENABLE.  */</span></span><br><span class="line">    movi    a3, pxCurrentTCB            <span class="comment">/* cp_state =                       */</span></span><br><span class="line">getcoreid a2</span><br><span class="line">addx4a3,  a2, a3</span><br><span class="line">    l32i    a3, a3, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    l32i    a2, a3, CP_TOPOFSTACK_OFFS</span><br><span class="line"></span><br><span class="line">    rsr     a3, CPENABLE</span><br><span class="line">    s16i    a3, a2, XT_CPENABLE         <span class="comment">/* cp_state-&gt;cpenable = CPENABLE;   */</span></span><br><span class="line">    movi    a3, <span class="number">0</span></span><br><span class="line">    wsr     a3, CPENABLE                <span class="comment">/* disable all co-processors        */</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> __XTENSA_CALL0_ABI__</span></span><br><span class="line">    <span class="comment">/* Tail-call dispatcher. */</span></span><br><span class="line">    call0   _frxt_dispatch</span><br><span class="line">    <span class="comment">/* Never reaches here. */</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    RET(<span class="number">16</span>)</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="end-总结上下文切换的场合"><a href="#end-总结上下文切换的场合" class="headerlink" title=":end:总结上下文切换的场合"></a>:end:总结上下文切换的场合</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">fd(_frxt_dispatch) --&gt; tsc(vTaskSwitchContext)</span><br><span class="line">    ty(taskYIELD/portYIELD) --&gt; py(vPortYield)</span><br><span class="line">    py --&gt; fd</span><br><span class="line"></span><br><span class="line">fie(XT_RTOS_INT_ENTER/_frxt_int_enter) --&gt; fti(_frxt_timer_int)</span><br><span class="line">    fti --&gt; psth(xPortSysTickHandler)</span><br><span class="line">    psth --&gt; pyfi(portYIELD_FROM_ISR)</span><br><span class="line">pyfi --&gt; fss(_frxt_setup_switch)</span><br><span class="line">fss --&gt; fiex(XT_RTOS_INT_EXIT/_frxt_int_exit)</span><br><span class="line">fiex --&gt; pyf(vPortYieldFromInt)</span><br><span class="line">pyf --&gt; fd</span><br><span class="line"></span><br><span class="line">tyoc(taskYIELD_OTHER_CORE) --&gt; vpyoc(vPortYieldOtherCore)</span><br><span class="line">vpyoc --&gt; ecisy(esp_crosscore_int_send_yield)</span><br><span class="line">ecisy --&gt; ecis(esp_crosscore_int_send)</span><br><span class="line">ecis --&gt; eci(esp_crosscore_isr)</span><br><span class="line">eci --&gt; ecihy(esp_crosscore_isr_handle_yield)</span><br><span class="line">ecihy --&gt; pyfi</span><br></pre></td></tr></table></figure><h2 id="FreeRTOS时间片调度"><a href="#FreeRTOS时间片调度" class="headerlink" title="FreeRTOS时间片调度"></a>FreeRTOS时间片调度</h2><blockquote><p>时间片调度发生在滴答定时器的中断服务函数中，在中断服务函数中会调用xPortSysTickHandler()，而xPortSysTickHandler会引发任务调度，只是这个任务调度是有条件的，只有<strong>xTaskIncrementTick</strong>的返回值不为pdFALSE时，才会进行任务调度。如果当前任务所对应的优先级下有其他的任务存在，那么函数xTaskIncrementTick就会返回pdTRUE。</p></blockquote><h2 id="FreeRTOS时间管理"><a href="#FreeRTOS时间管理" class="headerlink" title="FreeRTOS时间管理"></a>FreeRTOS时间管理</h2><h4 id="vTaskDelay相对延时函数"><a href="#vTaskDelay相对延时函数" class="headerlink" title="vTaskDelay相对延时函数"></a>vTaskDelay相对延时函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vTaskDelay</span><span class="params">( <span class="keyword">const</span> TickType_t xTicksToDelay )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TickType_t xTimeToWake;</span><br><span class="line">    BaseType_t xAlreadyYielded = pdFALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//延时的时间如果不大于0，那就相当于直接进行任务切换</span></span><br><span class="line">    <span class="keyword">if</span>( xTicksToDelay &gt; ( TickType_t ) <span class="number">0U</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        configASSERT( uxSchedulerSuspended[ xPortGetCoreID() ] == <span class="number">0</span> );</span><br><span class="line">        taskENTER_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">        &#123;</span><br><span class="line">            traceTASK_DELAY();</span><br><span class="line">            <span class="comment">//计算唤醒时间</span></span><br><span class="line">            xTimeToWake = xTickCount + xTicksToDelay;</span><br><span class="line">            <span class="comment">//从就绪列表上移除</span></span><br><span class="line">            <span class="keyword">if</span>( uxListRemove( &amp;( pxCurrentTCB[ xPortGetCoreID() ]-&gt;xGenericListItem ) ) == ( UBaseType_t ) <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                portRESET_READY_PRIORITY( pxCurrentTCB[ xPortGetCoreID() ]-&gt;uxPriority, uxTopReadyPriority );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mtCOVERAGE_TEST_MARKER();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//添加到延时列表中</span></span><br><span class="line">            prvAddCurrentTaskToDelayedList( xPortGetCoreID(), xTimeToWake );</span><br><span class="line">        &#125;</span><br><span class="line">        taskEXIT_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        mtCOVERAGE_TEST_MARKER();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( xAlreadyYielded == pdFALSE )</span><br><span class="line">    &#123;</span><br><span class="line">        portYIELD_WITHIN_API();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        mtCOVERAGE_TEST_MARKER();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="prvAddCurrentTaskToDelayedList函数"><a href="#prvAddCurrentTaskToDelayedList函数" class="headerlink" title="prvAddCurrentTaskToDelayedList函数"></a>prvAddCurrentTaskToDelayedList函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prvAddCurrentTaskToDelayedList</span><span class="params">( <span class="keyword">const</span> BaseType_t xCoreID, <span class="keyword">const</span> TickType_t xTimeToWake )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//按照唤醒时间从小到达的顺序，插入延时列表</span></span><br><span class="line">listSET_LIST_ITEM_VALUE( &amp;( pxCurrentTCB[ xCoreID ]-&gt;xGenericListItem ), xTimeToWake );</span><br><span class="line"><span class="keyword">if</span>( xTimeToWake &lt; xTickCount )</span><br><span class="line">&#123;</span><br><span class="line">        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();</span><br><span class="line"><span class="comment">//唤醒时间已经溢出，将其插入延时溢出列表中</span></span><br><span class="line">vListInsert( pxOverflowDelayedTaskList, &amp;( pxCurrentTCB[ xCoreID ]-&gt;xGenericListItem ) );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">        traceMOVED_TASK_TO_DELAYED_LIST();</span><br><span class="line"><span class="comment">//时间还没有溢出，插入延时列表中</span></span><br><span class="line">vListInsert( pxDelayedTaskList, &amp;( pxCurrentTCB[ xCoreID ]-&gt;xGenericListItem ) );</span><br><span class="line"><span class="comment">//xNextTaskUnblockTime是一个全局变量，保存着距离下一个要取消阻塞的任务最小时间点值</span></span><br><span class="line"><span class="keyword">if</span>( xTimeToWake &lt; xNextTaskUnblockTime )</span><br><span class="line">&#123;</span><br><span class="line">xNextTaskUnblockTime = xTimeToWake;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vTaskDelayUntil绝对延时函数"><a href="#vTaskDelayUntil绝对延时函数" class="headerlink" title="vTaskDelayUntil绝对延时函数"></a>vTaskDelayUntil绝对延时函数</h4><blockquote><p>使用该函数延时的任务也不一定能够周期性的运行，该函数只能保证按照一定的周期取消阻塞，进入就绪态</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vTaskDelayUntil</span><span class="params">( TickType_t * <span class="keyword">const</span> pxPreviousWakeTime, <span class="keyword">const</span> TickType_t xTimeIncrement )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TickType_t xTimeToWake;</span><br><span class="line">    BaseType_t xAlreadyYielded=pdFALSE, xShouldDelay = pdFALSE;</span><br><span class="line"></span><br><span class="line">    configASSERT( pxPreviousWakeTime );</span><br><span class="line">    configASSERT( ( xTimeIncrement &gt; <span class="number">0U</span> ) );</span><br><span class="line">    configASSERT( uxSchedulerSuspended[ xPortGetCoreID() ] == <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    taskENTER_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> TickType_t xConstTickCount = xTickCount;</span><br><span class="line">        <span class="comment">//计算任务被唤醒的时刻</span></span><br><span class="line">        xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;</span><br><span class="line">        <span class="comment">//tick计数器溢出</span></span><br><span class="line">        <span class="keyword">if</span>( xConstTickCount &lt; *pxPreviousWakeTime )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//tick计数器和唤醒时间都溢出，且tick计数器值比唤醒时间小</span></span><br><span class="line">            <span class="keyword">if</span>( ( xTimeToWake &lt; *pxPreviousWakeTime ) &amp;&amp; ( xTimeToWake &gt; xConstTickCount ) )</span><br><span class="line">            &#123;</span><br><span class="line">                xShouldDelay = pdTRUE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mtCOVERAGE_TEST_MARKER();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//tick计数器没有溢出，唤醒时间溢出或者tick计数器值比唤醒时间小，这两种情况都说明还需要继续延时</span></span><br><span class="line">            <span class="keyword">if</span>( ( xTimeToWake &lt; *pxPreviousWakeTime ) || ( xTimeToWake &gt; xConstTickCount ) )</span><br><span class="line">            &#123;</span><br><span class="line">                xShouldDelay = pdTRUE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mtCOVERAGE_TEST_MARKER();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//为本函数的下一次执行做好准备</span></span><br><span class="line">        *pxPreviousWakeTime = xTimeToWake;</span><br><span class="line">        <span class="keyword">if</span>( xShouldDelay != pdFALSE )</span><br><span class="line">        &#123;</span><br><span class="line">            traceTASK_DELAY_UNTIL();</span><br><span class="line">            <span class="comment">//从就序列表中移除</span></span><br><span class="line">            <span class="keyword">if</span>( uxListRemove( &amp;( pxCurrentTCB[ xPortGetCoreID() ]-&gt;xGenericListItem ) ) == ( UBaseType_t ) <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                portRESET_READY_PRIORITY( pxCurrentTCB[ xPortGetCoreID() ]-&gt;uxPriority, uxTopReadyPriority );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mtCOVERAGE_TEST_MARKER();</span><br><span class="line">            &#125;</span><br><span class="line">            prvAddCurrentTaskToDelayedList( xPortGetCoreID(), xTimeToWake );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            mtCOVERAGE_TEST_MARKER();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    taskEXIT_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( xAlreadyYielded == pdFALSE )</span><br><span class="line">    &#123;</span><br><span class="line">        portYIELD_WITHIN_API();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        mtCOVERAGE_TEST_MARKER();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="portYIELD-WITHIN-API宏定义"><a href="#portYIELD-WITHIN-API宏定义" class="headerlink" title="portYIELD_WITHIN_API宏定义"></a>portYIELD_WITHIN_API宏定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上下文切换工作需要等待直到中断被允许后才执行，这里使用cross-core中断来触发自己</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> portYIELD_WITHIN_API() esp_crosscore_int_send_yield(xPortGetCoreID())</span></span><br></pre></td></tr></table></figure><h4 id="xTaskIncreamentTick函数的主要功能"><a href="#xTaskIncreamentTick函数的主要功能" class="headerlink" title="xTaskIncreamentTick函数的主要功能"></a>xTaskIncreamentTick函数的主要功能</h4><blockquote><p>xTickCount是FreeRTOS的系统节拍计数器，每个滴答定时器中断后xTickCount就会增加一，xTickCount的具体操作是在函数xTaskIncrementTick中进行的</p></blockquote><ol><li>系统节拍计数器的值加1</li><li>判断是否有任务的延时等待时间已到，如果就就将其恢复</li><li>处理时间片调度</li><li>综上给出是否需要执行上下文切换的判断结果并返回滴答定时器中断</li></ol><h2 id="FreeRTOS队列"><a href="#FreeRTOS队列" class="headerlink" title="FreeRTOS队列"></a>FreeRTOS队列</h2><h4 id="队列结构体Queue-t"><a href="#队列结构体Queue-t" class="headerlink" title="队列结构体Queue_t"></a>队列结构体Queue_t</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueDefinition</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int8_t</span> *pcHead;<span class="comment">//指向队列存储区开始位置</span></span><br><span class="line"><span class="keyword">int8_t</span> *pcTail;<span class="comment">//指向队列存储区最后一个字节</span></span><br><span class="line"><span class="keyword">int8_t</span> *pcWriteTo;<span class="comment">//指向存储区中下一个空闲区域</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int8_t</span> *pcReadFrom;<span class="comment">//用作队列时指向最后一个出队的队列项首地址</span></span><br><span class="line">UBaseType_t uxRecursiveCallCount;<span class="comment">//用作递归互斥信号量时用来记录递归互斥信号量被调用的次数</span></span><br><span class="line">&#125; u;</span><br><span class="line">List_t xTasksWaitingToSend;<span class="comment">//那些因为队列满导致入队失败而进入阻塞态的任务就会挂到此列表上，按照优先级排列</span></span><br><span class="line">List_t xTasksWaitingToReceive;<span class="comment">//那些因为队列空导致出队失败而进入阻塞态的任务就会挂到此列表上，按照优先级排列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> UBaseType_t uxMessagesWaiting;<span class="comment">//队列中当前的消息数量</span></span><br><span class="line">UBaseType_t uxLength;<span class="comment">//队列中允许的最大的消息数量</span></span><br><span class="line">UBaseType_t uxItemSize;<span class="comment">//每个消息允许的最大长度</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>( ( configSUPPORT_STATIC_ALLOCATION == 1 ) &amp;&amp; ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )</span></span><br><span class="line"><span class="keyword">uint8_t</span> ucStaticallyAllocated;<span class="comment">//如果队列的内存是静态分配的，则为pdTRUE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_QUEUE_SETS == 1 )</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueDefinition</span> *<span class="title">pxQueueSetContainer</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> ( configUSE_TRACE_FACILITY == 1 )</span></span><br><span class="line">UBaseType_t uxQueueNumber;</span><br><span class="line"><span class="keyword">uint8_t</span> ucQueueType;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">portMUX_TYPE mux;<span class="comment">//因为SMP的原因，所以需要互斥锁</span></span><br><span class="line"></span><br><span class="line">&#125; xQUEUE;</span><br><span class="line"><span class="keyword">typedef</span> xQUEUE Queue_t;</span><br></pre></td></tr></table></figure><h4 id="创建队列xQueueCreate"><a href="#创建队列xQueueCreate" class="headerlink" title="创建队列xQueueCreate"></a>创建队列xQueueCreate</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xQueueCreate( uxQueueLength, uxItemSize ) xQueueGenericCreate( ( uxQueueLength ), ( uxItemSize ), ( queueQUEUE_TYPE_BASE ) )<span class="comment">//普通消息队列的类型是queueQUEUE_TYPE_BASE</span></span></span><br><span class="line"><span class="function">QueueHandle_t <span class="title">xQueueGenericCreate</span><span class="params">( <span class="keyword">const</span> UBaseType_t uxQueueLength, <span class="keyword">const</span> UBaseType_t uxItemSize, <span class="keyword">const</span> <span class="keyword">uint8_t</span> ucQueueType )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Queue_t *pxNewQueue;</span><br><span class="line">    <span class="keyword">size_t</span> xQueueSizeInBytes;</span><br><span class="line">    <span class="keyword">uint8_t</span> *pucQueueStorage;</span><br><span class="line">    configASSERT( uxQueueLength &gt; ( UBaseType_t ) <span class="number">0</span> );</span><br><span class="line">    <span class="keyword">if</span>( uxItemSize == ( UBaseType_t ) <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        xQueueSizeInBytes = ( <span class="keyword">size_t</span> ) <span class="number">0</span>;<span class="comment">//如果队列大小为0，那么就不需要存储区</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        xQueueSizeInBytes = ( <span class="keyword">size_t</span> ) ( uxQueueLength * uxItemSize );</span><br><span class="line">    &#125;</span><br><span class="line">    pxNewQueue = ( Queue_t * ) pvPortMalloc( <span class="keyword">sizeof</span>( Queue_t ) + xQueueSizeInBytes );<span class="comment">//分配内存，这里申请的内存大小是队列结构体和队列中消息存储区的总大小</span></span><br><span class="line">    <span class="keyword">if</span>( pxNewQueue != <span class="literal">NULL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        pucQueueStorage = ( ( <span class="keyword">uint8_t</span> * ) pxNewQueue ) + <span class="keyword">sizeof</span>( Queue_t );</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">if</span>( configSUPPORT_STATIC_ALLOCATION == 1 )</span></span><br><span class="line">        &#123;</span><br><span class="line">            pxNewQueue-&gt;ucStaticallyAllocated = pdFALSE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* configSUPPORT_STATIC_ALLOCATION */</span></span></span><br><span class="line">        prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );<span class="comment">//初始化队列</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pxNewQueue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="初始化队列prvInitialiseNewQueue"><a href="#初始化队列prvInitialiseNewQueue" class="headerlink" title="初始化队列prvInitialiseNewQueue"></a>初始化队列prvInitialiseNewQueue</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prvInitialiseNewQueue</span><span class="params">( <span class="keyword">const</span> UBaseType_t uxQueueLength, <span class="keyword">const</span> UBaseType_t uxItemSize, <span class="keyword">uint8_t</span> *pucQueueStorage, <span class="keyword">const</span> <span class="keyword">uint8_t</span> ucQueueType, Queue_t *pxNewQueue )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">( <span class="keyword">void</span> ) ucQueueType;</span><br><span class="line"><span class="keyword">if</span>( uxItemSize == ( UBaseType_t ) <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//没有队列存储区，这里将pcHead指向队列开始地址</span></span><br><span class="line">pxNewQueue-&gt;pcHead = ( <span class="keyword">int8_t</span> * ) pxNewQueue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//设置pcHaed指向队列存储区首地址</span></span><br><span class="line">pxNewQueue-&gt;pcHead = ( <span class="keyword">int8_t</span> * ) pucQueueStorage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化队列结构体相关成员变量</span></span><br><span class="line">pxNewQueue-&gt;uxLength = uxQueueLength;</span><br><span class="line">pxNewQueue-&gt;uxItemSize = uxItemSize;</span><br><span class="line">( <span class="keyword">void</span> ) xQueueGenericReset( pxNewQueue, pdTRUE );<span class="comment">//复位队列</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_TRACE_FACILITY == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line">pxNewQueue-&gt;ucQueueType = ucQueueType;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* configUSE_TRACE_FACILITY */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>( configUSE_QUEUE_SETS == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line">pxNewQueue-&gt;pxQueueSetContainer = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* configUSE_QUEUE_SETS */</span></span></span><br><span class="line">traceQUEUE_CREATE( pxNewQueue );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="队列复位函数xQueueGenericReset"><a href="#队列复位函数xQueueGenericReset" class="headerlink" title="队列复位函数xQueueGenericReset"></a>队列复位函数xQueueGenericReset</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BaseType_t <span class="title">xQueueGenericReset</span><span class="params">( QueueHandle_t xQueue, BaseType_t xNewQueue )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue_t * <span class="keyword">const</span> pxQueue = ( Queue_t * ) xQueue;</span><br><span class="line">configASSERT( pxQueue );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( xNewQueue == pdTRUE )</span><br><span class="line">&#123;</span><br><span class="line">vPortCPUInitializeMutex(&amp;pxQueue-&gt;mux);<span class="comment">//初始化互斥锁</span></span><br><span class="line">&#125;</span><br><span class="line">taskENTER_CRITICAL(&amp;pxQueue-&gt;mux);</span><br><span class="line">&#123;</span><br><span class="line">pxQueue-&gt;pcTail = pxQueue-&gt;pcHead + ( pxQueue-&gt;uxLength * pxQueue-&gt;uxItemSize );<span class="comment">//pcTail指向队列存储区的末尾</span></span><br><span class="line">pxQueue-&gt;uxMessagesWaiting = ( UBaseType_t ) <span class="number">0U</span>;<span class="comment">//队列中当前的消息数量是0</span></span><br><span class="line">pxQueue-&gt;pcWriteTo = pxQueue-&gt;pcHead;<span class="comment">//指向队列存储区中下一个可写入的位置</span></span><br><span class="line">pxQueue-&gt;u.pcReadFrom = pxQueue-&gt;pcHead + ( ( pxQueue-&gt;uxLength - ( UBaseType_t ) <span class="number">1U</span> ) * pxQueue-&gt;uxItemSize );<span class="comment">//指向队列存储区中下一个可读取的位置</span></span><br><span class="line"><span class="keyword">if</span>( xNewQueue == pdFALSE )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//由于复位队列以后队列依旧是空的，对于那些从队列中读取而被阻塞的任务来说依旧保持阻塞状态。但是对于那些向队列中写入数据而阻塞的任务来说，这些任务需要接触阻塞状态</span></span><br><span class="line"><span class="keyword">if</span>( listLIST_IS_EMPTY( &amp;( pxQueue-&gt;xTasksWaitingToSend ) ) == pdFALSE )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( xTaskRemoveFromEventList( &amp;( pxQueue-&gt;xTasksWaitingToSend ) ) == pdTRUE )</span><br><span class="line">&#123;</span><br><span class="line">queueYIELD_IF_USING_PREEMPTION();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化队列中的列表xTasksWaitingToSend和xTasksWaitingToReceive</span></span><br><span class="line">vListInitialise( &amp;( pxQueue-&gt;xTasksWaitingToSend ) );</span><br><span class="line">vListInitialise( &amp;( pxQueue-&gt;xTasksWaitingToReceive ) );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">taskEXIT_CRITICAL(&amp;pxQueue-&gt;mux);</span><br><span class="line"><span class="keyword">return</span> pdPASS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="向队列发送消息"><a href="#向队列发送消息" class="headerlink" title="向队列发送消息"></a>向队列发送消息</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>xQueueSend</td><td>发送消息到消息队列的尾部（后向入队）</td></tr><tr><td>xQueueSendToBack</td><td>发送消息到消息队列的尾部（后向入队）</td></tr><tr><td>xQueueSendToFront</td><td>发送消息到队列头（前向入队）</td></tr><tr><td>xQueueOverwrite</td><td>发送消息到消息队列，带覆写功能；队列满了以后自动覆盖掉旧的消息；通常用于向那些长度为1的队列发送消息</td></tr><tr><td>xQueueSendFromISR</td><td>发送消息到消息队列的尾部（后向入队），用于中断服务函数</td></tr><tr><td>xQueueSendToBackFromISR</td><td>发送消息到消息队列的尾部（后向入队），用于中断服务函数</td></tr><tr><td>xQueueSendToFrontFromISR</td><td>发送消息到队列头（前向入队），用于中断服务函数</td></tr><tr><td>xQueueOverwriteFromISR</td><td>发送消息到消息队列，带覆写功能；队列满了以后自动覆盖掉旧的消息，用于中断服务函数</td></tr></tbody></table><h4 id="xQueueGenericSend函数"><a href="#xQueueGenericSend函数" class="headerlink" title="xQueueGenericSend函数"></a>xQueueGenericSend函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BaseType_t <span class="title">xQueueGenericSend</span><span class="params">( QueueHandle_t xQueue, <span class="keyword">const</span> <span class="keyword">void</span> * <span class="keyword">const</span> pvItemToQueue, TickType_t xTicksToWait, <span class="keyword">const</span> BaseType_t xCopyPosition )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;</span><br><span class="line">TimeOut_t xTimeOut;</span><br><span class="line">Queue_t * <span class="keyword">const</span> pxQueue = ( Queue_t * ) xQueue;</span><br><span class="line"></span><br><span class="line">configASSERT( pxQueue );</span><br><span class="line">configASSERT( !( ( pvItemToQueue == <span class="literal">NULL</span> ) &amp;&amp; ( pxQueue-&gt;uxItemSize != ( UBaseType_t ) <span class="number">0U</span> ) ) );</span><br><span class="line">configASSERT( !( ( xCopyPosition == queueOVERWRITE ) &amp;&amp; ( pxQueue-&gt;uxLength != <span class="number">1</span> ) ) );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )</span></span><br><span class="line">&#123;</span><br><span class="line">configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) &amp;&amp; ( xTicksToWait != <span class="number">0</span> ) ) );</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( ;; )</span><br><span class="line">&#123;</span><br><span class="line">taskENTER_CRITICAL(&amp;pxQueue-&gt;mux);</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( ( pxQueue-&gt;uxMessagesWaiting &lt; pxQueue-&gt;uxLength ) || ( xCopyPosition == queueOVERWRITE ) )<span class="comment">//当队列未满或者是覆写入队，则可以将消息入队</span></span><br><span class="line">&#123;</span><br><span class="line">traceQUEUE_SEND( pxQueue );</span><br><span class="line">xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );<span class="comment">//将消息复制到队列中</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_QUEUE_SETS == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( pxQueue-&gt;pxQueueSetContainer != <span class="literal">NULL</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* The queue is a member of a queue set, and posting</span></span><br><span class="line"><span class="comment">to the queue set caused a higher priority task to</span></span><br><span class="line"><span class="comment">unblock. A context switch is required. */</span></span><br><span class="line">queueYIELD_IF_USING_PREEMPTION();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( listLIST_IS_EMPTY( &amp;( pxQueue-&gt;xTasksWaitingToReceive ) ) == pdFALSE )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( xTaskRemoveFromEventList( &amp;( pxQueue-&gt;xTasksWaitingToReceive ) ) == pdTRUE )</span><br><span class="line">&#123;</span><br><span class="line">queueYIELD_IF_USING_PREEMPTION();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( xYieldRequired != pdFALSE )</span><br><span class="line">&#123;</span><br><span class="line">queueYIELD_IF_USING_PREEMPTION();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* configUSE_QUEUE_SETS */</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( listLIST_IS_EMPTY( &amp;( pxQueue-&gt;xTasksWaitingToReceive ) ) == pdFALSE )<span class="comment">//检查是否有任务由于请求队列消息而阻塞，阻塞的任务会挂在队列的xTasksWaitingToReceive列表上</span></span><br><span class="line">&#123;</span><br><span class="line">                        <span class="comment">//将阻塞的任务从列表xTasksWaitingToReceive上移除，并且把这个任务添加到就序列表中。如果调度器上锁，则这些任务就会挂到列表xPendingReadyList上。如果取消阻塞的任务的优先级比当前正在运行的任务优先级高，则还要标记需要进行任务切换。当函数xTaskRemoveFromEventList返回值为pdTRUE时，需要进行任务切换</span></span><br><span class="line"><span class="keyword">if</span>( xTaskRemoveFromEventList( &amp;( pxQueue-&gt;xTasksWaitingToReceive ) ) == pdTRUE )</span><br><span class="line">&#123;</span><br><span class="line">queueYIELD_IF_USING_PREEMPTION();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( xYieldRequired != pdFALSE )</span><br><span class="line">&#123;</span><br><span class="line">queueYIELD_IF_USING_PREEMPTION();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* configUSE_QUEUE_SETS */</span></span></span><br><span class="line">taskEXIT_CRITICAL(&amp;pxQueue-&gt;mux);</span><br><span class="line"><span class="keyword">return</span> pdPASS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//队列已满，入队有阻碍</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( xTicksToWait == ( TickType_t ) <span class="number">0</span> )<span class="comment">//没有设置阻塞时间或者等待时间已到</span></span><br><span class="line">&#123;</span><br><span class="line">taskEXIT_CRITICAL(&amp;pxQueue-&gt;mux);</span><br><span class="line">traceQUEUE_SEND_FAILED( pxQueue );</span><br><span class="line"><span class="keyword">return</span> errQUEUE_FULL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( xEntryTimeSet == pdFALSE )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//设置超时时间结构体，记录当前系统始终节拍计数器的值xTickCount和溢出次数xNumOfOverflows</span></span><br><span class="line">vTaskSetTimeOutState( &amp;xTimeOut );</span><br><span class="line">xEntryTimeSet = pdTRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">taskEXIT_CRITICAL(&amp;pxQueue-&gt;mux);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代码执行到这里说明队列已满，而且设置了不为0的阻塞时间</span></span><br><span class="line">taskENTER_CRITICAL(&amp;pxQueue-&gt;mux);</span><br><span class="line"><span class="keyword">if</span>( xTaskCheckForTimeOut( &amp;xTimeOut, &amp;xTicksToWait ) == pdFALSE )<span class="comment">//更新xTimeOut，并检查阻塞时间是否到了</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( prvIsQueueFull( pxQueue ) != pdFALSE )<span class="comment">//队列依旧是满的</span></span><br><span class="line">&#123;</span><br><span class="line">traceBLOCKING_ON_QUEUE_SEND( pxQueue );</span><br><span class="line">vTaskPlaceOnEventList( &amp;( pxQueue-&gt;xTasksWaitingToSend ), xTicksToWait );<span class="comment">//将任务添加到队列的xTasksWaitingToSend列表和延时列表中，并且将任务从就绪列表中移除</span></span><br><span class="line">taskEXIT_CRITICAL(&amp;pxQueue-&gt;mux);</span><br><span class="line">portYIELD_WITHIN_API();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//阻塞时间还没有到，但是队列现在有空闲，那么就重新执行一次本循环</span></span><br><span class="line">&#123;</span><br><span class="line">taskEXIT_CRITICAL(&amp;pxQueue-&gt;mux);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//需要阻塞的时间到了</span></span><br><span class="line">&#123;</span><br><span class="line">taskEXIT_CRITICAL(&amp;pxQueue-&gt;mux);</span><br><span class="line">traceQUEUE_SEND_FAILED( pxQueue );</span><br><span class="line"><span class="keyword">return</span> errQUEUE_FULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="从队列读取消息"><a href="#从队列读取消息" class="headerlink" title="从队列读取消息"></a>从队列读取消息</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>xQueueReceive</td><td>从队列中读取消息，然后从队列中将其删除</td></tr><tr><td>xQueuePeek</td><td>从队列中读取消息，不会将其从队列中删除</td></tr><tr><td>xQueueReceiveFromISR</td><td>从队列中读取消息，然后从队列中将其删除，用于中断服务函数中</td></tr><tr><td>xQueuePeekFromISR</td><td>从队列中读取消息，不会将其从队列中删除，用于中断服务函数中</td></tr></tbody></table><h2 id="FreeRTOS信号量"><a href="#FreeRTOS信号量" class="headerlink" title="FreeRTOS信号量"></a>FreeRTOS信号量</h2><h4 id="二值信号量和互斥信号量的差别"><a href="#二值信号量和互斥信号量的差别" class="headerlink" title="二值信号量和互斥信号量的差别"></a>二值信号量和互斥信号量的差别</h4><blockquote><ol><li>互斥信号量拥有<strong>优先级继承机制</strong>，而二值信号量没有优先级继承</li><li>二值信号量更适用于同步，而互斥信号量适用于简单的互斥访问</li></ol></blockquote><h4 id="二值信号量"><a href="#二值信号量" class="headerlink" title="二值信号量"></a>二值信号量</h4><blockquote><p>二值信号量其实就是只有一个队列项的队列，这个特殊的队列要么是满的，要么是空的，正好就是二值。任务和中断使用这个特殊队列的时候不用在乎队列中存在的是什么消息，只需要知道这个队列是满的还是空的即可，可以利用这个机制来完成任务和中断之间的同步。二值信号量使用的队列是没有存储区的，队列是否为空可以通过队列结构体的成员变量uxMessagesWaiting来判断。</p></blockquote><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>xSemaphoreCreateBinary</td><td>动态创建二值信号量，新创建的二值信号量默认是空的</td></tr><tr><td>xSemaphoreCreateBinaryStatic</td><td>静态创建二值信号量</td></tr><tr><td>xSemaphoreGive</td><td>任务级信号量释放函数，可用于释放二值信号量、计数型信号量和互斥信号量</td></tr><tr><td>xSemaphoreGiveFromISR</td><td>中断级信号量释放函数，只能用于释放二值信号量和计数型信号量，不能释放互斥信号量(因为互斥信号量需要处理 优先级继承的问题，而中断不属于任务)</td></tr><tr><td>xSemaphoreTake</td><td>任务级获取信号量函数，可用于获取二值信号量、计数型信号量和互斥信号量</td></tr><tr><td>xSemaphoreTakeFromISR</td><td>中断级获取信号量函数，只能用于获取二值信号量和计数型信号量，不能获取互斥信号量(因为互斥信号量需要处理 优先级继承的问题，而中断不属于任务)</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xSemaphoreCreateBinary() xQueueGenericCreate( ( UBaseType_t ) 1, semSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_BINARY_SEMAPHORE )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xSemaphoreGive( xSemaphore ) xQueueGenericSend( ( QueueHandle_t ) ( xSemaphore ), NULL, semGIVE_BLOCK_TIME, queueSEND_TO_BACK )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xSemaphoreTake( xSemaphore, xBlockTime ) xQueueGenericReceive( ( QueueHandle_t ) ( xSemaphore ), NULL, ( xBlockTime ), pdFALSE )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xSemaphoreTakeFromISR( xSemaphore, pxHigherPriorityTaskWoken )xQueueReceiveFromISR( ( QueueHandle_t ) ( xSemaphore ), NULL, ( pxHigherPriorityTaskWoken ) )</span></span><br></pre></td></tr></table></figure><h4 id="计数型信号量"><a href="#计数型信号量" class="headerlink" title="计数型信号量"></a>计数型信号量</h4><blockquote><p>计数型信号量就是长度为大于1的队列，只是无需关心队列中存储了什么数据，计数型信号量主要应用场合是：</p><ol><li><p>事件计数</p><p>每次事件发生的时候就在事件处理函数中释放信号量（增加信号量的计数值），其他任务会获取信号量来处理事件。在这种场合中，创建的计数型信号量初始计数值为0</p></li><li><p>资源管理</p><p>信号量值代表当前资源的可用数量，一个任务想要获得资源的使用权，首先必须获取信号量，成功以后信号量的值就会减1，当信号量值为0的时候就说明没有资源了。一个任务使用完资源以后一定要释放信号量，释放信号量以后信号量值会加1.在这种场合中，创建的计数型信号量初始值应该是资源的数量</p></li></ol></blockquote><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>xSemaphoreCreateCoumting</td><td>使用动态方法创建计数型信号量</td></tr><tr><td>xSemaphoreCreateCountingStatic</td><td>使用静态方法创建计数型信号量</td></tr><tr><td>xSemaphoreGetCount</td><td>获取计数型信号量的值</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xSemaphoreCreateCounting( uxMaxCount, uxInitialCount ) xQueueCreateCountingSemaphore( ( uxMaxCount ), ( uxInitialCount ) )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xSemaphoreCreateCountingStatic( uxMaxCount, uxInitialCount, pxSemaphoreBuffer ) xQueueCreateCountingSemaphoreStatic( ( uxMaxCount ), ( uxInitialCount ), ( pxSemaphoreBuffer ) )</span></span><br><span class="line"><span class="function">QueueHandle_t <span class="title">xQueueCreateCountingSemaphore</span><span class="params">( <span class="keyword">const</span> UBaseType_t uxMaxCount, <span class="keyword">const</span> UBaseType_t uxInitialCount )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QueueHandle_t xHandle;</span><br><span class="line"></span><br><span class="line">    configASSERT( uxMaxCount != <span class="number">0</span> );</span><br><span class="line">    configASSERT( uxInitialCount &lt;= uxMaxCount );</span><br><span class="line"></span><br><span class="line">    xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );<span class="comment">//queueSEMAPHORE_QUEUE_ITEM_LENGTH=0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( xHandle != <span class="literal">NULL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        ( ( Queue_t * ) xHandle )-&gt;uxMessagesWaiting = uxInitialCount;<span class="comment">//使用uxMessagesWaiting来计数</span></span><br><span class="line"></span><br><span class="line">        traceCREATE_COUNTING_SEMAPHORE();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        traceCREATE_COUNTING_SEMAPHORE_FAILED();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    configASSERT( xHandle );</span><br><span class="line">    <span class="keyword">return</span> xHandle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优先级翻转"><a href="#优先级翻转" class="headerlink" title="优先级翻转"></a>优先级翻转</h4><blockquote><p>使用二值信号量的时候会遇到常见的问题——优先级翻转，优先级翻转在可剥夺内核中是非常常见的，在实时系统中不允许出现这种现场，这样会破坏任务的预期顺序。</p><p>常见场合描述如下：</p><p>当一个低优先级和一个高优先级任务同时使用同一个信号量，而系统中还有其他中等优先级任务时，如果低 优先级任务获得了信号量，那么高优先级的任务就会处于等待状态；但是，中等优先级的任务可以打断低优先级任务而先于高优先级任务运行（此时高优先级的任务在等待信号量，所以不能运行），这就出现了优先级翻转的现象。</p></blockquote><h4 id="互斥信号量"><a href="#互斥信号量" class="headerlink" title="互斥信号量"></a>互斥信号量</h4><blockquote><p>互斥信号量其实就是一个拥有优先级继承的二值信号量，在同步的应用中，二值信号量最适合。互斥信号量适合用于那些需要互斥访问的应用中。当一个互斥信号量正在被一个低优先级的任务使用，而此时有个高优先级的任务也尝试获取这个互斥信号量的话就会被阻塞。不过这个高优先级的任务会将低优先级任务的优先级提升到与自己相同的优先级，这个过程就是优先级继承。优先级继承尽可能地降低了高优先级任务处于阻塞态的时间，并且将已经出现的“优先级翻转“的影响降到最低。</p></blockquote><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>xSemaphoreCreateMutex</td><td>使用动态方法创建互斥信号量</td></tr><tr><td>xSemaphoreCreateMutexStatic</td><td>使用静态方法创建互斥信号量</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xSemaphoreCreateMutex() xQueueCreateMutex( queueQUEUE_TYPE_MUTEX )</span></span><br><span class="line"><span class="function">QueueHandle_t <span class="title">xQueueCreateMutex</span><span class="params">( <span class="keyword">const</span> <span class="keyword">uint8_t</span> ucQueueType )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Queue_t *pxNewQueue;</span><br><span class="line">    <span class="keyword">const</span> UBaseType_t uxMutexLength = ( UBaseType_t ) <span class="number">1</span>, uxMutexSize = ( UBaseType_t ) <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );</span><br><span class="line">    prvInitialiseMutex( pxNewQueue );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pxNewQueue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prvInitialiseMutex</span><span class="params">( Queue_t *pxNewQueue )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( pxNewQueue != <span class="literal">NULL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        pxNewQueue-&gt;pxMutexHolder = <span class="literal">NULL</span>;</span><br><span class="line">        pxNewQueue-&gt;uxQueueType = queueQUEUE_IS_MUTEX;</span><br><span class="line">        pxNewQueue-&gt;u.uxRecursiveCallCount = <span class="number">0</span>;<span class="comment">//针对递归互斥信号量的计数器</span></span><br><span class="line">        vPortCPUInitializeMutex(&amp;pxNewQueue-&gt;mux);<span class="comment">//初始化CPU内核的自旋锁</span></span><br><span class="line">        traceCREATE_MUTEX( pxNewQueue );</span><br><span class="line">        ( <span class="keyword">void</span> ) xQueueGenericSend( pxNewQueue, <span class="literal">NULL</span>, ( TickType_t ) <span class="number">0U</span>, queueSEND_TO_BACK );<span class="comment">//互斥信号量默认创建后就是有效的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        traceCREATE_MUTEX_FAILED();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vPortCPUInitializeMutex</span><span class="params">(portMUX_TYPE *mux)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mux-&gt;owner=portMUX_FREE_VAL;</span><br><span class="line">mux-&gt;count=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 为了处理多核CPU带来的竞态，使用该结构体实现的“自旋锁” */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="comment">/* owner field values:</span></span><br><span class="line"><span class="comment"> * 0                - Uninitialized (invalid)</span></span><br><span class="line"><span class="comment"> * portMUX_FREE_VAL - Mux is free, can be locked by either CPU</span></span><br><span class="line"><span class="comment"> * CORE_ID_PRO / CORE_ID_APP - Mux is locked to the particular core</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Any value other than portMUX_FREE_VAL, CORE_ID_PRO, CORE_ID_APP indicates corruption</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">uint32_t</span> owner;</span><br><span class="line"><span class="comment">/* count field:</span></span><br><span class="line"><span class="comment"> * If mux is unlocked, count should be zero.</span></span><br><span class="line"><span class="comment"> * If mux is locked, count is non-zero &amp; represents the number of recursive locks on the mux.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">uint32_t</span> count;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_FREERTOS_PORTMUX_DEBUG</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *lastLockedFn;</span><br><span class="line"><span class="keyword">int</span> lastLockedLine;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125; portMUX_TYPE;</span><br></pre></td></tr></table></figure><h4 id="递归互斥信号量"><a href="#递归互斥信号量" class="headerlink" title="递归互斥信号量"></a>递归互斥信号量</h4><blockquote><p>已经获取了互斥信号量的任务就不能再次获取这个互斥信号量，但是递归互斥信号量不同，已经获取了递归互斥信号量的任务可以再次获取这个递归互斥信号量，而且次数不限。递归互斥信号量也有优先级继承的机制，所以任务使用完递归互斥信号量以后一定要记得释放。</p></blockquote><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>xSemaphoreCreateRecursiveMutex</td><td>使用动态方法创建递归互斥信号量</td></tr><tr><td>xSemaphoreCreateRecursiveMutexStatic</td><td>使用静态方法创建递归互斥信号量</td></tr><tr><td>xSemaphoreGiveRecursive</td><td>释放递归互斥信号量</td></tr><tr><td>xSemaphoreTakeRecursive</td><td>获取递归互斥信号量</td></tr></tbody></table><h2 id="FreeRTOS软件定时器"><a href="#FreeRTOS软件定时器" class="headerlink" title="FreeRTOS软件定时器"></a>FreeRTOS软件定时器</h2><blockquote><p>软件定时器的回调函数是在定时器服务任务中执行的，所以一定不能在回调函数中调用任何会阻塞任务的API函数，比如定时器回调函数中千万不能调用vTaskDelay、vTaskDelayUntil，还有一些访问队列或者信号量的非零阻塞时间的API函数也不能调用。FreeRTOS提供了很多定时器相关的API函数，这些API函数大多使用FreeRTOS的队列发送命令给定时器服务任务，这个队列叫定时器命令队列，是供给FreeRTOS的软件定时器使用的，用户不能直接访问。</p></blockquote><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>xTimerReset()</td><td>复位软件定时器</td></tr><tr><td>xTimerResetFromISR()</td><td>复位软件定时器，用在中断服务函数中</td></tr><tr><td>xTimerCreate()</td><td>使用动态方法创建软件定时器</td></tr><tr><td>xTimerCreateStatic()</td><td>使用静态方法创建软件定时器</td></tr><tr><td>xTimerStart()</td><td>开启软件定时器，用于任务中</td></tr><tr><td>xTimerStartFromISR()</td><td>开启软件定时器，用于中断中</td></tr><tr><td>xTimerStop()</td><td>停止软件定时器，用于任务中</td></tr><tr><td>xTimerStopFromISR()</td><td>停止软件定时器，用于中断中</td></tr></tbody></table><h2 id="FreeRTOS事件标志组"><a href="#FreeRTOS事件标志组" class="headerlink" title="FreeRTOS事件标志组"></a>FreeRTOS事件标志组</h2><blockquote><p>使用信号量同步时任务只能与单个的事件或任务进行同步，有时候某个任务可能需要与多个事件或任务进行同步，此时信号量就无能为力了。FreeRTOS为此提供了一个可选的解决办法——事件标志组。事件标志组的数据类型为EventGroupHandle_t，当configUSE_16_BIT_TICKS为1的时候，则事件标志组可以存储8个事件位；当configUSE_16_BIT_TICKS为0的时候，则事件标志组存储24个事件位。事件标志组中的所有事件位都存储在一个无符号的EventBits_t类型的变量中</p></blockquote><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>xEventGroupCreate()</td><td>使用动态方法创建事件标志组</td></tr><tr><td>xEventGroupCreateStatic()</td><td>使用静态方法创建事件标志组</td></tr><tr><td>xEventGroupClearBits()</td><td>将指定的事件位清零，用在任务中</td></tr><tr><td>xEventGroupClearBitsFromISR()</td><td>将指定的事件位清零，用在中断服务函数中</td></tr><tr><td>xEventGroupSetBits()</td><td>将指定的事件位置1，用在任务中</td></tr><tr><td>xEventGroupSetBitsFromISR()</td><td>将指定的事件位置1，用在中断服务函数中</td></tr><tr><td>xEventGroupGetBits()</td><td>获取当前事件标志组的值（各个事件的值），用在任务中</td></tr><tr><td>xEventGroupGetBitsFromISR()</td><td>获取当前事件标志组的值，用在中断服务函数中</td></tr><tr><td>xEventGroupWaitBits()</td><td>等待指定的事件位</td></tr></tbody></table><h2 id="FreeRTOS任务通知"><a href="#FreeRTOS任务通知" class="headerlink" title="FreeRTOS任务通知"></a>FreeRTOS任务通知</h2><blockquote><p>FreeRTOS的每个任务都有一个32位的通知值，任务控制块中的成员变量ulNotifiedValue就是这个通知值。任务通知是一个事件，假如某个任务通知的接收任务因为等待任务通知而阻塞，则向这个接收任务发送任务通知以后就会解除这个任务的阻塞状态。也可以更新接收任务的任务通知值，可以通过以下方法更新接收任务的通知值：</p><ol><li>不覆盖接收任务的通知值（如果上次发送给接收任务的通知还没被处理）</li><li>覆盖接收任务的通知值</li><li>更新接收任务的通知值的一个或多个bit</li><li>增加接收任务的通知值</li></ol><p>合理使用上面这些更改任务通知值的方法可以在一些场合中替代队列、二值信号量、计数型信号量和事件标志组，并且可以提高速度，减少RAM的使用量。</p><p>任务通知的局限：</p><ul><li>FreeRTOS的任务通知只能有一个接收任务，其实大多数的应用都是这种情况</li><li>接收任务可以因为接收任务通知而进入阻塞态，但是发送任务不会因为任务通知发送失败而阻塞</li></ul></blockquote><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>xTaskNotify</td><td>发送通知，带有通知值并且不保留接收任务原通知值，用在任务中</td></tr><tr><td>xTaskNotifyFromISR</td><td>发送通知，函数xTaskNotify的中断版本</td></tr><tr><td>xTaskNotifyGive</td><td>发送通知，不带通知值并且不保留接收任务的通知值，此函数会将接收任务的通知值加1，用于任务中</td></tr><tr><td>vTaskNotifyGiveFromISR</td><td>发送通知，函数xTaskNotifyGive的中断版本</td></tr><tr><td>xTaskNotifyAndQuery</td><td>发送通知，带有通知值并且保留接收任务的原通知值，用在任务中</td></tr><tr><td>xTaskNotifyAndQueryFromISR</td><td>发送通知，函数xTaskNotifyAndQuery的中断版本，用在中断服务函数中</td></tr><tr><td>ulTaskNotifyTake</td><td>获取任务通知，可以设置在退出此函数的时候将任务通知值清零或者减一。当任务通知用作二值信号量或者计数信号量的时候，使用此函数来获取信号量</td></tr><tr><td>xTaskNotifyWait</td><td>等待任务通知，比ulTaskNotifyTask更为强大，全功能版任务通知获取函数</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BaseType_t <span class="title">xTaskNotify</span><span class="params">( TaskHandle_t xTaskToNotify, <span class="keyword">uint32_t</span> ulValue, eNotifyAction eAction )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TCB_t * pxTCB;</span><br><span class="line">    eNotifyValue eOriginalNotifyState;</span><br><span class="line">    BaseType_t xReturn = pdPASS;</span><br><span class="line">    configASSERT( xTaskToNotify );</span><br><span class="line">    pxTCB = ( TCB_t * ) xTaskToNotify;</span><br><span class="line">    taskENTER_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">    &#123;</span><br><span class="line">        eOriginalNotifyState = pxTCB-&gt;eNotifyState;<span class="comment">//保存当前任务通知状态</span></span><br><span class="line">        pxTCB-&gt;eNotifyState = eNotified;<span class="comment">//更新任务通知状态为eNotified</span></span><br><span class="line">        <span class="keyword">switch</span>( eAction )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> eSetBits:</span><br><span class="line">                pxTCB-&gt;ulNotifiedValue |= ulValue;<span class="comment">//更新接收任务通知值的一个或多个bit</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> eIncrement:</span><br><span class="line">                ( pxTCB-&gt;ulNotifiedValue )++;<span class="comment">//将任务通知值加1</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> eSetValueWithOverwrite:</span><br><span class="line">                pxTCB-&gt;ulNotifiedValue = ulValue;<span class="comment">//直接覆写原来的任务通知值</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> eSetValueWithoutOverwrite:</span><br><span class="line">                <span class="keyword">if</span>( eOriginalNotifyState != eNotified )<span class="comment">//原来的任务通知已经被处理</span></span><br><span class="line">                &#123;</span><br><span class="line">                    pxTCB-&gt;ulNotifiedValue = ulValue;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span><span class="comment">//原来的任务通知没有被处理</span></span><br><span class="line">                &#123;</span><br><span class="line">                    xReturn = pdFAIL;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> eNoAction:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//判断任务是否因为等待任务通知值而进入了阻塞态</span></span><br><span class="line">        <span class="keyword">if</span>( eOriginalNotifyState == eWaitingNotification )</span><br><span class="line">        &#123;</span><br><span class="line">            ( <span class="keyword">void</span> ) uxListRemove( &amp;( pxTCB-&gt;xGenericListItem ) );<span class="comment">//将任务从状态列表中移除</span></span><br><span class="line">            prvAddTaskToReadyList( pxTCB );<span class="comment">//将任务重新添加到就绪列表</span></span><br><span class="line">            configASSERT( listLIST_ITEM_CONTAINER( &amp;( pxTCB-&gt;xEventListItem ) ) == <span class="literal">NULL</span> );</span><br><span class="line">            <span class="keyword">if</span>( tskCAN_RUN_HERE(pxTCB-&gt;xCoreID) &amp;&amp; pxTCB-&gt;uxPriority &gt; pxCurrentTCB[ xPortGetCoreID() ]-&gt;uxPriority )<span class="comment">//判断刚刚解除阻塞的任务优先级是否比当前正在运行的任务优先级高</span></span><br><span class="line">            &#123;</span><br><span class="line">                portYIELD_WITHIN_API();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( pxTCB-&gt;xCoreID != xPortGetCoreID() )</span><br><span class="line">            &#123;</span><br><span class="line">                taskYIELD_OTHER_CORE(pxTCB-&gt;xCoreID, pxTCB-&gt;uxPriority);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mtCOVERAGE_TEST_MARKER();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            mtCOVERAGE_TEST_MARKER();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    taskEXIT_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> xReturn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">uint32_t</span> ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )</span><br><span class="line">&#123;</span><br><span class="line">    TickType_t xTimeToWake;</span><br><span class="line">    <span class="keyword">uint32_t</span> ulReturn;</span><br><span class="line">    taskENTER_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( pxCurrentTCB[ xPortGetCoreID() ]-&gt;ulNotifiedValue == <span class="number">0U</span>L )<span class="comment">//还没有接收到任务通知</span></span><br><span class="line">        &#123;</span><br><span class="line">            pxCurrentTCB[ xPortGetCoreID() ]-&gt;eNotifyState = eWaitingNotification;<span class="comment">//任务通知状态改为eWaitingNotification</span></span><br><span class="line">            <span class="keyword">if</span>( xTicksToWait &gt; ( TickType_t ) <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//将任务添加到延时列表，并进行任务调度</span></span><br><span class="line">                <span class="keyword">if</span>( uxListRemove( &amp;( pxCurrentTCB[ xPortGetCoreID() ]-&gt;xGenericListItem ) ) == ( UBaseType_t ) <span class="number">0</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    portRESET_READY_PRIORITY( pxCurrentTCB[ xPortGetCoreID() ]-&gt;uxPriority, uxTopReadyPriority );</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    mtCOVERAGE_TEST_MARKER();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">#<span class="meta-keyword">if</span> ( INCLUDE_vTaskSuspend == 1 )</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>( xTicksToWait == portMAX_DELAY )</span><br><span class="line">                    &#123;</span><br><span class="line">                        traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);</span><br><span class="line">                        vListInsertEnd( &amp;xSuspendedTaskList, &amp;( pxCurrentTCB[ xPortGetCoreID() ]-&gt;xGenericListItem ) );</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        xTimeToWake = xTickCount + xTicksToWait;</span><br><span class="line">                        prvAddCurrentTaskToDelayedList( xPortGetCoreID(), xTimeToWake );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* INCLUDE_vTaskSuspend */</span></span></span><br><span class="line">                &#123;</span><br><span class="line">                    xTimeToWake = xTickCount + xTicksToWait;</span><br><span class="line">                    prvAddCurrentTaskToDelayedList( xTimeToWake );</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* INCLUDE_vTaskSuspend */</span></span></span><br><span class="line">                portYIELD_WITHIN_API();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mtCOVERAGE_TEST_MARKER();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            mtCOVERAGE_TEST_MARKER();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    taskEXIT_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">    taskENTER_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">    &#123;</span><br><span class="line">        ulReturn = pxCurrentTCB[ xPortGetCoreID() ]-&gt;ulNotifiedValue;<span class="comment">//任务通知值不为0，则先获取任务通知值</span></span><br><span class="line">        <span class="keyword">if</span>( ulReturn != <span class="number">0U</span>L )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( xClearCountOnExit != pdFALSE )</span><br><span class="line">            &#123;</span><br><span class="line">                pxCurrentTCB[ xPortGetCoreID() ]-&gt;ulNotifiedValue = <span class="number">0U</span>L;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ( pxCurrentTCB[ xPortGetCoreID() ]-&gt;ulNotifiedValue )--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            mtCOVERAGE_TEST_MARKER();</span><br><span class="line">        &#125;</span><br><span class="line">        pxCurrentTCB[ xPortGetCoreID() ]-&gt;eNotifyState = eNotWaitingNotification;<span class="comment">//更新任务通知状态为eNotWaitingNotification</span></span><br><span class="line">    &#125;</span><br><span class="line">    taskEXIT_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">    <span class="keyword">return</span> ulReturn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FreeRTOS中的空闲任务"><a href="#FreeRTOS中的空闲任务" class="headerlink" title="FreeRTOS中的空闲任务"></a>FreeRTOS中的空闲任务</h2><blockquote><p>空闲任务不仅仅是为了满足任务调度器启动以后至少有一个任务运行而创建的，空闲任务中还会去做一些其他的事情，如下：</p><ol><li>判断系统中是否有任务删除自己，如果有，则在空闲任务中释放被删除任务的任务堆栈和任务控制块的内存</li><li>运行用户设置的空闲任务钩子函数</li><li>判断是否开启低功耗tickless模式，如果开启，则还需要做相应的处理</li></ol><p>用户可以创建与空闲任务优先级相同的应用任务，当宏configIDLE_SHOULD_YIELD为1时，空闲任务会让出时间片给相同优先级的应用任务。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">portTASK_FUNCTION</span><span class="params">( prvIdleTask, pvParameters )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">( <span class="keyword">void</span> ) pvParameters;</span><br><span class="line"><span class="keyword">for</span>( ;; )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//检查是否有任务要删除自己，如果有，则释放这些任务的任务控制块TCP和任务堆栈的内存</span></span><br><span class="line">prvCheckTasksWaitingTermination();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_PREEMPTION == 0 )</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果没有使用抢占式内核，则强制执行一次任务切换，查看是否有其他任务有效；如果有使用抢占式内核，则不需要这一步，因为只要有任何任务就绪，之后都会自动抢夺CPU使用权</span></span><br><span class="line">taskYIELD();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* configUSE_PREEMPTION */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( ( configUSE_PREEMPTION == 1 ) &amp;&amp; ( configIDLE_SHOULD_YIELD == 1 ) )</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果使用抢占式内核并且使能时间片调度，则当有任务和空闲任务共享一个优先级，并且此任务处于就绪态时，空闲任务就应该放弃本时间片，将本时间片剩余的时间让给这个就绪任务。</span></span><br><span class="line"><span class="keyword">if</span>( listCURRENT_LIST_LENGTH( &amp;( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) &gt; ( UBaseType_t ) <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">taskYIELD();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* ( ( configUSE_PREEMPTION == 1 ) &amp;&amp; ( configIDLE_SHOULD_YIELD == 1 ) ) */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_IDLE_HOOK == 1 )</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">vApplicationIdleHook</span><span class="params">( <span class="keyword">void</span> )</span></span>;</span><br><span class="line"><span class="comment">//执行用户定义的空闲任务钩子函数，注意钩子函数里面不能使用任何可以引起阻塞空闲任务的API函数</span></span><br><span class="line">vApplicationIdleHook();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* configUSE_IDLE_HOOK */</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* Call the esp-idf hook system */</span></span><br><span class="line">esp_vApplicationIdleHook();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果使能了Tickless模式，则执行相关的处理代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_TICKLESS_IDLE != 0 )</span></span><br><span class="line">&#123;</span><br><span class="line">TickType_t xExpectedIdleTime;</span><br><span class="line">BaseType_t xEnteredSleep = pdFALSE;</span><br><span class="line"><span class="comment">//获取处理器进入低功耗模式的时长</span></span><br><span class="line">xExpectedIdleTime = prvGetExpectedIdleTime();</span><br><span class="line"><span class="keyword">if</span>( xExpectedIdleTime &gt;= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )</span><br><span class="line">&#123;</span><br><span class="line">taskENTER_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//重新采集一次时间值</span></span><br><span class="line">configASSERT( xNextTaskUnblockTime &gt;= xTickCount );</span><br><span class="line">xExpectedIdleTime = prvGetExpectedIdleTime();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( xExpectedIdleTime &gt;= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )</span><br><span class="line">&#123;</span><br><span class="line">traceLOW_POWER_IDLE_BEGIN();</span><br><span class="line">xEnteredSleep = portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );<span class="comment">//FreeRTOS进入低功耗Tickless模式</span></span><br><span class="line">traceLOW_POWER_IDLE_END();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">taskEXIT_CRITICAL(&amp;xTaskQueueMutex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mtCOVERAGE_TEST_MARKER();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( !xEnteredSleep )<span class="comment">//FreeRTOS没有真的进入Tickless模式</span></span><br><span class="line">&#123;</span><br><span class="line">esp_vApplicationWaitiHook();<span class="comment">//CPU进入低功耗模式</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">esp_vApplicationWaitiHook();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* configUSE_TICKLESS_IDLE */</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FreeRTOS低功耗Tickless模式"><a href="#FreeRTOS低功耗Tickless模式" class="headerlink" title="FreeRTOS低功耗Tickless模式"></a>FreeRTOS低功耗Tickless模式</h2><blockquote><p>当处理器进入空闲任务周期以后就会关闭系统节拍中断（滴答定时器中断），只有其他中断发生或者其他任务需要处理的时候，处理器才会被从低功耗模式中唤醒。为此将会面临两大问题：</p><ol><li>关闭系统节拍中断会导致系统节拍计数器停止，系统时钟就会停止。<ul><li>我们需要记录下系统节拍中断的关闭时间，当系统节拍中断再次开启运行的时候补上这段时间即可，这时候就需要使用定时器来记录这段该补上的时间</li></ul></li><li>如何保证下一个要运行的任务能被准确地唤醒？<ul><li>处理器在进入低功耗模式之前获取还有多长时间运行下一个任务，开启定时器，定时周期设置为这个时间，定时时间到了则产生定时中断，处理器就从低功耗模式唤醒了</li></ul></li></ol></blockquote><h4 id="Tickless的具体实现"><a href="#Tickless的具体实现" class="headerlink" title="Tickless的具体实现"></a>Tickless的具体实现</h4><ol><li>要想使用Tickless模式，则必须首先将FreeRTOSConfig.h中的宏configUSE_TICKLESS_IDLE设置为1</li><li>使能Tickless模式以后，当下面两种情况都出现的时候，FreeRTOS内核就会调用宏portSUPPRESS_TICKS_AND_SLEEP来处理低功耗相关的工作:<ul><li>空闲任务是当前唯一可运行的任务，因为其他所有的任务都处于阻塞或者挂起态</li><li>系统处于低功耗模式的时间至少大于configEXPECTED_IDLE_TIME_BEFORE_SLEEP个时钟节拍</li></ul></li><li>处理器工作在低功耗模式的时间虽说没有任何限制，一个时钟节拍也行、滴答定时器所能计时的最大值也行，但是时间太短意义也不大，所以必须对工作在低功耗模式的时间做个限制，不能太短了，宏config EXPECTED_IDLE_TIME_BEFORE_SLEEP就是用来实现这个功能的</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> portSUPPRESS_TICKS_AND_SLEEP( idleTime ) vApplicationSleep( idleTime )</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> IRAM_ATTR <span class="title">vApplicationSleep</span><span class="params">( TickType_t xExpectedIdleTime )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> result = <span class="literal">false</span>;</span><br><span class="line">    portENTER_CRITICAL(&amp;s_switch_lock);</span><br><span class="line">    <span class="keyword">if</span> (s_mode == PM_MODE_LIGHT_SLEEP &amp;&amp; !s_is_switching) &#123;</span><br><span class="line">        <span class="comment">//计算可以睡眠的时长</span></span><br><span class="line">        <span class="keyword">int64_t</span> next_esp_timer_alarm = esp_timer_get_next_alarm();</span><br><span class="line">        <span class="keyword">int64_t</span> now = esp_timer_get_time();</span><br><span class="line">        <span class="keyword">int64_t</span> time_until_next_alarm = next_esp_timer_alarm - now;</span><br><span class="line">        <span class="keyword">int64_t</span> wakeup_delay_us = portTICK_PERIOD_MS * <span class="number">1000L</span>L * xExpectedIdleTime;</span><br><span class="line">        <span class="keyword">int64_t</span> sleep_time_us = MIN(wakeup_delay_us, time_until_next_alarm);</span><br><span class="line">        <span class="keyword">if</span> (sleep_time_us &gt;= configEXPECTED_IDLE_TIME_BEFORE_SLEEP * portTICK_PERIOD_MS * <span class="number">1000L</span>L) &#123;</span><br><span class="line">            esp_sleep_enable_timer_wakeup(sleep_time_us - LIGHT_SLEEP_EARLY_WAKEUP_US);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_PM_TRACE</span></span><br><span class="line">            <span class="comment">/* to force tracing GPIOs to keep state */</span></span><br><span class="line">            esp_sleep_pd_config(ESP_PD_DOMAIN_RTC_PERIPH, ESP_PD_OPTION_ON);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            <span class="keyword">int</span> core_id = xPortGetCoreID();</span><br><span class="line">            ESP_PM_TRACE_ENTER(SLEEP, core_id);</span><br><span class="line">            <span class="keyword">int64_t</span> sleep_start = esp_timer_get_time();</span><br><span class="line">            esp_light_sleep_start();<span class="comment">//开始睡眠</span></span><br><span class="line">            <span class="keyword">int64_t</span> slept_us = esp_timer_get_time() - sleep_start;</span><br><span class="line">            ESP_PM_TRACE_EXIT(SLEEP, core_id);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">uint32_t</span> slept_ticks = slept_us / (portTICK_PERIOD_MS * <span class="number">1000L</span>L);</span><br><span class="line">            <span class="keyword">if</span> (slept_ticks &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//根据实际休眠的时间来调整系统滴答计数器的值</span></span><br><span class="line">                vTaskStepTick(slept_ticks);</span><br><span class="line">                <span class="comment">//触发tick中断</span></span><br><span class="line">                XTHAL_SET_CCOUNT(XTHAL_GET_CCOMPARE(XT_TIMER_INDEX) - <span class="number">16</span>);</span><br><span class="line">                <span class="keyword">while</span> (!(XTHAL_GET_INTERRUPT() &amp; BIT(XT_TIMER_INTNUM))) &#123;</span><br><span class="line">                    ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    portEXIT_CRITICAL(&amp;s_switch_lock);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;FreeRTOS系统配置&quot;&gt;&lt;a href=&quot;#FreeRTOS系统配置&quot; class=&quot;headerlink&quot; title=&quot;FreeRTOS系统配置&quot;&gt;&lt;/a&gt;FreeRTOS系统配置&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;FreeRTOS的系统配置文件为F
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="FreeRTOS" scheme="https://suda-morris.github.io/tags/FreeRTOS/"/>
    
  </entry>
  
  <entry>
    <title>Learn Altium Designer</title>
    <link href="https://suda-morris.github.io/2017/07/01/altium-desinger/"/>
    <id>https://suda-morris.github.io/2017/07/01/altium-desinger/</id>
    <published>2017-07-01T15:03:00.000Z</published>
    <updated>2018-07-05T01:38:09.638Z</updated>
    
    <content type="html"><![CDATA[<h3 id="软件汉化"><a href="#软件汉化" class="headerlink" title="软件汉化"></a>软件汉化</h3><ol><li>DXP-&gt;Preferences</li><li>在System-&gt;General中选择Use localized resources复选框</li><li>重启软件</li></ol><h3 id="恢复桌面布局"><a href="#恢复桌面布局" class="headerlink" title="恢复桌面布局"></a>恢复桌面布局</h3><p>当文件桌面发生混乱时，可通过View-&gt;Desktop Layout-&gt;Default命令来恢复默认的桌面布局</p><h3 id="公制与英制"><a href="#公制与英制" class="headerlink" title="公制与英制"></a>公制与英制</h3><p>$1mil = 1/1000inch = 0.0254mm$</p><h3 id="设置图纸格点"><a href="#设置图纸格点" class="headerlink" title="设置图纸格点"></a>设置图纸格点</h3><p>图纸格点设置包括两个方面，一个是图纸的Snap捕捉格点，一个是可视格点，还有一个是电栅格（电气格点）。</p><ol><li>snap捕捉格点：表示放置线时可以捕捉到放置端点位置的点。</li><li>可视格点：表示可见到的网格大小</li><li>电栅格：绘制原理图的导线时系统会以电栅格大小为半径，以光标所在位置为中心进行查找电气节点，如果在此范围内有电气节点则光标会自动移动到此电气节点上</li></ol><h3 id="视图的刷新"><a href="#视图的刷新" class="headerlink" title="视图的刷新"></a>视图的刷新</h3><p>绘制原理图时，在完成滚动画面、移动元件等操作后，又会出现画面显示残留的斑点、线段或图形变性等问题。虽然这些内容不会影响电路的正确性，但是为了美观，通过View-&gt;Refresh命令可以使显示恢复</p><h3 id="选择一个连接上的所有导线"><a href="#选择一个连接上的所有导线" class="headerlink" title="选择一个连接上的所有导线"></a>选择一个连接上的所有导线</h3><p>选择Edit-&gt;Select-&gt;Connection命令，将鼠标指针移动到某个连接的导线上，单击，则该连接上的所有导线都被选中，并高亮地显示出来，元器件也被特殊标示出来</p><h3 id="绘制椭圆曲线"><a href="#绘制椭圆曲线" class="headerlink" title="绘制椭圆曲线"></a>绘制椭圆曲线</h3><p>在绘图工具栏中选择绘制椭圆，按Tab键，输入相应的配置参数后在不移动鼠标的情况下连续单击5次</p><h3 id="使用Ultra-Librarian软件自动生成原理图库和封装库"><a href="#使用Ultra-Librarian软件自动生成原理图库和封装库" class="headerlink" title="使用Ultra Librarian软件自动生成原理图库和封装库"></a>使用Ultra Librarian软件自动生成原理图库和封装库</h3><ol><li><a href="http://webench.ti.com/cad/ULib.zip" target="_blank" rel="noopener">下载ULib</a>，解压缩后安装</li><li>打开软件，Load Data导入bxl文件(芯片厂商提供)</li><li>选择输出格式为Altium Designer，然后Export，导出的文件一般放在软件目录的Exported下，比如D:\UltraLibrarian\Library\Exported<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/H9HAk1N.png" alt="数据文件导入" title="">                </div>                <div class="image-caption">数据文件导入</div>            </figure></li><li>进入导出后的文件夹，用altium软件打开PrjScr工程文件</li><li>在打开的软件中双击打开UL_Form.pas文件，并运行</li><li>紧接着弹出的对话框中，选择导出文件夹下的【日期.txt]格式的文件</li><li>完成后会在相同的目录下生成需要的库文件<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/l3Mzy9u.png" alt="使用Altium软件完成余下工作" title="">                </div>                <div class="image-caption">使用Altium软件完成余下工作</div>            </figure></li></ol><h3 id="测量距离"><a href="#测量距离" class="headerlink" title="测量距离"></a>测量距离</h3><p>快捷键：Ctrl+M</p><h3 id="Mechanical13和Mechanical15"><a href="#Mechanical13和Mechanical15" class="headerlink" title="Mechanical13和Mechanical15"></a>Mechanical13和Mechanical15</h3><ol><li>Mechanical13用于代表元件封装本体外形</li><li>Mechanical15用于表示囊括元件外形（包括管脚）所需的最小矩形</li></ol><h3 id="从PCB文件生成封装库文件"><a href="#从PCB文件生成封装库文件" class="headerlink" title="从PCB文件生成封装库文件"></a>从PCB文件生成封装库文件</h3><ol><li>Altium提供了一个从PCB文件生成封装库文件的功能，该功能自动创建一个封装库并将PCB文件中所有用到的元件封装导入该封装库</li><li>方法：在PCB编辑器中单击：Design-&gt;Make PCB Library</li></ol><h3 id="敷铜"><a href="#敷铜" class="headerlink" title="敷铜"></a>敷铜</h3><ol><li>印刷线路板上大面积的敷铜通常有两种，一种用作散热，一种用作屏蔽来减小干扰</li><li>大面积敷铜上一般要开窗口（网状），这是由于印刷线路板板材的基板与铜箔之间的粘合剂在浸焊或长时间受热（如波峰焊），会产生挥发性气体无法排出，热量不易散发，以致产生铜箔膨胀、脱落现象。</li><li>每个板卡都包含了大量敷铜多边形，在设计时一个方便的管理方法就是把他们堆放在一起，即所谓敷铜搁置，也称敷铜堆放。堆放敷铜多边形不会将他们删除，而是把它们放进PCB文件中保留其完整的定义，但在设计窗口中他们将不再出现。</li><li>敷铜管理器：Tool-&gt;Polygon Pours-&gt;Polygon Manager</li></ol><h3 id="PCB的组成部分"><a href="#PCB的组成部分" class="headerlink" title="PCB的组成部分"></a>PCB的组成部分</h3><ol><li>元件：用于完成电路功能的各种器件</li><li>铜箔：铜箔在电路板上可以表现为导线、焊盘、过孔和敷铜等</li><li>丝印层：印刷电路板的顶层，采用绝缘材料制成。在丝印层上可以标注文字，注释电路板上的元件和整个电路板。丝印层还能起到保护顶层导线的功能</li><li>印制材料：采用绝缘材料制成，用于支撑整个电路板</li></ol><h3 id="PCB的板层"><a href="#PCB的板层" class="headerlink" title="PCB的板层"></a>PCB的板层</h3><ol><li>Altium Designer提供堆栈管理器对各层属性进行管理，在堆栈管理器中可以定义层的结构，看到堆栈层的立体效果。选择：Design-&gt;Layer Stack Manager</li><li>PCB工作层面可以分成以下几种类型：<ol><li>信号层：即为用于建立电气连接的铜箔层</li><li>内平面：是专门用于建立电源网络的铜箔，可以算作信号层的一种</li><li>机械层：是用于支持电路板的印制材料层</li><li>掩膜层：为了方便焊接而设立的<ol><li>Top/Bottom Solder，阻焊层，是指印刷电路板要上绿油的部分。实际上这阻焊层使用的是负片输出，所以在阻焊层的形状映射到板子上以后，并不是上了绿油阻焊，反而是露出了铜皮。所以阻焊层的意思是在整片阻焊的绿油上开窗，目的是允许焊接，默认情况下，没有阻焊层的区域都要上绿油</li><li>Top/Bottom Paste，锡膏防护层，这一层只要露出所有需要焊接的焊盘</li></ol></li><li>丝印层：即电路板的说明文字层</li><li>其余层<ol><li>Drill Guide和Drill Drawing：用于描述钻孔图及钻孔位置</li><li>Keep-out Layer：禁止布线层</li><li>Multi-Layer：设置更多层面</li></ol></li></ol></li></ol><h3 id="电路板物理与电气边界"><a href="#电路板物理与电气边界" class="headerlink" title="电路板物理与电气边界"></a>电路板物理与电气边界</h3><ol><li>电路板的物理边界由机械层1来定义</li><li>电路板的电气边界由Keep-out层来定义</li><li>一般物理边界与电气边界间距50mil即可。比如电路板大小为5000milX4000mil，那么电气边界大小为4900milX3900mil</li></ol><h3 id="PCB设计规则"><a href="#PCB设计规则" class="headerlink" title="PCB设计规则"></a>PCB设计规则</h3><ol><li>一般每个特定的网络布线宽度规则需要添加一个规则名称，以便与其他网络区分</li><li>通常为了降低布线间的耦合面积，减小干扰，不同层的布线需要设置成不同的走向。如双层板，默认状态下顶层为垂直走向，底层为水平走向。</li><li>表贴式焊盘的引出导线一般都是引出一段长度后才开始拐弯，这样就不会出现和相邻焊盘太近的情况</li><li>阻焊层扩展<ol><li>通常阻焊层除焊盘或过孔外，整面都铺满阻焊剂。阻焊层的作用就是防止不该被焊上的部分被焊锡连接，回流焊就是靠阻焊层实现的。板子整面经过高温的锡水，没有阻焊层的裸露电路板就被粘锡焊接了，而有阻焊层的部分则不会粘锡。阻焊层的另一个作用是起到提高布线的绝缘性，防氧化和美观</li><li>阻焊剂印制到电路板上时，焊盘或过孔被空出，空出的面积要比焊盘或过孔大一些，这就是阻焊层扩展</li></ol></li><li>锡膏防护层扩展<ol><li>表贴式组件在焊接前，先对焊盘涂一层锡膏，然后将组件粘在焊盘上，再用回流焊机焊接。通常在大规模生产时，标贴式焊盘的涂膏是通过一个钢模完成的。钢模上对应焊盘的位置按焊盘形状镂空，涂膏时将钢模覆盖在电路板上，将锡膏放在钢模上，用括板来回括，锡膏通过镂空的部位涂到焊盘上。PCB设计软件的锡膏层或锡膏防护层的数据就是用来制作钢模的，钢模上镂空的面积要比设计焊盘的面积小，这个差值便是锡膏防护层扩展，默认是0mil</li></ol></li><li>在数字电路中，是否为高频电路取决于信号的上升沿和下降沿，而不是信号的频率</li><li>当系统工作在50MHz时，将产生传输线效应和信号完整性问题。当系统时钟达到120MHz时，除非使用高速电路设计知识，否则基于传统方法设计的PCB将无法工作。</li><li>通常约定如果线传播延时大于数字信号驱动端的上升时间，则认为此类信号是高速信号并产生传输线效应</li><li>PCB上每英寸/单位的延时时间为0.167ns，但是如果过孔多，器件引脚多，布线上设置的约束多，延时将增大</li><li>如果采用CMOS或TTL电路进行设计，工作频率小于10MHz时，布线长度应不大于7in。工作频率在50MHz以上时，布线长度应不大于1.5in。如果工作频率达到或超过75MHz时，布线长度应在1in。对于GaAs芯片最大的布线长度应为0.3in。</li><li>解决传输线效应的另一个方法是选择正确的布线路径和终端拓扑结构。走线的拓扑结构是指一根网线的布线顺序以及布线结构。当使用告诉逻辑器件的时候，除非走线分支长度保持很短，否则边沿快速变化的信号将被信号主干走线上的分支走线所扭曲。通常情形下，PCB走线采用两种基本拓扑结构，即<strong>菊花形</strong>布线和<strong>星形</strong>布线。</li><li>对于菊花形布线，布线从驱动端开始，一次到达各接收端。如果使用串联电阻来改变信号特性，串联电阻的位置应该紧靠驱动端。在控制走线的高次谐波干扰方面，菊花链走线效果最好。</li><li>星形拓扑结构可以有效避免时钟信号的不同步问题，但在密度很高的PCB上手工完成布线十分困难。采用自动布线器是完成星形布线的最好方法。每条分支上都需要终端电阻。终端电阻的阻值应和连线的特征阻抗相匹配。</li><li>等长网络布线规则也称为匹配网络长度规则，用于设置指定网络等长布线规则。该规则以规定范围中的最长布线为基准，使其他网络通过匹配调整操作，以增长布线的形式在设定的公差范围内与之等长。增长的布线按设定的迂回模式（折现模式）进行布线。</li><li>在高速PCB设计时，设计者总是希望过孔越小越好，这样板上就可以有更多的布线空间。此外，过孔越小，其自身的寄生电容也越小，更适合用于高速电路。但孔尺寸的减小同时带来了成本的增加。当孔的深度超过钻孔直径的6倍时，就无法保证孔壁能均匀镀铜。随着激光钻孔技术的发展，钻孔的尺寸越来越小，一般直径小于等于6mil的过孔称为微孔。</li><li>过孔在传输线上表现为阻抗不连续的断点，会造成信号的反射。一般过孔的等效阻抗比传输线低12%左右。但过孔因为阻抗不连续而造成的反射其实是微乎其微的，其反射系数仅为0.06，过孔产生的问题更多的集中在寄生电容和电感的影响。过孔的寄生电容会给电路造成的主要影响是延长了信号的上升时间，降低了电路的速度。</li><li>在实际设计中可以通过增大过孔和敷铜区的距离或者减小焊盘的直径来减小寄生电容</li><li>在高速数字电路的设计中，过孔的寄生电感带来的危害往往大于寄生电容的影响。它的寄生串联电感会削弱旁路电容的贡献，减弱整个电源系统的滤波效用。</li><li>如果要在PCB文件中有几个电源和地线，则需要建立布线类规则来增加电源和地线的宽度</li></ol><h3 id="添加泪滴及敷铜"><a href="#添加泪滴及敷铜" class="headerlink" title="添加泪滴及敷铜"></a>添加泪滴及敷铜</h3><ol><li>添加泪滴是指在导线与焊盘/过孔的链接处添加一段过渡铜箔，过渡铜箔呈现泪滴状。泪滴的作用是增加焊盘/过孔的机械强度，避免应力集中在导线与焊盘/过孔的连接处，而使连接处断裂或焊盘/过孔脱落。单击Tools-&gt;Teardrops</li><li>网格状填充区又称敷铜，敷铜就是将电路板中空白的地方铺满铜箔，添加敷铜不仅仅是为了好看，最主要的目的是提高电路板的抗干扰能力，起到屏蔽外界干扰的效果，通常将敷铜接地，这样电路板中空白的地方就铺满了接地的铜箔。</li></ol><h3 id="修改PCB的形状大小"><a href="#修改PCB的形状大小" class="headerlink" title="修改PCB的形状大小"></a>修改PCB的形状大小</h3><ol><li>在PCB页面用Keep-Out Layer画出所需板子的大小形状，必须是封闭的形状</li><li>选中画出的这些封闭的框框</li><li>Design-&gt;Board Shape-&gt;Define from selected objects</li></ol><h3 id="PCB-Logo制作"><a href="#PCB-Logo制作" class="headerlink" title="PCB Logo制作"></a>PCB Logo制作</h3><ol><li>DXP-&gt;Run Script</li><li>选择PCB Logo Creator下的工程文件<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/1NjlZbw.png" alt="PCB Logo Creator脚本工程" title="">                </div>                <div class="image-caption">PCB Logo Creator脚本工程</div>            </figure></li><li>选择RunConverterScript，点击OK<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/BXtrhYj.png" alt="选择bmp图片开始转换" title="">                </div>                <div class="image-caption">选择bmp图片开始转换</div>            </figure></li><li>点击Load选择需要使用的bmp位图</li><li>选择好丝印层，点击Convert，等待转换结束</li></ol><h3 id="硬件构件化电路原理图绘制的规则"><a href="#硬件构件化电路原理图绘制的规则" class="headerlink" title="硬件构件化电路原理图绘制的规则"></a>硬件构件化电路原理图绘制的规则</h3><ol><li>硬件构建分类<ol><li>核心构件：只提供接口，没有需求接口，比如芯片的硬件最小系统</li><li>中间构件：既有需求接口，又有提供接口，比如232电平转换构件</li><li>终端构件：只有需求接口，比如LCD构件</li></ol></li><li>通用规则<ol><li>元器件命名格式<ol><li>核心构件：其元器件直接编号命名，同种类型的元件命名时冠以相同的字母前缀，如R1，R2</li><li>中间构件和终端构件：元器件命名格式采用“构件名-标志字符？”，例如LCD构件中所有的电阻名称统一为“LCD-R”</li></ol></li><li>为硬件构件添加详细的文字描述</li><li>将前两歩产生的内容封装在一个虚线框内，组成硬件构件的内部实体</li><li>为该硬件构件添加与其他构件交互的输入、输出接口标识。接口标识有两种<ol><li>接口注释：位于虚线框内，是为构件接口所作的解释性文字，采用斜体</li><li>接口网标：位于虚线框外，具有电气特性</li></ol></li></ol></li><li>核心构件设计规则<ol><li>核心构件的接口标识均为网标，若同意引脚具有不同功能，则接口网标依据第一功能选项命名</li></ol></li><li>中间构件设计规则<ol><li>描述需求接口采用接口注释，描述提供接口采用接口网标</li><li>直观起见，将构件的需求接口放置在构件实体的左侧，提供接口放置在右侧</li><li>接口网标的命名规则是：构件名称-引脚信号/功能名称</li><li>接口注释名称前的构件名称可有可无</li></ol></li><li>终端构件设计规则<ol><li>接口标识均为斜体标注的接口注释</li></ol></li></ol><h3 id="布线总结"><a href="#布线总结" class="headerlink" title="布线总结"></a>布线总结</h3><ol><li>按小键盘的*键或大键盘的数字2键添加一个过孔</li><li>按L键可以切换布线层</li><li>按数字3可设定最小线宽、典型线宽、最大线宽的值进行切换</li><li>差分布线<ol><li>差分网络是两条存在耦合的传输线，一天携带信号，另一条则携带它的互补信号。使用差分对布线前要对设定差分对网络进行设置。设置可以在原理图中设置，也可以在PCB中进行设置</li><li>原理图中添加差分对规则:在命名差分对网络时，必须保证网络名的前缀是一样的，后缀中用下划线带一个N和一个P字母即可。命名好之后，点击菜单Place-&gt;Directives-&gt;DifferentialPair命令，在差分对上放置两个差分图标</li></ol></li></ol><h3 id="Altium中绘制自定义焊盘"><a href="#Altium中绘制自定义焊盘" class="headerlink" title="Altium中绘制自定义焊盘"></a>Altium中绘制自定义焊盘</h3><ol><li>在Top Overlay层绘制自定义焊盘的轮廓<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/Jjnolr0.png" alt="绘制自定义焊盘的轮廓" title="">                </div>                <div class="image-caption">绘制自定义焊盘的轮廓</div>            </figure></li><li>选中轮廓，Tool-&gt;Convert-&gt;Create Region from Selected Primitives<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/tF5WMEs.png" alt="创建Region" title="">                </div>                <div class="image-caption">创建Region</div>            </figure></li><li>将创建的Region放置在Top Layer上<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/5uMSDDr.png" alt="将创建的Region放置在Top Layer上" title="">                </div>                <div class="image-caption">将创建的Region放置在Top Layer上</div>            </figure></li><li>复制刚才得到的Region两次，分别放置在Top Paste和Top overlay层<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/OXxOcYs.png" alt="Top Paste和Top overlay层" title="">                </div>                <div class="image-caption">Top Paste和Top overlay层</div>            </figure></li><li>将Top Lay和Top paste，Top overlay层的图形重叠在一起，摆放到合适位置后，双击Top Layer的Region，打开Mask选项<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/UuPNroi.png" alt="打开Mask扩展选项" title="">                </div>                <div class="image-caption">打开Mask扩展选项</div>            </figure></li><li>在自定义Region中间防止一个小焊盘，标上正确的Designator<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/GmmOFit.png" alt="放置焊盘" title="">                </div>                <div class="image-caption">放置焊盘</div>            </figure></li><li>将新创建的封装库放到PCB文件中会出现警告信息，比如短路，需要在PCB界面中，使用design-&gt;netlist-&gt;configure physical nets来对这些无网络的元素进行处理<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/XuST9Vf.png" alt="处理无网络的元素" title="">                </div>                <div class="image-caption">处理无网络的元素</div>            </figure></li></ol><h3 id="6层板的层叠设置"><a href="#6层板的层叠设置" class="headerlink" title="6层板的层叠设置"></a>6层板的层叠设置</h3><ol><li>Top层</li><li>GND2层</li><li>Signal3层</li><li>PWR4层</li><li>GND5层</li><li>Bottom层</li></ol><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ol><li>单层与多层显示切换：Shift+S</li><li>切换走线规则：Shift+R</li><li>选择走线线宽：Shift+W</li><li>L打开层设置开关选项</li><li>S打开选择：S+L(线选)、S+I(框选)</li><li>J跳转：J+C(跳转到器件)、J+N(跳转到网络)</li><li>Q英寸和毫米切换</li><li>Delete删除已被选择的对象，E+D点选删除</li><li>切换层：小键盘上面的“+”、“-”</li><li>A+T：向上对齐、A+L：向左对齐、A+R：向右对齐、A+B：向下对齐</li><li>测量：Ctrl+M（哪里要测点哪里）、R+P（测量边距）</li><li>改变走线模式：Shift+空格</li><li>选择过孔：Shift+W</li><li>等间距走线：T+T+M（不可更改间距），P+M（可更改间距）</li><li>走线时显示走线长度：Shift+g</li><li>选中物理连接：Ctrl+H</li><li>Objects的显示与隐藏：Ctrl+D</li><li>单端蛇形线走线：T+R</li><li>清除错误标记：T+M</li><li>Shift+空格键，在交互布线的过程中，切换布线形状</li></ol><h3 id="用户自定义快捷键"><a href="#用户自定义快捷键" class="headerlink" title="用户自定义快捷键"></a>用户自定义快捷键</h3><ol><li>按住Ctrl点击需要自定义的命令图标，输入自定义的按键，如F2，F3等</li></ol><h3 id="多层板的添加与编辑"><a href="#多层板的添加与编辑" class="headerlink" title="多层板的添加与编辑"></a>多层板的添加与编辑</h3><ol><li>电源和地一般选择<strong>负片</strong>，信号层采用<strong>正片</strong></li></ol><h3 id="常用的全局操作"><a href="#常用的全局操作" class="headerlink" title="常用的全局操作"></a>常用的全局操作</h3><ol><li>更改丝印字体大小</li><li>过孔盖油</li></ol><h3 id="Chip器件的扇孔方式"><a href="#Chip器件的扇孔方式" class="headerlink" title="Chip器件的扇孔方式"></a>Chip器件的扇孔方式</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/3bxldlP.png" alt="Chip器件的扇孔方式" title="">                </div>                <div class="image-caption">Chip器件的扇孔方式</div>            </figure><h3 id="查看网络线的长度"><a href="#查看网络线的长度" class="headerlink" title="查看网络线的长度"></a>查看网络线的长度</h3><ul><li>Ctrl+鼠标中间</li></ul><h3 id="调整丝印位号到器件中心"><a href="#调整丝印位号到器件中心" class="headerlink" title="调整丝印位号到器件中心"></a>调整丝印位号到器件中心</h3><ul><li>全选过后A+P</li></ul><h3 id="USB的阻抗匹配与电源完整性"><a href="#USB的阻抗匹配与电源完整性" class="headerlink" title="USB的阻抗匹配与电源完整性"></a>USB的阻抗匹配与电源完整性</h3><ul><li>通常设计差分线采用5mil的线宽以及5.5mil的线距即可满足差分阻抗90欧姆</li><li>USB的输出电流是500mA，需注意VBUS以及GND的线宽，线宽大于20mil即可满足载流要求</li></ul><h3 id="以太网的阻抗匹配"><a href="#以太网的阻抗匹配" class="headerlink" title="以太网的阻抗匹配"></a>以太网的阻抗匹配</h3><ul><li>需要对RX±、TX±差分对进行阻抗匹配，通常阻抗控制在100欧姆，长度差控制在5mil以内<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/vRC72Aa.jpg" alt="差分线的处理" title="">                </div>                <div class="image-caption">差分线的处理</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/TvV6dym.jpg" alt="变压器集成在网口的以太网PCB布局" title="">                </div>                <div class="image-caption">变压器集成在网口的以太网PCB布局</div>            </figure></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" title="">                </div>                <div class="image-caption">suda-morris</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;软件汉化&quot;&gt;&lt;a href=&quot;#软件汉化&quot; class=&quot;headerlink&quot; title=&quot;软件汉化&quot;&gt;&lt;/a&gt;软件汉化&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;DXP-&amp;gt;Preferences&lt;/li&gt;
&lt;li&gt;在System-&amp;gt;General中选择Use l
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="PCB" scheme="https://suda-morris.github.io/tags/PCB/"/>
    
      <category term="Altium" scheme="https://suda-morris.github.io/tags/Altium/"/>
    
  </entry>
  
  <entry>
    <title>Interview By Code</title>
    <link href="https://suda-morris.github.io/2017/07/01/interview-by-code/"/>
    <id>https://suda-morris.github.io/2017/07/01/interview-by-code/</id>
    <published>2017-07-01T12:02:00.000Z</published>
    <updated>2018-07-05T01:38:09.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言面试"><a href="#C语言面试" class="headerlink" title="C语言面试"></a>C语言面试</h1><blockquote><p>栈S中已存放若干大于0的整数元素，试编写将S中元素进行排序的算法，使得S中元素自栈顶至栈底由小到大排序。要求算法<code>不借助任一辅助数据结构</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*递归法*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortStack</span><span class="params">(Stack* S)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">if</span>(IsEmpty(S))&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">m = Pop(S);</span><br><span class="line"><span class="keyword">if</span>(IsEmpty(S))&#123;</span><br><span class="line">Push(S,m);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">SortStack(S);</span><br><span class="line">n = Pop(S);</span><br><span class="line"><span class="keyword">if</span>(n&lt;m)&#123;</span><br><span class="line"><span class="comment">//n是最小的,m压栈后需要重新排序</span></span><br><span class="line">Push(S,m);</span><br><span class="line">SortStack(S);</span><br><span class="line">Push(S,n);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//m是最小的，n第二小</span></span><br><span class="line">Push(S,n);</span><br><span class="line">Push(S,m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>输入两个整数序列，第一个序列是栈的入栈序列，且递增有序。请判断第二个序列是否为合理的出栈序列<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*出栈序列A中的任一元素，若它的右边所有比它小的元素是从左向右递减的，则A就是一个可能的出栈序列*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isValid</span><span class="params">(<span class="keyword">int</span> A[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="comment">/*遍历数组中的每个数*/</span></span><br><span class="line">k = A[i];</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[j] &lt; A[i])&#123;</span><br><span class="line"><span class="comment">/*查看比A[i]小的数是否递减*/</span></span><br><span class="line"><span class="keyword">if</span>(A[j] &lt; k)&#123;</span><br><span class="line">k = A[j];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>输入两个整数序列，第一个序列是栈的入栈序列，请判断第二个序列是否为该栈的出栈序列<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">matchOK</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n, <span class="keyword">int</span> B[], <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">Stack s = <span class="keyword">new</span> Stack;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[i] != B[j])&#123;</span><br><span class="line">s.push(A[i]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!s.isEmpty())&#123;</span><br><span class="line"><span class="keyword">if</span>(s.getTop() != B[j])&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">j++;</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j != m)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>一个$m \times n$的Young氏矩阵时一个$m \times n$的矩阵，其中每一行的数据都从左到右排序，每一列的数据都从上到下排序。设有Young氏矩阵Y保存了$m \times n$个整数，请实现函数，查找给定元素target是否保存在Y中，若查找成功，算法返回1，否则返回0<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findElement</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m, <span class="keyword">int</span> A[][m],<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line"><span class="comment">//n行m列,起始位置取右上角</span></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=m<span class="number">-1</span>;</span><br><span class="line"><span class="comment">//二分查找</span></span><br><span class="line"><span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; i&lt;n &amp;&amp; j&gt;=<span class="number">0</span> &amp;&amp; j&lt;m)&#123;</span><br><span class="line"><span class="comment">//往左走</span></span><br><span class="line"><span class="keyword">if</span>(A[i][j] &gt; target)&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(A[i][j] &lt; target)&#123;</span><br><span class="line"><span class="comment">//往下走</span></span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>往Young氏矩阵中插入新的元素，要求保证矩阵的行、列有序性<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertElement</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m, <span class="keyword">int</span> A[][m],<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line"><span class="comment">/*先将插入元素target放在矩阵的右下角，选出上侧位置及左侧位置中的较大者K。若K&lt;target，则插入结束；若K&gt;target，则交换K与target，继续进行这个过程，直到找到合适的位置为止*/</span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i=n<span class="number">-1</span>,j=m<span class="number">-1</span>;<span class="comment">//n行，m列，右上角</span></span><br><span class="line"><span class="keyword">while</span>(flag)&#123;</span><br><span class="line"><span class="comment">//未到边界</span></span><br><span class="line"><span class="keyword">if</span>(i&gt;=<span class="number">0</span> &amp;&amp; j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//左侧大</span></span><br><span class="line"><span class="keyword">if</span>(A[i<span class="number">-1</span>][j] &lt; A[i][j<span class="number">-1</span>])&#123;</span><br><span class="line"><span class="keyword">if</span>(target &lt; A[i][j<span class="number">-1</span>])&#123;</span><br><span class="line"><span class="comment">//往左走</span></span><br><span class="line">A[i][j] = A[i][j<span class="number">-1</span>];</span><br><span class="line">j--;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上侧大</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(target &lt; A[i<span class="number">-1</span>][j])&#123;</span><br><span class="line"><span class="comment">//往上走</span></span><br><span class="line">A[i][j] = A[i<span class="number">-1</span>][j];</span><br><span class="line">i--;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//触及左边界，只能往上走</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(target &lt; A[i<span class="number">-1</span>][j])&#123;</span><br><span class="line">A[i][j] = A[i<span class="number">-1</span>][j];</span><br><span class="line">i--;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//触及上边界，只能往左走</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(target &lt; A[i][j<span class="number">-1</span>])&#123;</span><br><span class="line">A[i][j] = A[i][j<span class="number">-1</span>];</span><br><span class="line">j--;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">A[i][j] = target;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>输入两棵二叉树A和B，判断B是否是A的子结构（子结构包括树形以及节点中的值均一致）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> element;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>* <span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>* <span class="title">right</span>;</span></span><br><span class="line">&#125;*Btree;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HasSubtree</span><span class="params">(BTree root1,BTree root2)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(root1 &amp;&amp; root2)&#123;</span><br><span class="line"><span class="keyword">if</span>(root1-&gt;element == root2-&gt;element)&#123;</span><br><span class="line">result = DoesTree1HaveTree2(root1,root2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(result==<span class="number">0</span>)&#123;</span><br><span class="line">result = HasSubtree(root-&gt;left,root2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(result==<span class="number">0</span>)&#123;</span><br><span class="line">result = HasSubtree(root-&gt;right,root2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DoesTree1HaveTree2</span><span class="params">(Btree root1,Btree root2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!root2)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!root1)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(root1-&gt;element != root2-&gt;element)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DoesTree1HaveTree2(root1-&gt;left,root2-&gt;left) &amp;&amp;</span><br><span class="line">DoesTree1HaveTree2(root1-&gt;right,root2-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>设计算法，计算二叉树T的最大子树和<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSubTree</span><span class="params">(BiNode* T,<span class="keyword">int</span>* s)</span></span>&#123;</span><br><span class="line"><span class="comment">//s保存当前结点为根的树的结点和</span></span><br><span class="line"><span class="keyword">int</span> a,b,m,n;</span><br><span class="line">a=b=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!T)&#123;</span><br><span class="line">*s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(T-&gt;left==<span class="literal">NULL</span> &amp;&amp; T-&gt;right==<span class="literal">NULL</span>)&#123;</span><br><span class="line">*s = T-&gt;data;</span><br><span class="line"><span class="keyword">return</span> T-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">m = MaxSubTree(T-&gt;left,&amp;a);</span><br><span class="line">n = MaxSubTree(T-&gt;right,&amp;b);</span><br><span class="line">*s = a+b+T-&gt;data;</span><br><span class="line"><span class="keyword">return</span> Max3(*s,m,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>已知由n(n≥2)各正整数构成的集合A={a$_k$|0≤k&lt;n}，将其划分为两个不相交的子集A$_1$和A$_2$，元素个数分别是n$_1$和n$_2$，A$_1$和A$_2$中元素之和分别为S$_1$和S$_2$。设计一个尽可能高效的划分算法，满足|n$_1$-n$_2$|最小且|S$_1$-S$_2$|最大(将$\lfloor{n/2}\rfloor$个元素放在A$_1$中，其余的元素放在A$_2$中，即可满足题目要求)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*仿照快速排序的思想，基于枢轴将n个整数划分为两个子集，然后根据划分后的枢轴所处的位置i分别处理，无需对全部元素进行全排序*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setPartition</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pivotkey,low = <span class="number">0</span>,low0 = <span class="number">0</span>,high = n<span class="number">-1</span>,high0 = n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>,k = n/<span class="number">2</span>,i;</span><br><span class="line"><span class="keyword">int</span> s1=<span class="number">0</span>,s2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(flag)&#123;</span><br><span class="line">pivotkey = a[low];</span><br><span class="line"><span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line"><span class="keyword">while</span>(low&lt;high &amp;&amp; a[high]&gt;=pivotkey)&#123;</span><br><span class="line">high--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low!=high)&#123;</span><br><span class="line">a[low] = a[high];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(low&lt;high &amp;&amp; a[low]&lt;=pivotkey)&#123;</span><br><span class="line">low++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low!=high)&#123;</span><br><span class="line">a[high] = a[low];</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//end of while(low&lt;high)</span></span><br><span class="line">a[low] = pivotkey;</span><br><span class="line"><span class="keyword">if</span>(low==k<span class="number">-1</span>)&#123;</span><br><span class="line">flag = <span class="number">0</span>;<span class="comment">//如果枢轴元素是第n/2个元素，划分成功</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(low &lt; k<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="comment">//枢轴及之前的所有元素属于A1</span></span><br><span class="line">low0 =++low;</span><br><span class="line">high = high0;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//枢轴及之后的所有元素属于A2</span></span><br><span class="line">high0 = --high;</span><br><span class="line">low = low0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">s1 += a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=k;i&lt;n;i++)&#123;</span><br><span class="line">s2 += a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s2-s1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>用1,2,3,…9组成3个三位数abc,def和ghi，每个数字恰好使用一次，要求abc:def:ghi=1:2:3。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> i1,i2,i3;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//最小的三位数也就是123（要求每位数字不一样），三位数乘以3需要不超过1000</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">123</span>;i&lt;<span class="number">333</span>;i++)&#123;</span><br><span class="line">i1 = i;</span><br><span class="line">i2 = i*<span class="number">2</span>;</span><br><span class="line">i3 = i*<span class="number">3</span>;</span><br><span class="line"><span class="built_in">memset</span>(<span class="built_in">array</span>,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="built_in">array</span>));</span><br><span class="line"><span class="built_in">array</span>[i1/<span class="number">100</span>]++;</span><br><span class="line"><span class="built_in">array</span>[i1/<span class="number">10</span>%<span class="number">10</span>]++;</span><br><span class="line"><span class="built_in">array</span>[i1%<span class="number">10</span>]++;</span><br><span class="line"><span class="built_in">array</span>[i2/<span class="number">100</span>]++;</span><br><span class="line"><span class="built_in">array</span>[i2/<span class="number">10</span>%<span class="number">10</span>]++;</span><br><span class="line"><span class="built_in">array</span>[i2%<span class="number">10</span>]++;</span><br><span class="line"><span class="built_in">array</span>[i3/<span class="number">100</span>]++;</span><br><span class="line"><span class="built_in">array</span>[i3/<span class="number">10</span>%<span class="number">10</span>]++;</span><br><span class="line"><span class="built_in">array</span>[i3%<span class="number">10</span>]++;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">array</span>[j] != <span class="number">1</span>)&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d"</span>,i1,i2,i3);</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" title="">                </div>                <div class="image-caption">suda-morris</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C语言面试&quot;&gt;&lt;a href=&quot;#C语言面试&quot; class=&quot;headerlink&quot; title=&quot;C语言面试&quot;&gt;&lt;/a&gt;C语言面试&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;栈S中已存放若干大于0的整数元素，试编写将S中元素进行排序的算法，使得S中元素自栈顶至栈底
      
    
    </summary>
    
      <category term="Job Hunting" scheme="https://suda-morris.github.io/categories/Job-Hunting/"/>
    
    
      <category term="C" scheme="https://suda-morris.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning</title>
    <link href="https://suda-morris.github.io/2016/09/05/machine-learning/"/>
    <id>https://suda-morris.github.io/2016/09/05/machine-learning/</id>
    <published>2016-09-05T04:36:12.000Z</published>
    <updated>2018-07-05T01:38:09.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="机器学习（从例子中学习）"><a href="#机器学习（从例子中学习）" class="headerlink" title="机器学习（从例子中学习）"></a>机器学习（从例子中学习）</h2><ul><li>监督学习（有标注）<ul><li>逻辑回归</li><li>决策树</li></ul></li><li>无监督学习（无标注）<ul><li>K-means聚类算法</li></ul></li><li>增强学习（半监督学习）<ul><li>不是分类问题，也不是聚类的问题</li><li>研究的是决策问题（下棋、机器人寻路）</li><li>非完备信息</li><li>无训练样本</li></ul></li></ul><h2 id="机器学习常见算法一览"><a href="#机器学习常见算法一览" class="headerlink" title="机器学习常见算法一览"></a>机器学习常见算法一览</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/4DI146y.png" alt="机器学习常见算法" title="">                </div>                <div class="image-caption">机器学习常见算法</div>            </figure><ul><li>人脸识别大多都采用AdaBoost算法，本质上是决策树</li><li>垃圾邮件识别采用朴素贝叶斯算法</li><li>FP-Growth算法已经取代了Apriori算法</li><li>百度搜索结果的排序使用的是逻辑回归算法</li></ul><h2 id="增强学习（Reinforcement-Learning），也称为强化学习"><a href="#增强学习（Reinforcement-Learning），也称为强化学习" class="headerlink" title="增强学习（Reinforcement Learning），也称为强化学习"></a>增强学习（Reinforcement Learning），也称为强化学习</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/CQ2pZzo.png" alt="增强学习基本流程" title="">                </div>                <div class="image-caption">增强学习基本流程</div>            </figure><ul><li>由动物学习、参数扰动自适应控制等理论发展而来</li><li>算法分类<ul><li>时序差分算法</li><li>Q学习</li></ul></li><li>基本流程<ul><li>Agent产生一个动作</li><li>环境接受该动作后状态改变</li><li>同时产生会报反馈给Agent</li></ul></li></ul><h2 id="马尔可夫决策过程-–Markov-Decision-Processes-MDP增强学习的理论基础）"><a href="#马尔可夫决策过程-–Markov-Decision-Processes-MDP增强学习的理论基础）" class="headerlink" title="马尔可夫决策过程 –Markov Decision Processes,MDP增强学习的理论基础）"></a>马尔可夫决策过程 –Markov Decision Processes,MDP增强学习的理论基础）</h2><ul><li>马尔科夫链（Markov Chain），也称为马氏链</li><li>状态转移图就是一个简单的马尔科夫链</li><li>数学定义：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/kDltlHV.png" alt="马尔科夫链数学定义" title="">                </div>                <div class="image-caption">马尔科夫链数学定义</div>            </figure></li><li>状态转移的概率只依赖前一个状态</li><li>MDP模型<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/307BOZV.png" alt="MDP模型" title="">                </div>                <div class="image-caption">MDP模型</div>            </figure></li></ul><h2 id="Q学习算法"><a href="#Q学习算法" class="headerlink" title="Q学习算法"></a>Q学习算法</h2><ul><li>Q学习算法是一种用来解决马尔可夫决策过程中最优化问题的方法，通过这种算法来更新Q矩阵（决策矩阵）</li><li>Q函数：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/htV0WOO.png" alt="Q函数" title="">                </div>                <div class="image-caption">Q函数</div>            </figure></li><li>模拟退火（马尔科夫蒙特卡罗（MCMC）思想）<ul><li>以一定的概率接收目标函数值的下降</li><li>缓解了爬山算法容易陷入局部最优的缺陷</li></ul></li><li>Q学习算法描述（训练）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/JxHxRYQ.png" alt="Q学习算法描述（训练）" title="">                </div>                <div class="image-caption">Q学习算法描述（训练）</div>            </figure></li><li>Q学习算法描述（使用）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/rU8L0K0.png" alt="Q学习算法描述（使用）" title="">                </div>                <div class="image-caption">Q学习算法描述（使用）</div>            </figure></li><li></li></ul><h2 id="数据分析和机器学习的区别"><a href="#数据分析和机器学习的区别" class="headerlink" title="数据分析和机器学习的区别"></a>数据分析和机器学习的区别</h2><ul><li>数据特点<ul><li>交易数据vs行为数据</li><li>少量数据vs海量数据</li><li>采样分析vs全量分析</li></ul></li><li>交易数据的一致性要求远远超过行为数据，典型的交易数据如银行转账，所以处理交易数据不能用NOSQL（NotOnlySQL）数据库</li><li>解决的业务问题不同，数据分析用来报告过去的事情，机器学习用来预测未来的事情</li><li>数据分析的目标用户是公司高层的决策者，机器学习的目标用户是个体</li></ul><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><ul><li>是基于机器学习延伸出来的一个新的领域，由以人大脑结构为启发的神经网络算法为起源加之模型结构深度的增加发展，并伴随大数据和计算能力的提高而产生的一系列新的算法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;机器学习（从例子中学习）&quot;&gt;&lt;a href=&quot;#机器学习（从例子中学习）&quot; class=&quot;headerlink&quot; title=&quot;机器学习（从例子中学习）&quot;&gt;&lt;/a&gt;机器学习（从例子中学习）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;监督学习（有标注）&lt;ul&gt;
&lt;li&gt;逻辑回归&lt;/
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://suda-morris.github.io/categories/Algorithm/"/>
    
    
      <category term="ML" scheme="https://suda-morris.github.io/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>Docker Introduction</title>
    <link href="https://suda-morris.github.io/2016/08/25/docker/"/>
    <id>https://suda-morris.github.io/2016/08/25/docker/</id>
    <published>2016-08-25T11:37:00.000Z</published>
    <updated>2018-07-05T01:38:09.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><ol><li>内核要求：3.10以上</li><li>安装命令：curl -sSL <a href="https://get.docker.com/" target="_blank" rel="noopener">https://get.docker.com/</a> | sh</li><li>启动docker：systemctl start docker</li><li>将docker加入到开机启动：systemctl enable docker</li></ol><h2 id="Docker镜像分层技术"><a href="#Docker镜像分层技术" class="headerlink" title="Docker镜像分层技术"></a>Docker镜像分层技术</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/oE2fYaF.png" alt="docker的镜像分层技术" title="">                </div>                <div class="image-caption">docker的镜像分层技术</div>            </figure><ol><li>docker镜像是运行环境和业务代码的整体打包</li><li>Aufs是Another Union File System的缩写，支持将多个目录挂载到同一个虚拟目录下</li><li>已构建的镜像会设置成只读模式，read-write写操作是在read-only上的一种增量操作，不影响read-only层</li></ol><h2 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h2><ol><li>Docker官方镜像中心（hub.docker.com）</li><li>从中心镜像仓库下载到宿主机本地上的镜像称为本地镜像</li><li>如果第一次下载镜像，会把镜像所有层都下载回来</li><li>利用镜像分层技术，如果主机上已经有layer存在，下载新增的layer，类似git代码提交机制</li><li>docker pull &lt;$images&gt;</li></ol><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><ol><li>docker rmi &lt;$images&gt;</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker安装&quot;&gt;&lt;a href=&quot;#Docker安装&quot; class=&quot;headerlink&quot; title=&quot;Docker安装&quot;&gt;&lt;/a&gt;Docker安装&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;内核要求：3.10以上&lt;/li&gt;
&lt;li&gt;安装命令：curl -sSL &lt;a h
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="Docker" scheme="https://suda-morris.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Write English Essay</title>
    <link href="https://suda-morris.github.io/2016/05/26/english-writting/"/>
    <id>https://suda-morris.github.io/2016/05/26/english-writting/</id>
    <published>2016-05-26T07:29:00.000Z</published>
    <updated>2018-07-05T01:38:09.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="英语论文写作要点"><a href="#英语论文写作要点" class="headerlink" title="英语论文写作要点"></a>英语论文写作要点</h2><ol><li>读者希望在句子的开始看到熟悉的信息，事实上科技论文通常会包含很多新术语，所以一个容易理解的句子应该从读者熟悉的信息开始而以新信息结束，并在他们之间平滑过渡。</li><li>不管什么时候，每当你开始写新句，你应该问问自己，这些词前面有没有被提过。一定要把提到过的放前面，没提过的放后面。</li><li>读者想在主语之后立刻看到行为动词，如果动词和主语之间相隔太远，阅读就会被寻找动词打断。<strong>短的主语紧跟着动词加上长的宾语效果会更好</strong></li><li>读者期望每句只有一个重点，这个重点通常在句尾。<strong>把最好的，最重要的，和想要读者记住的东西放在句尾</strong></li><li>每个段落都应该只讲一个故事，在这一段里表达多个观点会使读者很难知道该记住什么，这段想表达什么。<strong>一段的第一句要告诉读者这一段讲什么的，一段的最后一句应该是这段的结论或者告诉读者下一段是什么</strong></li><li>对于表格来说，读者熟悉的信息应该出现在左边而新的信息出现在右边。做表格的另一个规则是把最好的留在最后，也就是最能使人感兴趣的结果应该放在最右边一列或在最后一行，因为这些地方是读者结束阅读并能留下印象的地方</li><li>对于图，我们至少应该对所有的标签使用大的黑体Helvetica字体，只画出重要的区域。精良不用彩色就能使曲线达到最大的区分</li><li><strong>只提出一个中心命题</strong>，论文里的观点太多，不但不好写，问题也容易多，读者也不易记住你要说什么</li><li>在这个中心命题的基础上，用一个迷人（但绝不能夸张）的标题来吸引审稿人的兴趣。审稿人只审批感兴趣的论文</li><li>合理解释每一个参数，合理说明每一个步骤</li><li>问问自己是否提供了足够重复你工作的所有细节，审稿人越容易再现你的工作，他就越可能接受你的文章</li><li>必须有说服力，尽量做彻底而不是半成品的工作</li><li>引用所有重要的研究工作，特别是经典力作。</li></ol><h2 id="文章的结构"><a href="#文章的结构" class="headerlink" title="文章的结构"></a>文章的结构</h2><ol><li>典型的科学论文包括标题，摘要，方法、实验步骤，结果，讨论，感谢和参考文献</li><li>结果是对科研事实的描述，而讨论是对结果的解释及说明它的意义，而不是重复结果的描述</li><li>建议从方法和结果部分开始写，因为你对方法和结果最熟悉，此外只有更好地理解方法和结果，才能确定中心命题</li><li>中心命题和标题都确定了以后，就该写引言了。第一件该做的事就是围绕中心命题来收集所有相关文献。搜索并研究所有最近和相关的文章，确认你有所有最新的论文。引用所有重要的文章，如果你不引用别人得到文献，别人也不会引用你的</li><li>引言的第一句最难写，因为它决定了你整个引言的走向。一个办法是把第一句和文章的标题连起来。在第一段以最基本和常见的术语来定义标题里用的一些术语。从这个术语，引入研究的领域和它的重要性。第二段应该对这个研究领域做一个鉴定性的论述。如果中心命题是关于解决一个问题的方法，这一段就应该指出这个当前研究中现存未解决的问题。描述解决这个问题的难度或挑战。第三段引入你提出的办法和它大致会带来什么效果。</li><li>讨论部分。可用于讨论的内容有：参数改变对结果的影响，与其他研究相比还有待解决的问题，将来或正在进行的工作</li><li>整片文章写完了，该写摘要了。典型的摘要包括课题领域的重要性（回到标题），要研究的问题，你方法的独特性，结果的意义和影响</li></ol><h2 id="构思与撰文"><a href="#构思与撰文" class="headerlink" title="构思与撰文"></a>构思与撰文</h2><ol><li>Introduction<ol><li>在叙述前人成果之后，用However来引导不足，提出一种新方法或新方向</li><li>提出自己的观点：We aim to//This paper reports on//This paper provides results//This paper extends the method//This paper focus on//The purpose of this paper is to//Furthermore,Moreover,In addition,we will also discuss</li><li>圈定自己的研究范围：introduction的另一个作用就是告诉读者你文章的主要研究内容。在前言的结尾就必须明确提出本文研究的范围：<ol><li>时间尺度</li><li>研究区域</li></ol></li><li>最后的圆场：在前言的最后，还可以总结性的提出“这一研究对其他研究有什么帮助”，或者说further studies on…will be summarized in our next study (or elsewhere)</li></ol></li><li>Discussion<ol><li>怎样提出观点<ol><li>如果观点不是这篇文章最新提出的，通常要用We confirm that…</li><li>对于自己很自信的观点，可以用We believe that…</li><li>通常，由数据推断出一定的结论，用Results indicate,infer，suggest，imply that…</li><li>在极其特别时才可用We put forward(discover,observe)……for the first time来强调自己的创新</li><li>如果自己对所提出的观点不完全肯定，可用We tentatively put forward(interrprete this to…)Or The results may due to attributed to resulted from……</li></ol></li><li>连接词与逻辑<ol><li>注意句子上下连贯，不能让句子独立。常见的连接词有：However，also，in addition，consequently，afterwards，moreover，Furthermore，further，althogh，unlike，in contrast，similarly，unfortunately，alternatively，parallel results，in order to，despite，for example，compared with，other results，thus，therefore</li><li>表示时间顺序：then，afterwards</li><li>表示两种对立的观点：AA put forward that…In contrast,BB believe或者Unlike AA,BB suggest</li><li>表示因果或者前后关系：Consequently，therefore，as a result</li><li>表明递进关系可用furthermore，further，moreover，in addition</li></ol></li><li>注意段落布局的整体逻辑。我们经常要叙述一个问题的几个方面，这种情况下，一定要注意逻辑结构。第一段要明确告诉读者你要讨论几个部分<ol><li>Therefore，there are three aspects of this problem have to be addressed. The first question involves…The second problem relates to…The third aspect deals with…</li></ol></li><li>讨论部分包括什么内容<ol><li>主要数据及其特征的总结</li><li>主要结论及与前人观点的对比</li><li>本文的不足。所谓不足，包络以下内容：<ol><li>研究的问题有点片面，讨论时一定要说：If should be noted that this study has examined only…We concentrate on only…We have to point out that we do not…Some limitation of this study are</li><li>结论有些不足：The results do not imply…The results can not be used do determine（or be taken as evidence of）…Unfortunately,we can not determine this data…Our results are lack of…但是指出这些不足后，一定要马上再次加强本文的重要性以及可能采取的手段来解决这些不足，为别人或者自己的下一步研究打下伏笔，如：Not withstanding its limitation,this study does suggest…However,these problems could be solved if we consider……Despite its preliminary character,this study can clearly indicate</li></ol></li><li>为了使文章清楚，第一次提出概念时，最好以括弧给出比较详细解释</li><li>绝对不能全面否定前人的成果，即使在你看来前人的结论完全不对。可以婉转地提出：Their studies may be more reasonable if they had…considered this situation或者Their results could be better convinced if they…</li></ol></li></ol></li></ol><h2 id="撰写外刊论文的体会"><a href="#撰写外刊论文的体会" class="headerlink" title="撰写外刊论文的体会"></a>撰写外刊论文的体会</h2><ol><li>Introduction是外刊文章最难写的部分之一（另外就是Discussion）。要写好Introduction，最重要的是要保持鲜明的层次感和极强的逻辑性<ol><li>阐述自己研究领域的基本内容。要尽量简洁明了，不啰嗦。</li><li>文献总结回顾。是Introduction的重头戏之一，要特别着重笔墨来描写。一方面要把该领域内过去和现在的状况全面概括出来，不能有丝毫的遗漏，特别是最新的进展和过去经典文献的引用。另一方面，文献引用和数据提供一定要准确，避免片面摘录部分结果而不反映文献的总体结果；</li><li>分析过去研究的局限性并阐明自己研究的创新点。</li><li>总结性描述论文的研究内容，可以分为一二三四等几个方面来描述，为Introduction做最后的收尾工作</li></ol></li><li>Methods部分描述论文的实验过程，这一过程的写作相对较为简单，可按照实验对象、实验设备、实验材料、实验记录、实验分析方法等来阻止行文。<strong>用过去时态</strong></li><li>Results的要求是翔实准确。结果提供一般是表和图。尽量使用最少的图提供最多的信息，最多不要超过8个。图片格式使用tif的比较多，不推荐使用bmp（jpg更不能用）。图和表格要放置在每一栏的顶部或者底部</li><li>Discussion可分为下面两个步骤来写（<strong>用现在时叙述已知或被证明的事实，用过去时描述本研究结果</strong>）：<ol><li>选择要深入讨论的问题。Discussion的一个重要作用就是要突出自己研究的创新性，并体现出显著区别于他人的特点。</li><li>对选中的问题按照一定层次从多个角度进行讨论，说理要有根据、问题要讲清楚、讲透彻</li></ol></li><li>Acknowleged&amp;Reference<ol><li>Ackonwledge主要分为两个，第一是表明研究的基金来源，中国一般都是Nature Science Foundation of China（NSFC，国家自然科学基金），写基金时一般要标注清楚基金号码第二是对参与人员（没有列在作者中的研究人员）和单位表示感谢，如果通过一审和最终接受发表，还要添上对editor的感谢，这是基本礼貌</li><li>Reference的重要在于格式。不同杂志对参考文献格式要求不一样</li></ol></li><li>摘要是论文要点的浓缩，应在文章各主要部分完成后再写，这样有利于文章要点的提炼。通常&lt;250字</li><li><strong>论文撰写时要自始至使用英语写，千万不要先写中文再翻译成英文，时态一般为过去时态</strong>。</li></ol><h2 id="英语学术论文写作的几个细节"><a href="#英语学术论文写作的几个细节" class="headerlink" title="英语学术论文写作的几个细节"></a>英语学术论文写作的几个细节</h2><ol><li>时态：当提到本文、此图、此表等说明了、表达了什么时要用一般现在时，而不用一般过去时。</li><li>大小写：当提及具体第几章、节；图表；方程式时，首个字母通常要大写</li><li>research，study，investigate：research可做名词、动词，但是通常做名词使用，句中需要动词时常用study或者investigate来表达</li><li>increase和decrease均可做名词和动词</li><li>compose，consist：A is composed of B and C；A consists of B and C</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;英语论文写作要点&quot;&gt;&lt;a href=&quot;#英语论文写作要点&quot; class=&quot;headerlink&quot; title=&quot;英语论文写作要点&quot;&gt;&lt;/a&gt;英语论文写作要点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;读者希望在句子的开始看到熟悉的信息，事实上科技论文通常会包含很多新术语，所以一个
      
    
    </summary>
    
      <category term="Writing Skills" scheme="https://suda-morris.github.io/categories/Writing-Skills/"/>
    
    
      <category term="English" scheme="https://suda-morris.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>SDN Introduction</title>
    <link href="https://suda-morris.github.io/2016/05/22/sdn/"/>
    <id>https://suda-morris.github.io/2016/05/22/sdn/</id>
    <published>2016-05-22T12:02:34.000Z</published>
    <updated>2018-07-05T01:38:09.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SDN简介"><a href="#SDN简介" class="headerlink" title="SDN简介"></a>SDN简介</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/xgAZ7qZ.jpg" alt="SDN与传统网络的区别" title="">                </div>                <div class="image-caption">SDN与传统网络的区别</div>            </figure><ol><li><p>软件定义网络（SDN）是一种网络网络虚拟化技术，利用OpenFlow协议把路由器的控制平面从数据平面中分离出来，以软件方式实现。这个架构可以让网络管理员在不更动硬件设备的前提下，以中央控制方式，用程序重新规划网络，为控制网络流量提供了新的方法，也提供了核心网络及应用创新的良好平台。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/QqFZ9Jo.jpg" alt="SDN的典型架构" title="">                </div>                <div class="image-caption">SDN的典型架构</div>            </figure></li><li><p>SDN的典型架构共分三层</p><ol><li>应用层包括各种不同的业务和应用</li><li>中间控制层主要负责处理数据平面资源的编排，维护网络拓扑、状态信息等</li><li>基础设施层负责基于流表的数据处理、转发和状态收集。</li></ol></li><li>SDN本质上具有“控制和转发分离”、“设备资源虚拟化”和“通用硬件及软件可编程”三大特性。可以带来的好处有<ol><li>设备硬件归一化，硬件只关注转发和存储能力，与业务特性解耦，可以采用相对廉价的商用架构来实现</li><li>网络的智能性全部由软件实现，网络设备的种类及功能由软件配置而定，对网络的操作控制和运行由服务器作为网络操作系统NOS来完成</li><li>对业务响应相对更快，可以定制各种网络参数，如路由、完全、策略、QoS、流量工程等，并实时配置到网络中，开通具体业务时间将缩短</li></ol></li></ol><h2 id="OpenFlow"><a href="#OpenFlow" class="headerlink" title="OpenFlow"></a>OpenFlow</h2><ol><li>OpenFlow是一种网络通讯协议，属于数据链路层，能够控制网络交换机或路由器的转送平面，借此改变网络数据包所走的网络路径</li><li>OpenFlow允许从远程控制网络交换机的数据转送表，通过新增、修改与移除数据包控制规则与行动，来改变数据包转送的路径。比起用访问控制列表（ACL）和路由协议，允许更复杂的流量管理。同时，OpenFlow允许不同应用商用一个简单，开源的协议去远程管理交换机</li></ol><h2 id="SDN的优势"><a href="#SDN的优势" class="headerlink" title="SDN的优势"></a>SDN的优势</h2><ol><li>喜欢同IT结构中的网络，根据业务需求部署上线以后，如果业务需求发生变动，重新修改响应网络设备上的配置是一件非常繁琐的事情。</li><li>在互联网、移动互联网瞬息万变的业务环境下，网络的高稳定与高性能还不足以满足业务需求，灵活性和敏捷性反而更为关键</li><li>SDN所做的事情是将网络设备上的控制权分离出来，由集中的控制器管理，无需依赖底层网络设备，屏蔽了来自底层网络设备的差异。而控制权是完全开放的，用户可以自定义任何想实现的网络路由和传输规则策略，从而更加灵活和智能</li><li>进行SDN改造后，无需对网络中每个节点的路由器反复进行配置，网络中的设备本身就是自动化连通的。只需要在使用时定义好简单的网络规则即可。</li><li>加入网络中有SIP、FTP、流媒体几种业务，网络的总带宽是一定的，那么如果某个时刻流媒体业务需要更多的带宽和流量，在传统网络中很难处理，在SDN改造后的网络中这很容易实现，SDN可以将流量整形、规整，临时让流媒体的管道更粗一些，让流媒体的带宽更大些，甚至关闭SIP和FTP的管道，待流媒体需求减少时在恢复原先的带宽占比</li><li>正是因为这种业务逻辑的开放性，使得网络作为“管道”的发展空间变为无限可能。如果未来云计算的业务应用模型可以简化为“云-管-端”，那么SDN就是“管”这一环的重要技术支撑</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SDN简介&quot;&gt;&lt;a href=&quot;#SDN简介&quot; class=&quot;headerlink&quot; title=&quot;SDN简介&quot;&gt;&lt;/a&gt;SDN简介&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img
      
    
    </summary>
    
      <category term="Network" scheme="https://suda-morris.github.io/categories/Network/"/>
    
    
      <category term="SDN" scheme="https://suda-morris.github.io/tags/SDN/"/>
    
  </entry>
  
  <entry>
    <title>S3C6410 Introduction</title>
    <link href="https://suda-morris.github.io/2016/05/15/s3c6410/"/>
    <id>https://suda-morris.github.io/2016/05/15/s3c6410/</id>
    <published>2016-05-15T13:04:55.000Z</published>
    <updated>2018-07-05T01:38:09.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h2><ol><li>总线是计算机各部件之间传送数据、地址和控制信息的公共通道，按照相对于CPU的位置可以分为：片内总线和片外总线</li><li>总线带宽=（总线宽度/8）*总线频率</li><li>ARM系列的处理器按照AMBA（Advanced Microcontroller Bus Architecture）规范设计总线，包括AHB、ASB、APB</li></ol><h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><ol><li>CPU在写Cache时，如果Cache与对应内存内容同步更新，则称为通写，如果只在写入Cache的内容移出时才更新对应内存内容，则称为回写</li></ol><h2 id="u-boot的编译配置"><a href="#u-boot的编译配置" class="headerlink" title="u-boot的编译配置"></a>u-boot的编译配置</h2><ol><li>执行make smdk2410_config 将u-boot顶层目录下的mkconfig脚本生成配置文件include/config.mk，内容正是根据Makefile最开发板的配置生成的<ol><li>ARCH=arm</li><li>CPU=arm920t</li><li>BOARD=smdk2410</li><li>VENDOR=samsung</li><li>SOC=s3c24x0</li></ol></li><li>Makefile的编译选项和规则在顶层目录的config.mk文件中定义。各体系结构通用的规则直接在该文件中定义。通过ARCH、CPU、BOARD、SOC等变量为不同硬件平台定义不同选项。不同体系结构的规则分别包含在各自的lib_xxx目录下的config.mk文件中</li></ol><h2 id="删减u-boot文件"><a href="#删减u-boot文件" class="headerlink" title="删减u-boot文件"></a>删减u-boot文件</h2><ol><li>删除board目录下非samsung的目录<ul><li>cd board/ &amp;&amp; rm -rf <code>ls | grep -v &quot;samsung&quot;</code></li></ul></li><li>删除board/samsung目录下非smdk6400的目录<ul><li>cd board/samsung/ &amp;&amp; rm -rf <code>ls | grep -v &quot;smdk6400&quot;</code></li></ul></li><li>删除cpu目录下非arm920t的目录<ul><li>cd cpu/ &amp;&amp; rm -rf <code>ls | grep -v &quot;arm1176&quot;</code></li></ul></li><li>删除include目录中非arm架构和非generic的汇编头文件目录<ul><li>cd include/ &amp;&amp; rm -rf <code>ls | grep &quot;asm-&quot; | egrep -v &quot;arm|generic&quot;</code></li></ul></li><li>删除include/asm-arm目录中非s3c64xx架构的头文件目录<ul><li>cd include/asm-arm/ &amp;&amp; rm -rf <code>ls | grep &quot;arch-&quot; | grep -v &quot;s3c64xx&quot;</code></li></ul></li><li>删除include/configs目录下非smdk6400.h的目录和文件<ul><li>cd include/configs/ &amp;&amp; rm -rf <code>ls | grep -v &quot;smdk6400.h&quot;</code></li></ul></li><li>删除u-boot顶层目录下非arm架构和非generic的库目录<ul><li>rm -rf <code>ls | grep &quot;lib_&quot; | egrep -v &quot;arm|generic&quot;</code></li></ul></li></ol><h2 id="建立suda6410配置"><a href="#建立suda6410配置" class="headerlink" title="建立suda6410配置"></a>建立suda6410配置</h2><ol><li>选择u-boot中原有的smdk6400作为suda6410的移植依据。修改顶层Makefile，检索到smdk2410_config目标所在行，添加suda6410_config目标规则<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/gnd6FyP.png" alt="修改Makefile" title="">                </div>                <div class="image-caption">修改Makefile</div>            </figure></li><li>创建板级支持文件，将原来存放smdk6410板级相关初始化代码的文件夹复制并命名为suda6410对应功能的文件夹<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/bXKnNmi.png" alt="创建板级支持文件" title="">                </div>                <div class="image-caption">创建板级支持文件</div>            </figure></li><li>修改board/samsung/suda6410/下的Makefile<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/m3EwWzx.png" alt="修改board/samsung/suda6410/下的Makefile" title="">                </div>                <div class="image-caption">修改board/samsung/suda6410/下的Makefile</div>            </figure></li><li>修改board/samsung/suda6410/下的config.mk，将原内容替换为如下代码。其中的TEXT_BASE指定最终u-boot镜像的链接基地址，LDSCRIPT则指定了连接器脚本的路径<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/F53F0Qj.png" alt="board/samsung/suda6410/config.mk" title="">                </div>                <div class="image-caption">board/samsung/suda6410/config.mk</div>            </figure></li><li>创建板级配置文件<ul><li>cd include/configs/ &amp;&amp; cp smdk6400.h suda6410.h</li></ul></li></ol><h2 id="u-boot的环境变量"><a href="#u-boot的环境变量" class="headerlink" title="u-boot的环境变量"></a>u-boot的环境变量</h2><ol><li>bootdelay、baudrate、netmask、ethaddr、bootfile、bootargs、bootcmd、serverip、ipaddr、stdin、stdout、stderr</li><li>如果在启动的时候看到u-boot打印出“Warning-bad CRC，using default environment”则说明u-boot没有在存放环境变量的固态存储器中找到有效的环境变量，只好使用编译时定义的默认环境变量。只要运行saveenv就可以把默认环境变量写入固态存储器，下次启动就不会有这个警告了。</li></ol><h2 id="S3C6410处理器概述"><a href="#S3C6410处理器概述" class="headerlink" title="S3C6410处理器概述"></a>S3C6410处理器概述</h2><ol><li>S3C6410是一个32位的RISC微处理器，采用了32位内部总线架构，内部总线由AXI（先进的可扩展接口）、AHB和APB总线组成</li><li>包括许多硬件外设，如一个相机接口，TFT24位真彩色液晶显示控制器，系统管理器（电源管理等），4通道UART，32通道DMA，4通道定时器，通用的I/O端口，IIS总线接口，IIC总线接口，USB主设备，USB OTG，SD主设备</li><li>矢量浮点型（VFP）协处理器支持</li><li>ARM1176JZF-S核心时钟频率最高是667MHz</li><li>包含3个片上PLL：APLL，MPLL和EPLL<ol><li>APLL生成一个独立的ARM操作时钟</li><li>MPLL生成系统参考时钟</li><li>EPLL产生用作外设IP的时钟</li></ol></li></ol><h2 id="系统控制器"><a href="#系统控制器" class="headerlink" title="系统控制器"></a>系统控制器</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/lmyZ0IA.png" alt="6410的结构框图" title="">                </div>                <div class="image-caption">6410的结构框图</div>            </figure><ol><li>系统控制器由时钟控制和电源管理控制两个部分组成</li><li>系统时钟控制<ol><li>ARMCLK给CPU提供时钟</li><li>HCLK给AXI/AHB总线外设提供时钟</li><li>PCLK给APB总线外设提供时钟</li></ol></li><li>S3C6410有3个PLL，一个仅用于ARMCLK，一个用于HCLK和PCLK，最后一个用于外设，特别是音频相关的时钟</li><li>S3C6410中电源管理有四个模块组成：通用时钟门控模式，空闲模式，停止模式和睡眠模式<ol><li>通用时钟门控模式用来控制内部外设时钟的开关</li><li>空闲模式仅中断ARMCLK到CPU</li><li>停止模式禁用PLL，这种情况下，电力消耗仅仅因为漏电流</li><li>睡眠模式断开内部电源。为了使用睡眠模式，两个独立的电源是必需的。两个电源中的一个用于唤醒逻辑提供电力，另一个提供其他内部逻辑，包括CPU</li></ol></li><li>ARM1176处理器是通过64位AXI总线连接到几个内存控制器上的，这样做是为了满足带宽需求。</li><li>多媒体协处理器分为5个电源域，包括MFC（多格式编解码器），JPEG，Camera接口，TV译码器等等。当IP没有被一个应用程序所要求时，5个电源域可以进行独立的控制，以减少不必要的电力</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/xErsUXB.png" alt="6410的时钟树" title="">                </div>                <div class="image-caption">6410的时钟树</div>            </figure><ol start="7"><li>S3C6410有3个PLL，分别是APLL，MPLL，和EPLL<ol><li>APLL用于产生RM时钟</li><li>MPLL用于产生系统主时钟，用于操作AXI、AHB和APB总线</li><li>EPLL用于特殊用途，主要用于外设，如UART，IIS，IIC等</li></ol></li><li>当在AXI总线或者AHB总线上时，操作速度最大可达到133MHz，当在APB总线上时，最大的操作速度可以达到66MHz</li></ol><h2 id="ARM核心寄存器"><a href="#ARM核心寄存器" class="headerlink" title="ARM核心寄存器"></a>ARM核心寄存器</h2><ol><li>ARM11有13个32位的通用寄存器R0~R12，另外有3个32位的寄存器分别是SP、LR和PC<ol><li></li></ol></li></ol><h2 id="GPIO特性"><a href="#GPIO特性" class="headerlink" title="GPIO特性"></a>GPIO特性</h2><ol><li>提供内部去抖滤波器</li><li>8通道复用ADC，最大500k采样/s和10位的分辨率</li></ol><h2 id="存储器映射"><a href="#存储器映射" class="headerlink" title="存储器映射"></a>存储器映射</h2><ol><li>S3C6410支持32位物理地址域，并且这些地址域分成两部分，一部分用于存储，另一部分用于外设</li><li>通过SPINE总线访问主存，主存的地址范围是从0x0000_0000~0x6FFF_FFFF。主存部分分成四个区域：引导镜像区、内部存储区、静态存储区和动态存储区<ol><li>引导镜像区的地址范围是从0x0000_0000~0x07FF_FFFF，但是没有实际的映射内存。引导镜像区反映一个镜像，这个镜像指向内存的一部分区域或者静态存储区。引导镜像的开始地址是0x0000_0000</li><li>内部存储区用于启动代码访问内部ROM和内部SRAM，也被称作steppingstone。每块内部存储器的起始地址是确定的，内部ROM的地址范围是0x0800_0000~0x0BFF_FFFF，但是实际存储仅32KB。该区域是只读的，并且当内部ROM启动被选择时，该区域能映射到引导镜像区。内部SRAM的地址范围是0x0C00_0000~0x0FFF_FFFF，但是实际存储仅4KB。当NAND闪存启动被选择时能映射到引导镜像区。</li><li>静态存储区的地址范围是0x1000_0000~0x3FFF_FFFF，通过该地址区域能访问SROM、SRAM、NOR Flash、同步NOR接口设备和Steppingstone。每一块区域代表一个芯片选择。例如地址范围从0x1000_0000~0x17FF_FFFF代表Xm0CSn[0]。每个芯片选择的开始地址是固定的。NAND Flash和CF/ATAPI不能通过静态存储区访问，因此任何Xm0CSn[5:2]映射到NFCON或CFCON，相关地址区域应当被访问。一个例外，如果Xm0CSn[2]用于NAND Flash，Steppingstone映射到存储区从0x2000_0000~0x27FF_FFFF</li><li>动态存储区域的地址范围是0x4000_0000~0x6FFF_FFFF。DMC0有权使用地址0x4000_0000~0x4FFF_FFFF，并且DMC1有权使用地址0x5000_0000~0x6FFF_FFFF。对于每一块芯片选择的起始地址是可以进行配置的</li></ol></li><li>外设区域通过PERI总线被访问，它的地址范围是0x7000_0000~0x7FFF_FFFF。这个地址范围的所有的SFR能被访问。而且如果数据需要从NFCON或CFCON传输，这些数据需要通过PERI总线传输</li></ol><h2 id="bootloader的作用"><a href="#bootloader的作用" class="headerlink" title="bootloader的作用"></a>bootloader的作用</h2><ol><li>boot的目的：跳到C语言中<ol><li>关闭看门狗，中断，MMU，CACHE</li><li>配置系统工作时钟</li><li>配置SDRAM的控制器（行地址数、列地址数、多少块，周期性的充电）</li><li>让sp指针指向可读可写的设备区间中，满足递减栈的规则<ol><li>用哪些模式，就要初始化哪些模式下的sp</li><li>每个模式的值不能覆盖其余模式</li></ol></li><li>代码搬移<ol><li>执行速度问题（Nor Flash比RAM的速度慢很多），把程序从nor-flash搬移到快速的内存</li><li>只把存储器的一部分代码执行出来，把存储在其他位置上的代码搬移到内存上，所以要对相应存储器的控制器进行初始化</li></ol></li><li>bl main</li></ol></li><li>loader的目的<ol><li>执行应用逻辑，点灯，uart，load linux kernel</li></ol></li></ol><h2 id="链接脚本的构成要素"><a href="#链接脚本的构成要素" class="headerlink" title="链接脚本的构成要素"></a>链接脚本的构成要素</h2><ol><li>哪一个.o放到代码段的起始位置</li><li>所有的.o放到哪个基地址上</li><li>代码段、数据段等等是不连续的<ol><li>.text代码段</li><li>.rodata只读数据段</li><li>.data初始化数据段</li><li>.bss未初始化数据段</li></ol></li></ol><h2 id="6410的启动步骤"><a href="#6410的启动步骤" class="headerlink" title="6410的启动步骤"></a>6410的启动步骤</h2><p>上电后，6410会启动片内IROM中的程序(BL0，位于地址0x0800_0000~0x0BFF_FFFF，实际仅32KB)，这部分程序主要是初始化时钟，看门狗等外设，然后把SD卡或者NandFlash中的最开始4K字节的内容(BL1)加载到片内SRAM中(Stepping Stone区域，位于0x0C00_0000~0x0FFF_FFFF，实际仅用了4KB),这4K程序主要完成对SDRAM主存的配置，然后把bootloader全部的程序(BL1+BL2)加载到SDRAM中，并从Stepping Stone中跳转过去。BL2程序会把Nand Flash中的OS镜像加载到主存中，并跳转到OS的入口中运行。</p><h2 id="异常向量的地址映射"><a href="#异常向量的地址映射" class="headerlink" title="异常向量的地址映射"></a>异常向量的地址映射</h2><p>根据ARM的手册，一般异常发生以后会被映射到0x0000_0000或者0xFFFF_0000，这可以使用CP15协处理器的SCTLR寄存器去配置（bit13等于0代表异常向量表位于0x0000_0000），</p><h2 id="ARM流水线技术"><a href="#ARM流水线技术" class="headerlink" title="ARM流水线技术"></a>ARM流水线技术</h2><ol><li>在ARM中，PC指针并不是指向当前正在运行的指令，而是指向当前运行的指令的地址+8（8个字节正好是两条指令，即三级流水线：取址，译码，执行）</li></ol><h2 id="ARM的协处理器"><a href="#ARM的协处理器" class="headerlink" title="ARM的协处理器"></a>ARM的协处理器</h2><ol><li>CP15，涉及到CACHE，MMU，中断向量等的管理</li><li>CP14，涉及到仿真功能，设计仿真器的时候可能需要</li><li>CP12-13，保留为以后使用</li><li>CP11一般用于双精度浮点数的计算</li><li>CP10用于单精度浮点数的计算</li><li>CP8-9，保留为以后使用</li><li>CP0-7，ARM公司留个各生产厂家使用</li></ol><h2 id="冯诺依曼体系和哈佛体系"><a href="#冯诺依曼体系和哈佛体系" class="headerlink" title="冯诺依曼体系和哈佛体系"></a>冯诺依曼体系和哈佛体系</h2><ol><li>一般单片机如MSP430，Cortex-M3等会采用哈佛体系结构，内部集成了Flash和RAM，指令和数据总线分开，虽然总线很多，但是因为在芯片内部，无伤大雅</li><li>ARM7，ARM11，Cortex-A8等应用处理器会采用冯诺依曼体系结构，指令和数据总线共用。冯诺依曼体系能够省去相当多的数据总线和地址总线，由于代码和数据共享一块内存，经常会造成数据冲突，速度上产生瓶颈。为了缓解这种情况，引入了CACHE的机制。</li><li>ARM早期采用冯诺依曼结构，到了后来CPU主频越来越快，数据吞吐量很大，冯诺依曼已经无法满足。ARM更新了设计，芯片外部还是采用冯诺依曼体系，即一块RAM既存放代码又存放数据，但是芯片内部不采用单一的CACHE，而是采用哈佛体系结构，分成DCACHE和ICACHE两块。</li><li>在bootloader期间，还没有严格区分代码段与数据段，代码段有可能会被缓存到DCACHE中，导致修改后的代码无法被缓存到ICACHE中，造成CACHE与主存的不一致，因此在bootloader中需要清DCACHE和ICACHE</li></ol><h2 id="Linux下查看二进制代码"><a href="#Linux下查看二进制代码" class="headerlink" title="Linux下查看二进制代码"></a>Linux下查看二进制代码</h2><ol><li>hexdump -C file.bin | less，其中-C表示同时显示二进制和ASCII码</li></ol><h2 id="大端（Big-Edian）与小端（Little-Edian）"><a href="#大端（Big-Edian）与小端（Little-Edian）" class="headerlink" title="大端（Big Edian）与小端（Little Edian）"></a>大端（Big Edian）与小端（Little Edian）</h2><ol><li>Intel阵营支持小端，摩托罗拉支持大端，早期的ARM公司大小端都支持，通过寄存器配置来选择</li><li>摩托罗拉公司的衰落，导致小端格式直接成为市场主流，ARM也放弃了对大端格式的支持</li><li>但是在网络协议中，一直保持着大端的数据格式，数据传输也是先传高位再传低位</li></ol><h2 id="u-boot-kernel中的死循环高级用法"><a href="#u-boot-kernel中的死循环高级用法" class="headerlink" title="u-boot/kernel中的死循环高级用法"></a>u-boot/kernel中的死循环高级用法</h2><p>见代码如下，其中b    1b表示跳转到之前一个标号“1”处，即back，b    1f表示跳转到后面一个标号“1”处，即forward<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1:</span><br><span class="line">b1b</span><br><span class="line">1:</span><br><span class="line">b1f</span><br><span class="line">1:</span><br><span class="line">b1b</span><br></pre></td></tr></table></figure></p><h2 id="VIM中跨文件的赋值粘贴"><a href="#VIM中跨文件的赋值粘贴" class="headerlink" title="VIM中跨文件的赋值粘贴"></a>VIM中跨文件的赋值粘贴</h2><ol><li>打开A文件，光标停在要开始赋值的文字那行，在命令模式下输入：”+单字母的变量名+要复制的行数+yy</li><li>打开B文件，光标停在要粘贴的文字的那行，在命令模式下输入：”+同上面的变量名+p</li></ol><h2 id="DDR内存基本原理"><a href="#DDR内存基本原理" class="headerlink" title="DDR内存基本原理"></a>DDR内存基本原理</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/fZZiioL.png" alt="DRAM工作原理" title="">                </div>                <div class="image-caption">DRAM工作原理</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/lTlELeY.png" alt="DRAM如何读写一个字节的数据" title="">                </div>                <div class="image-caption">DRAM如何读写一个字节的数据</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/q6lcWjG.png" alt="DDR内存条的构成" title="">                </div>                <div class="image-caption">DDR内存条的构成</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/ipG0yKZ.png" alt="多个内存条并存" title="">                </div>                <div class="image-caption">多个内存条并存</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/1F224If.png" alt="异步DRAM通信时序" title="">                </div>                <div class="image-caption">异步DRAM通信时序</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/3MoeCYQ.png" alt="异步DRAM与同步DRAM的时序对比" title="">                </div>                <div class="image-caption">异步DRAM与同步DRAM的时序对比</div>            </figure><ol><li>DDR SDRAM全称Double Data Rate Synchronize Dynamic Random Access Memory<ol><li>RAM中的R表示随机，意思是访问任意地址上的数据所花费的时间是一样的，区别于硬盘这类顺序访问存储器</li><li>SRAM中的S表示Static，静态内存。静态内存使用DQ触发器来保存一个位，一个位至少需要4~6g个晶体管</li><li>DRAM保存一个位只需要一个电容，由于电容值很小，会漏电，需要实时地去刷新一下（读出值，然后写回）</li><li>SDRAM中的S表示同步，即CPU会提供一个时钟信号与之同步</li></ol></li><li>Word Line也称行地址，Bit Line也称列地址，在DRAM中，每一个地址只保存1位。通过Array的形式堆叠在一起可以一次访问多个位。图中4个array组成了一个bank，8个bank拼在一起组成了一个memory device(即实际的DDR芯片)</li><li>DDR SDRAM会在时钟的上升和下降沿都用来读写数据，数据传输速率提高了1倍</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/mstLY5e.png" alt="为什么需要DQS信号" title="">                </div>                <div class="image-caption">为什么需要DQS信号</div>            </figure><ol start="4"><li>普通的SDRAM可以在时钟上升沿把数据发送到数据总线，在时钟下降沿将数据稳定地锁存到SDRAM中，但是在DDR中，由于时钟的上升沿和下降呀都被使用，数据的稳定时刻DDR无法获知，因此引入了DQS信号来表征数据可以被锁存的稳定时刻</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/NQMVHpY.png" alt="DDR中的DLL机制" title="">                </div>                <div class="image-caption">DDR中的DLL机制</div>            </figure><ol start="5"><li>DLL(Delay Lock Loop)<ol><li>CLk信号在DDR芯片内部也会产生延迟</li><li>DLL会进一步延迟外部时钟信号，使之加上内部走线延时正好满足一个周期，这样内部时钟上升沿与外部时钟上升沿可以保持一致</li><li>所以DDR芯片在上电reset之后需要一段时间来完成DLL的工作</li></ol></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/nIZtssr.png" alt="DDR SDRAM模式寄存器MRS设定" title="">                </div>                <div class="image-caption">DDR SDRAM模式寄存器MRS设定</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/993CUsS.png" alt="DDR读时序图" title="">                </div>                <div class="image-caption">DDR读时序图</div>            </figure><ol start="6"><li>典型的读时序过程<ol><li>行激活</li><li>经过tRCD（Row to Column Delay）延时后可以输出列命令</li><li>经过tCAS（Column Access Strobe）延时后总线上开始输出数据</li><li>一个行操作总共花费的时间为tRAS（Row Access Strobe）</li><li>经过tRC（Row Precharge）时间的行预充电</li><li>整个过程称作一个cycle，时间为tRC（Row Cycle）</li></ol></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/KGr6AoR.png" alt="DDR写时序图" title="">                </div>                <div class="image-caption">DDR写时序图</div>            </figure><ol start="7"><li>典型的写时序过程<ol><li>行激活</li><li>经过tRCD的延时后输出列命令</li><li>经过tCWD（Command wait delay）的延时后将数据放到总线上</li><li>经过tWR（Write Recovery）的延时后，DDR芯片将数据存储到了电容中</li><li>经过tRC（Row Precharge）时间的行预充电</li></ol></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/qc0yQ5k.png" alt="典型刷新时序过程" title="">                </div>                <div class="image-caption">典型刷新时序过程</div>            </figure><ol start="8"><li>典型的刷新时序过程<ol><li>一次刷新完成两行，一次刷新花的时间tRFC（Refresh Cycle Time）</li><li>tREFI表示平均周期刷新时间间隔</li></ol></li><li>Precharge与Refresh的区别<ol><li>precharge是对两根bitline预充电至VCC/2</li><li>refresh是每个一定的时间对电容进行充电（因为电容要漏电），间隔一般为64ms</li></ol></li></ol><h2 id="S3C6410的DDR控制器"><a href="#S3C6410的DDR控制器" class="headerlink" title="S3C6410的DDR控制器"></a>S3C6410的DDR控制器</h2><ol><li>DRAM控制器可以直接收一个DRAM控制器本身的指令，通过写指令到直接指令寄存器，DRAM控制器可以发送像“Precharge all”,”Autorefresh”,”NOP”,”MRS”(“EMRS”)这样的指令到SDRAM</li><li>在自动刷新计数器中，当刷新技术达到刷新周期的值时，控制器便会发出一个自动刷新指令对SDRAM进行周期性的刷新</li><li>DRAM控制器最多只能支持两个同一类型的芯片，每个芯片可分配最多256MB的地址空间。</li></ol><h2 id="MMU"><a href="#MMU" class="headerlink" title="MMU"></a>MMU</h2><ol><li>ARMv6的MMU由协处理器CP15控制，其功能是：地址映射（VA-&gt;PA），内存访问权限控制</li><li>虚拟地址到物理地址的转换过程：Micro TLB-&gt;Main TLB-&gt;Page Table Walk</li><li>ARMv6的MMU进行地址映射时设计到两种页表，一级页表(first level page table)和二级页表(coarse page table)</li><li>关于映射方式有两种：段映射和页映射。段映射只用到一级页表，页映射用到一级页表和二级页表s</li><li>关于映射粒度：段映射的映射粒度有两种，1M section和16M supersection；页映射的映射粒度也有两种：4K small page和64K large page</li><li>硬件在做地址转换时，如何知道当前是什么映射方式以及映射粒度是多少呢？这些信息可以从页表的入口描述符中获得</li><li>一级页表总共包含4096个转换描述符，因为是通过虚拟地址的31：20位寻址的，12位能够表示的数最大是4096</li><li>通过虚拟地址的高12位偏移，找到页表中的对应描述符，判断描述符的最后两位，确定是什么转换，10的话表示段转换，01表示粗页(64K)转换,11表示细页(4K)转换。如果判断是段转换，将描述符的高12位取出，这个就是物理的基地址，再和虚拟地址的后20位拼接，就得到对应的物理地址。</li></ol><h2 id="制作uImage"><a href="#制作uImage" class="headerlink" title="制作uImage"></a>制作uImage</h2><ol><li>工具：mkimage，位于uboot的tools文件夹下</li><li>命令使用：<ol><li>##mkimage -n ‘my_kernel’ -A arm -O linux -T kernel -C none -a 0x50008000 -e 0x50008040 -d zImage uImage##</li></ol></li></ol><h2 id="交叉编译器工具链使用"><a href="#交叉编译器工具链使用" class="headerlink" title="交叉编译器工具链使用"></a>交叉编译器工具链使用</h2><ol><li>readelf<ol><li>在操作系统基础之上的可执行文件至少包括两个部分，一个是真正的可执行代码的集合，另一个是头信息（Windows下是PE头，Linux下是ELF头），专门给操作系统看的,里面包括首先要运行的程序的入口地址（通过修改该入口地址可以制作木马）</li><li>arm-linux-readelf -h u-boot </li></ol></li><li>size<ol><li>读取可执行程序的大小，包括text，data，bss等等</li><li>size u-boot</li></ol></li><li>nm<ol><li>查看可执行程序的符号列表（全局标签），T代表全局函数标签，t表示静态函数标签（被static修饰），D代表全局变量标签，d代表静态变量标签（被static修饰）</li><li>nm u-boot</li></ol></li><li>strip<ol><li>剔除符号列表，能够把可执行程序变小</li></ol></li><li>string<ol><li>查看可执行程序中的常量字符串</li><li>string u-boot</li></ol></li><li>objdump<ol><li>反汇编</li><li>objdump -D u-boot</li></ol></li><li>objcopy<ol><li>将ELF头信息剔除，只保留可执行程序中的text，data，bss等段</li></ol></li><li>addr2line</li></ol><h2 id="为什么内核加载到内存0x50008000处，即偏移0x8000？"><a href="#为什么内核加载到内存0x50008000处，即偏移0x8000？" class="headerlink" title="为什么内核加载到内存0x50008000处，即偏移0x8000？"></a>为什么内核加载到内存0x50008000处，即偏移0x8000？</h2><ul><li>Linux内核在内核管理中需要建立MMU表，这个表需要在内存中预留一段空间来保存</li></ul><h2 id="u-boot启动linux内核的条件"><a href="#u-boot启动linux内核的条件" class="headerlink" title="u-boot启动linux内核的条件"></a>u-boot启动linux内核的条件</h2><ol><li>需要在uboot中配置好bootargs环境变量<ol><li>root=启动根文件系统在哪个设备，如ram，nfs或者flash</li><li>init=内核启动后第一个可执行文件init进程从哪里来</li><li>console=内核启动时使用哪个设备作为控制台</li></ol></li><li>文件系统的部署<ol><li>ramdisk:内存磁盘类型的文件系统<ul><li>root=/dev/ram initrd=0x21000000,8M init=/linuxrc console=ttySAC0,115200</li><li>测试过程中，需要先将ramdisk的内容（如initrd.img.gz）放在内存的0x21000000</li></ul></li><li>如何将initrd.img.gz中的内容取出来？<ol><li>gunzip initrd.img.gz</li><li>sudo mount -t ext2 initrd.img ./swap/</li><li>进入swap便能获得文件系统的具体内容</li></ol></li><li>nfs<ul><li>root=/dev/nfs nfsroot=服务器IP地址:根文件系统目录的绝对路径 ip=开发板IP地址 init=/linuxrc console=ttySAC0,115200</li></ul></li></ol></li></ol><h2 id="Linux系统下查看启动参数"><a href="#Linux系统下查看启动参数" class="headerlink" title="Linux系统下查看启动参数"></a>Linux系统下查看启动参数</h2><ul><li>cat /proc/cmdline</li></ul><h2 id="根文件系统制作"><a href="#根文件系统制作" class="headerlink" title="根文件系统制作"></a>根文件系统制作</h2><ol><li>bin dev etc lib proc usr var这些都是必需的，其他的都是可选的</li><li>创建终端会话设备console<ol><li>sudo mknod console c 5 1</li></ol></li><li>查看busybox的链接依赖库<ol><li>arm-linux-readelf -d busybox | grep NEEDED</li><li>一般需要的依赖是libc.so.6和libm.so.6</li><li>此外还需要链接库加载器ld-linux.so.3</li></ol></li></ol><h2 id="busybox启动控制过程"><a href="#busybox启动控制过程" class="headerlink" title="busybox启动控制过程"></a>busybox启动控制过程</h2><ol><li>init-&gt;inittab-&gt;/etc/init.d/rcS-&gt;/etc/init.d/S(0-9)(0-9)*-&gt;application</li></ol><h2 id="嵌入式常用的工具命令"><a href="#嵌入式常用的工具命令" class="headerlink" title="嵌入式常用的工具命令"></a>嵌入式常用的工具命令</h2><ol><li>设备驱动管理<ul><li>fdisk fsck hwclock mkdosfs insmod rmmod lsmod mknod modprobe lsusb mdev mount unmount</li></ul></li><li>文本编辑处理<ul><li>mkdir mkfifo ln mv cp touch rm unlink awk cat cut find vi sed wc tar grep head tail less more xargs od stat</li></ul></li><li>网络信息配置<ul><li>udhcpc udhcpd route netstat ping ifconfig</li></ul></li><li>系统信息管理<ul><li>chmode clear date dd df echo free ipcrm ipcs ls ps pwd top uptime kill killall reboot sleep sysctl usleep</li></ul></li></ol><h2 id="fstab配置文件"><a href="#fstab配置文件" class="headerlink" title="fstab配置文件"></a>fstab配置文件</h2><ol><li>fstab是文件系统启动后默认要挂载的文件系统</li><li><code>proc        /proc   proc    defaults    0   0</code>一行配置由6个字段组成<ol><li>第一个字段表示设备名称</li><li>第二个字段表示挂载点</li><li>第三个字段表示文件系统类型</li><li>第四个字段表示挂载选项</li><li>第五个字段表示备份检查，0不检查</li><li>第六个字段表示文件系统完整性检查，0不检查</li></ol></li></ol><h2 id="常用嵌入式文件系统"><a href="#常用嵌入式文件系统" class="headerlink" title="常用嵌入式文件系统"></a>常用嵌入式文件系统</h2><ol><li>基于存储设备的文件系统<ol><li>内存文件系统<ol><li>tmpfs</li><li>ramdisk</li></ol></li><li>Flash文件系统<ol><li>cramfs</li><li>squashfs</li><li>jffs/jffs2</li><li>yaffs/yaffs2</li><li>ubifs</li></ol></li><li>扩展SD卡文件系统<ol><li>FAT32</li><li>ext2/ext3</li></ol></li><li>网络文件系统<ol><li>NFS</li><li>Samba</li></ol></li></ol></li><li>基于逻辑的虚拟文件系统<ol><li>进程文件系统<ol><li>procfs</li></ol></li><li>设备文件系统<ol><li>devfs（老版本内核使用）</li><li>sysfs</li></ol></li></ol></li></ol><h2 id="Nand-Flash硬件特性（以K9K8G08为例）"><a href="#Nand-Flash硬件特性（以K9K8G08为例）" class="headerlink" title="Nand Flash硬件特性（以K9K8G08为例）"></a>Nand Flash硬件特性（以K9K8G08为例）</h2><ol><li>该芯片由两个K9F4G08芯片（chip）组成，每个chip包含了4个层（plane），每层1024块（block），每块64页（page），每页（2K+64）字节</li><li>由于Nand Flash的工艺不能保证其存储单元在其生命周期中保持性能的可靠，因此，在其生产及使用过程中会产生坏块。<ol><li>坏块的特征是：编程/擦除这个块时，会产生编程或擦除错误，并反映到状态寄存器相应位上</li><li>Nand Flash出错时，一般不会造成整个快或者页不能读取或全部出错，而是整个页中只有一个或者几个位出错。一般使用一种比较专用的校验-ECC</li><li>典型的ECC算法如Hanming码，能纠正单比特错误和检测双比特错误，而且计算速度很快，但对1比特以上的错误无法纠正，对2比特以上的错误不能保证检测。利用ECC校验需要额外的空间来存放ECC校验码</li><li>Nand Flash中每一个页的主数据区后都有一个称为空闲区域或者冗余区域的存储空间，在Linux驱动中，习惯称为OOB（Out Of Band）区。OOB区用来存放主数据区数据的校验值（ECC校验码），当然，除了存放ECC校验码，该区域还被用作其他用途。比如：标记是否是坏块，存储ECC数据，存储一些和文件系统相关的数据，如yaffs文件系统会在oob中，存放很多和自己文件系统相关的信息。</li></ol></li><li>Nand Flash以8个I/O端口多路复用的方式进行寻址。Nand Flash操作是通过向I/O端口发送相应的命令序列完成的。有的命令仅仅需要一个总线周期，如芯片复位命令、状态读写命令。其他的命令，如页的读写和块的擦除，则需要两个总线周期：一个周期用于装载，另一个周期用于执行。在页读写时，需要在相应请求命令发出后，再发出5个地址周期（2列地址和3行地址）进行寻址。在块擦除时，仅需要发出3个行地址周期。<ol><li>列地址就是页内地址，由于K9K8G08页大小为2K+64字节，因此有效列地址总共12位，即A0~A11</li><li>行地址对应页的编号，用于确定具体那一页</li></ol></li><li>Nand Flash的寻址单位是页，读写以页为单位，擦除以块为单位。</li><li>按照页大小不同，Nand Flash可以分为大页设备和小页设备，大页设备典型大小2048字节，小页设备典型页大小为512字节。对于大页设备，通过8位I/O通常需要5个地址周期寻址，小页设备则只需要4个周期。</li></ol><h2 id="MTD设备概述"><a href="#MTD设备概述" class="headerlink" title="MTD设备概述"></a>MTD设备概述</h2><ol><li>MTD（Memory Technology Device）是介于<strong>原始闪存设备</strong>与上层应用之间的一个抽象层，为不同类型的闪存设备提供统一的操作接口，以供上层使用。MTD设备通常包括NAND、OneNAND、NOR、AG-AND、ECC’d NOR等</li><li>MTD设备具备一些独特的硬件特性，例如，MTD设备由擦除块构成，擦除快能够被写入，但是要想再次写入就必须重新擦除</li><li>MTD子系统不处理块设备，例如，MMC、eMMC、SD、CompactFlash等都不属于MTD，这些设备虽然多数内存存储单元都是用Nand Flash，但是他们并不是原始的闪存设备，而是通过集成在芯片内部的FTL（Flash Translation layer），使其具备块设备的特征，因此这些设备属于块设备系统，而不是MTD</li><li>闪存设备能够分成若干MTD分区，每一个MTD分区由一片连续的擦除块构成，因此MTD分区是建立在闪存的物理层上的。</li></ol><h2 id="Nand-Flash控制器"><a href="#Nand-Flash控制器" class="headerlink" title="Nand Flash控制器"></a>Nand Flash控制器</h2><ol><li>在上电或系统复位之后，Nand Flash控制器自动加载4KB的启动代码。加载完成后，启动代码将在Stepping Stone中被执行。在自动导入期间，ECC是未被选中状态，因此，前8K的Nand Flash绝对不能有位错误</li></ol><h2 id="USB概述"><a href="#USB概述" class="headerlink" title="USB概述"></a>USB概述</h2><ol><li>Mini/Micro USB接口5根连接线中的4号引脚【ID】，用于区分是USB主控端（主机）还是USB设备端（从机）。当该引脚接地时表示是主控端，悬空时表示是设备端</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总线&quot;&gt;&lt;a href=&quot;#总线&quot; class=&quot;headerlink&quot; title=&quot;总线&quot;&gt;&lt;/a&gt;总线&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;总线是计算机各部件之间传送数据、地址和控制信息的公共通道，按照相对于CPU的位置可以分为：片内总线和片外总线&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="ARM" scheme="https://suda-morris.github.io/tags/ARM/"/>
    
  </entry>
  
  <entry>
    <title>Communication Principle</title>
    <link href="https://suda-morris.github.io/2016/04/18/communication-principle/"/>
    <id>https://suda-morris.github.io/2016/04/18/communication-principle/</id>
    <published>2016-04-18T08:40:31.000Z</published>
    <updated>2018-07-05T01:38:09.630Z</updated>
    
    <content type="html"><![CDATA[<h2 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h2><ol><li>语音信号的带宽大约4KHz，图像信号的带宽大约是6MHz，音乐信号的带宽大约20KHz</li></ol><h2 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h2><ol><li>两个基本问题：<ol><li>信号衰减：导线的电阻与长度成正比；无线电波扩散本身减弱，且被阻挡物吸收</li><li>加性噪声：沿途的电阻、固态器件等(包括发送器和接收器中的处理电路)引入固有的随机噪声，最基本的是热噪声</li></ol></li><li>其他问题：<ol><li>外来干扰：其他电磁波、窜线的电信号</li><li>信号畸变：信道特性不理想。比如电话线中的寄生电容会使高频信号损失</li></ol></li><li>白高斯噪声（White Gassian Noise）：<ol><li>时域上，随机性服从高斯分布</li><li>频域上，噪声均匀分布在所有频率上</li><li>功率谱密度值N0/2（物理意义：每Hz内有多少噪声）</li></ol></li></ol><h2 id="电磁波"><a href="#电磁波" class="headerlink" title="电磁波"></a>电磁波</h2><ol><li>电波传播主要由其频率值的大小决定。空中传播时主要有三种模式：<ol><li>地波（Ground-Wave）模式：1~2MHz以下的电磁波主要按照这种模式传播，大致可以传输几十公里，主要用于调幅广播</li><li>天波（Sky-Wave）模式：3~30MHz的电波反射可以达到几百~1000Km远，主要用于长距离通信，大多数用于军事上</li><li>视线（Line-Of-Sight）模式：像广播那样作直线传播，高于30MHz，向上传播时会穿透电离层被反射回来；地面传播时，如遇到遮挡，信号会被阻断会显著衰减，用于电视广播。</li></ol></li></ol><h2 id="频分技术的例子："><a href="#频分技术的例子：" class="headerlink" title="频分技术的例子："></a>频分技术的例子：</h2><ol><li>频分复用：有线通信中多个话音“错开频率”，共用一条电线传输</li><li>频分多址：多个无线用户使用各自的频率，同时接入通信系统</li><li>频分双工：每个用户采用不同频率接收和发送，两个方向同时传输</li></ol><h2 id="基带与频带传输"><a href="#基带与频带传输" class="headerlink" title="基带与频带传输"></a>基带与频带传输</h2><ol><li>基带信号：频谱位于零频率附近的信号</li><li>基带传输：保持基带形式，直接传送消息信号</li><li>频带信号：频谱位于某高频附近</li><li>频带传输：把基带的消息信号转换为频带消息来传输</li></ol><h2 id="模拟通信系统"><a href="#模拟通信系统" class="headerlink" title="模拟通信系统"></a>模拟通信系统</h2><ol><li>调制：将基带信号变换为适当的频带信号的过程，通常用正弦波携带消息</li><li>解调：调制的逆过程</li></ol><h2 id="数字通信系统"><a href="#数字通信系统" class="headerlink" title="数字通信系统"></a>数字通信系统</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/LjU8Kz6.png" alt="数字通信系统" title="">                </div>                <div class="image-caption">数字通信系统</div>            </figure><ol><li>格式化：规范化的数字符号序列，必要时，包括模数变化</li><li>基带调制：形成合适的电信号，基带信号通常是用脉冲生成</li><li>频带调制：转换为频带信号</li><li>发射机：将信号送入信道</li><li>同步：提供各种定时时钟，使各单元能够正确、有序地工作</li><li>信源编码：实现压缩编码，把原始数字消息里面的冗余压缩掉</li><li>加密：提供保密性</li><li>信道编码：故意加入特殊数据位（如奇偶校验位等），仪表接收端发现和纠正错误</li><li>复用：多种消息信号合并在一起</li><li>多址接入：多个用户进入与公用系统</li><li>频谱扩展：展宽信号频谱可增加抗干扰与保密性，也可以多址接入</li></ol><h2 id="数字技术vs模拟技术"><a href="#数字技术vs模拟技术" class="headerlink" title="数字技术vs模拟技术"></a>数字技术vs模拟技术</h2><ol><li>天生的抗噪性</li><li>潜在的标准性</li><li>便利的实现性</li></ol><h2 id="幅度调制–用消息去控制正弦载波的幅度变化"><a href="#幅度调制–用消息去控制正弦载波的幅度变化" class="headerlink" title="幅度调制–用消息去控制正弦载波的幅度变化"></a>幅度调制–用消息去控制正弦载波的幅度变化</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/oWMUlEV.png" alt="常规调幅" title="">                </div>                <div class="image-caption">常规调幅</div>            </figure><ol><li>常规调幅（Conv.AM）<ol><li>m(t)是调制信号</li><li>波形特点：消息凸显在载波包络上</li></ol></li><li>移植载波双边带调幅（DSB-SC）</li><li>单边带调幅（SSB）</li><li>残留边带调幅（VSB）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;消息&quot;&gt;&lt;a href=&quot;#消息&quot; class=&quot;headerlink&quot; title=&quot;消息&quot;&gt;&lt;/a&gt;消息&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;语音信号的带宽大约4KHz，图像信号的带宽大约是6MHz，音乐信号的带宽大约20KHz&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;信
      
    
    </summary>
    
      <category term="Academic" scheme="https://suda-morris.github.io/categories/Academic/"/>
    
    
      <category term="Communication" scheme="https://suda-morris.github.io/tags/Communication/"/>
    
  </entry>
  
  <entry>
    <title>IEEE1588 Introduction</title>
    <link href="https://suda-morris.github.io/2016/04/13/ieee1588/"/>
    <id>https://suda-morris.github.io/2016/04/13/ieee1588/</id>
    <published>2016-04-13T15:20:07.000Z</published>
    <updated>2018-07-05T01:38:09.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>在分布式网络化的控制系统中，考虑到调度和控制的实时性，对时间同步的精度要求非常严格。</li><li>影响分布式测控系统实时性差的主要根源：<ol><li>各个测控设备之间的时钟差异</li><li>测控数据在网络中的传输延迟</li></ol></li><li>网络时间协议NTP虽然通过一定的硬件配合和算法优化，可以提供系统的时钟同步性，但是只能达到毫秒级的同步精度要求</li><li>实现1588协议只需要在原有的网络上添加事件同步报文，这些报文占用少量的网络资源，他们只是和控制数据包或其他信息包共享网络。该协议成本低，而且独立于操作系统之外，适应性强，安装简单，无需复杂的配置工作，理论上其同步精度可以达到纳秒级。</li><li>IEEE 1588标准定义了一种精确时间协议PTP，该协议为分布式测控应用而设计，基于报文流加时间戳的思想，采用软、硬结合的实现方式，旨在实现亚微秒级的同步精度。协议完全兼容以太网技术，协议报文均是基于UDP/IP多播报文发送，特别适合基于局域网的分布式应用。</li></ol><h2 id="时间同步的概念"><a href="#时间同步的概念" class="headerlink" title="时间同步的概念"></a>时间同步的概念</h2><ol><li>时间同步包括频率同步和时间同步<ol><li>频率同步<ol><li>是指信号之间的频率保持某种严格的特定关系，比如有效瞬间表现为同一平均速率，以此维持通信网络中所有节点以相同的速率运行</li><li>数字通信中传递的信号是对原始信息进行编码后得到的PCM（脉冲编码调制）离散脉冲。假如通信网中某两个节点之间的时钟频率不同，或者由于数字比特流在传输中因噪声干扰而叠加了相位漂移和抖动，便会在接收节点的缓冲存储器中产生码元的丢失或重复，最终导致比特流出现滑码。</li></ol></li><li>时间同步<ol><li>时间同步的定义便是根据接收到的时间来调节通信网络中节点的时钟和时钟所显示的时刻。</li><li>时间同步和频率同步既有联系又有区别，它既调节时钟的频率同时也调节时钟的相位。由于相位和时间都是对频率的积分，所以又称时间同步为相位同步。</li><li>与频率同步不同的是，时间同步接受离散的时间信息，离散的调节节点时钟。</li><li>时间同步完成两个重要功能，即对时和守时。对时就是对表，通过不定期的对表操作，将本地节点的时刻与远端节点的标准时刻进行相位同步；守时就是频率同步，即在对表的间隙里，保证本地节点时刻与远端节点的标准时刻之间的偏差在一个允许的范围之内</li></ol></li></ol></li></ol><h2 id="现有的几种同步技术"><a href="#现有的几种同步技术" class="headerlink" title="现有的几种同步技术"></a>现有的几种同步技术</h2><ol><li>GPS对时系统<ol><li>GPS可以同时跟踪太空中的24颗GPS卫星，自动选择最佳星座进行定位、定时。</li></ol></li><li>电路仿真技术</li><li>同步以太网技术<ol><li>以太网在物理层与SDH一样采用串行码流方式进行传送，因此响应的接收端必须提供时钟恢复业务，否则仍然会出现滑码现象。所以，以太网本身具备了传递时钟信息的功能。</li></ol></li><li>包时钟技术<ol><li>包时钟ToP（Time over Packet），就是利用分组网络来传递时间信息。时间报文的格式可以多种多样，比如RTP、NTP、IEEE 1588，只要报文中懈怠了时间信息就可以了。</li><li>IEEE 1588标准又称作PTP协议，主要用于工业以太网，具有亚微秒级的时间精度，可以同时传递频率信息和相位信息</li></ol></li><li>秒脉冲对时<ol><li>实现方式简单，理想状态下同步精度±1us</li><li>精度受主时钟性能与线路长度的影响较大</li><li>电信号在双绞线中的传播速度约为5ns/m，可见秒脉冲对时只适用于近距离对时，秒脉冲不能传递当前的UTC时间值</li></ol></li></ol><h2 id="IEEE-1588标准介绍"><a href="#IEEE-1588标准介绍" class="headerlink" title="IEEE 1588标准介绍"></a>IEEE 1588标准介绍</h2><ol><li>IEEE 1588标准的全称是《网络测量和控制系统的精确时钟同步协议》（Precision Clock Synchronization for Networked Measurement and Control Systems）,也被称作PTP协议，它在各种同步协议中的同步精度是最高的</li><li>IEEE 1588:2008也称为IEEE 1588第二版，其主要基于以下几个要求<ol><li>实现亚微秒级的时间同步，用于均是和实际的测试与测量中</li><li>缩短时间报文使其等长，来满足通信网中的应用，登场保温传递时的延时变化较小</li><li>提供容错特性，来从网络重建和祖母时钟崩溃中快速恢复</li><li>能把协议映射到一些非以太网的网络中</li></ol></li><li>与第一版相比，第二版的改进：<ol><li>报文格式。为了缩短报文长度，同步报文被分隔成Announce（声明报文）和Sync（同步报文），分别实现最佳主时钟算法和时间同步。</li><li>端到端透明时钟。</li><li>第一版中所有报文都是通过多播传递的，第二版提供了一种机制使得从时钟可与主时钟协商后在一定时间间隔内使用单播传输，这种特性广泛应用于通信中。</li></ol></li><li>IEEE 1588系统构成<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/yGeFBPc.png" alt="典型的PTP系统模型" title="">                </div>                <div class="image-caption">典型的PTP系统模型</div>            </figure></li><li>IEEE 1588协议是一种说明系统中的实时PTP时钟如何相互同步的分布式协议，普通时钟和边界时钟被组织在一个主从同步层次中。PTP协议中的报文分为两类，即事件（Event）报文和一般（General）报文。<ol><li>Event Messages：同步报文，延时请求，P2P延时请求，P2P延时响应。属于定时消息，发送或者接收的时刻需要打时间戳</li><li>General Messages：管理报文，声明报文，信令报文，跟随报文，延时响应，点延时相应跟随。不属于定时消息，不需要打时间戳</li></ol></li><li>PTP协议中，节点是一个包含实时时钟的设备，这个时钟可能会有多种用途，例如产生PTP报文的时间戳，或者触发由该节点管理的事件。</li><li>PTP协议包括两个方面：时钟同步功能和管理功能。所有的普通时钟在这两个方面的表现都相同，边界时钟的每一个端口相当于一个普通时钟。管理节点不需要实现时钟同步功能而只需要实现管理功能，除非它本身也是一个时钟节点。</li><li>IEEE 1588的所有时钟都是向224.0.1.129这个组播地址不停的发送网络报文的。</li></ol><h2 id="IEEE-1588工作机制"><a href="#IEEE-1588工作机制" class="headerlink" title="IEEE 1588工作机制"></a>IEEE 1588工作机制</h2><ol><li>建立主从秩序。网络中的各个节点通过最佳主时钟算法，选举出祖母时钟、主时钟和从时钟。祖母时钟精度最高，主时钟次之，从时钟最低。</li><li>低等级的时钟向高等级的时钟进行同步。网络中的主从时钟通过握手机制进行同步报文的交换。</li></ol><h2 id="GPS"><a href="#GPS" class="headerlink" title="GPS"></a>GPS</h2><ol><li>通过串口解析出来的GPS时间信息是UTC时间，UTC时间是以原子时秒长为基础，在时刻上尽量接近于世界时的一种时间计量系统。UTC时间起点是1970年1月1日0时整。在IEEE1588 v2协议中，时间值的存储是以48位秒值和32位纳秒值两种形式构成的。</li></ol><h2 id="DP83640"><a href="#DP83640" class="headerlink" title="DP83640"></a>DP83640</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/DdVpWWZ.png" alt="DP83640功能框图" title="">                </div>                <div class="image-caption">DP83640功能框图</div>            </figure><ol><li>全面支持IEEE 1588协议的物理层芯片，不但提供了完整的MII，还设计了12个GPIO引脚实现实时动作处理功能，其特点如下<ol><li>支持IEEE 1588 v1和v2</li><li>支持以太网UDP/IP第四版，UDP/IP第六版和Layer2协议</li><li>支持高精度IEEE 1588时钟同步，时间戳最大分辨率可达8ns</li><li>提供12个可配置GPIO</li><li>频率可配置的同步时钟输出</li></ol></li><li>DP83640对IEEE 1588协议中对实时性要求极高的部分提供了完整的硬件支持，分别是<ol><li>IEEE 1588同步时钟的产生</li><li>时钟同步报文的硬件标记</li><li>事件触发和事件捕获的时间戳标记</li></ol></li><li>DP83640的功能<ol><li>IEEE 1588时钟输出。DP 83640可以向外部设备提供频率可调的同步时钟信号，其标称频率为250/nMHz，其中n为2~255之间的任意整数，即980.4kHz~125MHz之间的离散值</li><li>IEEE 1588事件触发。DP 83640可以在GPIO引脚上产生一个基于IEEE 1588时钟的触发信号，这个信号可以是一次性上升或下降沿，脉宽可调的单脉冲或者周期信号。DP 83640可以为每一个触发器指定相应的GPIO输出引脚以及触发时刻。当内部IEEE 1588时钟走时到达此值时，事件被触发。芯片最多可支持在任意GPIO引脚上发送八个触发信号。可支持在单引脚上发送多重触发信号，支持产生复杂的信号波形。此时，个触发信号通过逻辑或组合在一起产生一个联合信号。使用DP83640提供的触发功能，还可以让芯片输出一个秒脉冲信号</li><li>IEEE 1588时间戳标记。DP 83640可以为发生的外部事件标记时间戳。事件的监测可通过外部脉冲的上升沿或下降沿。事件时间戳标记单元可最多监测任意GPIO引脚上发生的八个外部事件。事件时间戳以单一序列的方式保存，此序列可最多保存八个时间戳信息。需要对事件时间戳做出35ns（频率125MHz的IEEE1588参考时钟的周期X3+11ns）的调整，来消除由于输入延迟和同步延迟带来的影响。</li><li>IEEE 1588同步报文检测。DP 83640的发送报文解析器和接收报文解析器可以自动检测节点发送和接收的符合IEEE 1588第一版和第二版所定义的同步报文，并将其时间戳信息提供给软件。</li></ol></li><li>所有的配置引脚（strap pin）内部都有微弱的上拉电阻或者下拉电阻，如果要改变默认配置，那么需要在该引脚外面上拉或者下拉2.2K的电阻。</li><li>7号引脚默认情况下是作为power-down的输入引脚，低电平有效。这等效于将BMCR寄存器中的bit11置1.将MICR寄存器的INT_OE位置1将会使器件跳出Power Down状态。</li><li>DP83640集成了系统诊断功能，能够评估连接的质量，检测潜在的错误</li><li>DP83640接收外部25MHz频率信号，依靠内部相位产生模块（PGM）产生125MHz的时钟信号，因此其可控周期的时间间隔是8ns</li></ol><h2 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h2><ol><li>采用UDP协议时，事件报文和通用报文的UDP目的端口号分别为319和320；直接采用以太网方式封装时，PTP敖文的以太网类型为0x88F7</li><li>PTP报文由报文头、报文主体以及报文扩展字段（可选）等部分组成，其中报文头为34字节，对所有报文都是通用的。</li><li>Master每发送一个Sunc报文都会有1个单独的sequenceID，并按递增顺序排列；当Slave向Master发送Delay_Req请求后，Master会回复相应的Delay_Resp报文，这两个交互报文的sequenceID是相同的。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/5tcXX9V.png" alt="PTP over Ethernet" title="">                </div>                <div class="image-caption">PTP over Ethernet</div>            </figure></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/vlsFEfM.png" alt="PTP over IPv4" title="">                </div>                <div class="image-caption">PTP over IPv4</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/N3ib4Lw.png" alt="PPT报文格式" title="">                </div>                <div class="image-caption">PPT报文格式</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在分布式网络化的控制系统中，考虑到调度和控制的实时性，对时间同步的精度要求非常严格。&lt;/li&gt;
&lt;li&gt;影响分布式测控系统实时性
      
    
    </summary>
    
      <category term="Network" scheme="https://suda-morris.github.io/categories/Network/"/>
    
    
      <category term="IEEE1588" scheme="https://suda-morris.github.io/tags/IEEE1588/"/>
    
  </entry>
  
  <entry>
    <title>Latex Basic</title>
    <link href="https://suda-morris.github.io/2016/03/21/latex/"/>
    <id>https://suda-morris.github.io/2016/03/21/latex/</id>
    <published>2016-03-21T03:09:15.000Z</published>
    <updated>2018-07-05T01:38:09.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LaTeX简介"><a href="#LaTeX简介" class="headerlink" title="LaTeX简介"></a>LaTeX简介</h2><ol><li>LaTeX是一种基于TeX的文档排版系统。</li><li>LaTeX并不是单独的程序，现在的TEX系统都是复杂的软件包，里面包含各种排版的引擎、编译脚本、格式转换工具、管理界面、配置文件、支持工具、字体以及数以千计的宏包和文档。一个TeX发行版就是把所有这样的部件都集合在一起，打包发布的软件</li><li>TeX是由TeX用户组发布的一个发行版，跨平台</li><li>LaTeX的命令以反斜线\开头，命令一般用英文单词命名，有的可以带参数。</li><li>严格来说，LaTeX并不是标记语言，而是主要基于字符串代换的宏语言<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/b7BVgmf.png" alt="使用各种引擎编译LaTeX文档的简要流程" title="">                </div>                <div class="image-caption">使用各种引擎编译LaTeX文档的简要流程</div>            </figure></li><li>导言区常用命令：<ol><li>声明文章的标题:\title{An Embedded FTP Server Powered by PoE}</li><li>声明文章的作者:\author{morris}</li><li>声明写作日期:\date{\today}</li><li>声明参考文献的格式:\bibliographystyle{plain}</li></ol></li><li>以\begin{document}和\end{document}声明了一个document环境，里面是论文的正文部分，也是直接输出的部分</li><li>\maketitle命令实际输出论文标题</li><li>\tableofcontents命令输出目录</li><li>\section命令开始新的一节</li><li>使用空行分段，单个换行并不会使文字另起一段，而只是起到使源代码更易读的作用，空行只起分段作用，使用很多空行并不起任何增大间距的作用</li><li>短浅不用打空格，LaTeX会自动完成文字的缩进，即使手工在前面打了空格，LaTeX也会将其忽略</li><li>汉字后面的空格会被忽略，其他符号后面的空格则保留。单个的换行就相当于一个空格，因此源代码中大段文字可以安全地分成短行，空格只起分隔单词或符号的作用，使用很多空格并不起到任何增大字词间距的作用</li><li>在需要使用注脚的文字后面使用命令:\footnote{注脚内容}</li><li>需要强调的内容使用命令:\emph{内容}</li><li>命令都以反斜线\开头，后接命令名，命令名或者是一串字母，或是单个符号。命令可以带一些参数，如果命令的参数不止一个字符(不包括空格)，就必须用花括号括起来。可选参数如果出现，则使用方括号括起来。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/t6MSwSB.png" alt="LaTeX命令的格式" title="">                </div>                <div class="image-caption">LaTeX命令的格式</div>            </figure></li><li>引用的内容是在正文中使用quote环境得到,quote环境即以\begin{quote} 和\end{quote} 为起止位置的部分。它将环境中的内容单独分行，增加缩进和上下间距排印，以突出引用的部分。</li><li>文章的摘要也是在\maketitle之后用abstract环境生成的<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/eQWRnSC.png" alt="LaTeX环境的一般格式" title="">                </div>                <div class="image-caption">LaTeX环境的一般格式</div>            </figure></li><li>最简单的输入公式的办法是把公式用一对美元符号$$括起来，如使用$a+b$就得到漂亮的a+b，这种夹在行文中的公式称为正文公式或行内公式。对比较长或比较重要的公式，一般则单独居中写在一行；为了方便引用，经常还给公式编号。这种公式被称为显示公式或列表公式，使用equation环境就可以方便的输入这种公式。</li><li>键盘上没有的符号，就需要使用一个命令来输入。例如表示角的符号就可以用\angle输入。命令的名字通常也就是符号的名字，圆周率的符号用\pi来表示</li><li>符号^用来引入一个上标，而_则引入一个下标，它们用起来差不多等同于一个带一个参数的命令，因此多个字符的上下标需要使用花括号分组，如$2^{10}=1024$</li><li>怎么输入90°，LaTeX默认的数学字体中，并没有一个专门用于表示角度的符号，自然也没有这么命令，角度的符号°是通过上标输入的：$^\circ$</li><li>插图功能不是由LaTeX的内核直接提供的，而是由graphicx宏包提供的。要使用graphicx宏包的插图功能，需要在源文件的导言区使用\usepackage命令引入宏包</li><li>引入graphicx宏包后就可以使用\includegraphics命令插图了，比如：\includegraphics[scale=0.4]{DC-DC.jpg}。插入的图形就是一个有内容的矩形盒子，在正文中和一个很大的字符没有多少区别。支持的图形格式包括PDF、PNG、JPG、EPS 等。</li><li><p>除了一些很小的标志图形，我们很少把插图直接夹在文字之中，而是使用单独的环境列出。而且很大的图形如果固定位置，会给分页造成困难。因此，通常把图形放在一个可以变动的相对位置的环境中，称为<strong>浮动体</strong>。在浮动体中还可以给图形加入说明性的标题。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;figure&#125;[ht]</span><br><span class="line">\centering</span><br><span class="line">\includegraphics[scale=0.6]&#123;xiantu.pdf&#125;</span><br><span class="line">\caption&#123;宋赵爽在《周髀算经》注中作的弦图（仿制），该图给出了勾股定</span><br><span class="line">理的一个极具对称美的证明。&#125;</span><br><span class="line">\label&#123;fig:xiantu&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br></pre></td></tr></table></figure></li><li><p>在上面的代码中，figure环境有可选参数[ht]，表示浮动体可以出现在环境周围的文本所在处(here)和一页的顶部(top)，figure环境内部相当于普通的段落（默认没有缩进）；使用声明\centering表示后面的内容居中；使用caption命令给插图加上自动编号和标题</p></li><li><p>制作表格需要确定的是表格的行、列对齐模式和表格线，这是由tabular环境完成的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;table&#125;[H]</span><br><span class="line">\begin&#123;tabular&#125;&#123;|rrr|&#125;</span><br><span class="line">\hline</span><br><span class="line">直角边$a$ &amp; 直角边$b$ &amp; 斜边$c$ \\</span><br><span class="line">\hline</span><br><span class="line">3 &amp; 4 &amp; 5 \\</span><br><span class="line">5 &amp; 12 &amp; 13 \\</span><br><span class="line">\hline</span><br><span class="line">\end&#123;tabular&#125;%</span><br><span class="line">\qquad</span><br><span class="line">($a^2 + b^2 = c^2$)</span><br><span class="line">\end&#123;table&#125;</span><br></pre></td></tr></table></figure></li><li><p>tabular环境中有一个参数，里面声明了表格中列的模式，在前面的表格中，|rrr|表示表格有3列，都是右对齐，在第一列和第三列后面各有一条垂直的表格线。在tabular环境内部，行与行之间用命令\隔开，每行内部的表项则用符号&amp;隔开。表格中的横线则是用命令\hline产生的。表格与插图一样，都是一个比较大的盒子，一般也放在浮动环境中，即table环境</p></li><li>使用\bibliographystyle{plain}声明了参考文献的格式，用\bibliography{math}命令打印参考文献列表。实际上这只是BibTeX处理文献的一个空架子，还需要定义“参考文献数据库”。BibTeX使用的参考文献数据库其实就是个后缀为.bib的文件。BibTeX数据库经常不需要我们自己录入，而可以从相关学科的网站直接下载或是从其他类型的文献数据库转换得到。定义好参考数据库后在正文中使用\cite命令选择需要LaTeX列出的文献。</li><li>引用不仅限于参考文献，图表、公式的编号，只要事先设定了标签，同样可以通过辅助文件为中介引用。基本的交叉引用命令是\ref，它以标签为参数，得到被引用的编号。数学宏包amsmath就定义了\eqref命令，专门用于公式的引用，并能产生括号</li><li>设计页面尺寸可以使用geometry宏包：\geometry{a6paper,centering,scale=0.8}，表示页面使用A6纸大小，版心居中，长宽占页面的0.8</li><li>改变图标标题格式可以使用caption宏包：\usepackage[format=hang,font=small,textfont=it]{caption}表示设置图表所有标题使用悬挂对齐方式，整体用小字号，而标题文本使用斜体（对汉字来说就是楷体）</li><li>增加目录的项目则可以用tocbibnd宏包：\usepackage[nottoc]{tocbibind}，宏包默认会在目录中加入目录项本身、参考文献、索引等项目，这里使用nottoc选项取消了在目录中显示目录本身</li><li><p>自定义环境命令,\newenvironment有3个参数，第一个参数是环境的名字，后两个参数分别是在环境开始和末尾处的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\newenvironment&#123;myquote&#125;</span><br><span class="line">&#123;\begin&#123;quote&#125;\kaishu\zihao&#123;-5&#125;&#125;</span><br><span class="line">&#123;\end&#123;quote&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义新的命令：\newcommand\degree{^\circ}</p></li><li>LaTeX是一种结构化的排版语言，在填写便准格式的模板时可以忽略编号、格式等许多具体细节。在文档排版中应主动追求内容与格式的分离，在document环境之内避免直接使用诸如字体字号、对齐缩进的格式控制命令，而代之以有具体意义的环境和命令，让文档变得清晰</li></ol><h2 id="文字与符号"><a href="#文字与符号" class="headerlink" title="文字与符号"></a>文字与符号</h2><ol><li>LaTeX中的特殊字母<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/lWzOtlB.png" alt="LaTeX中的特殊字母及命令" title="">                </div>                <div class="image-caption">LaTeX中的特殊字母及命令</div>            </figure></li><li>LaTeX提供了babel宏包，可以方便同时访问多种语言的字母表，babel宏包可带有一个或多个语言的可选参数，支持不同的语言，如:\usepackage[greek,english]{babel},将使用英语和希腊语，其中最后一个参数的英语是默认语言，此时希腊语就可以用ASCII字符代替：\textgreek{abcd}</li><li>LaTeX在盘拌种会将单词中的一些字母连写为一个符号，即连字，连字的有无和多少一般是由使用的字体决定的，比如fi和fl连在了一起，有时候为了美观考虑取消连字，可以使用空的分组，比如：f{}ind</li><li>在每个标点之后应该加上空格，以保证正确的距离和换行</li><li>LaTeX中遇到单引号和双引号连续出现的情形，则在双引号和单引号之间用\隔开</li><li>除了在数学模式中表示减号，符号-在LaTeX正文中也有多种用途：单独使用时它是连字符，两个连用时en dash，用来表示数字范围；三个连用是em dash，即破折号</li><li>圣罗浩使用\ldots或者\dots命令产生，相比直接输入三个句号，它所略微拉开的间距要合理的多</li><li>标准键盘上不能直接录入的标点符号<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/FT4ZOtP.png" alt="标准键盘不能直接录入的标点符号" title="">                </div>                <div class="image-caption">标准键盘不能直接录入的标点符号</div>            </figure></li><li>文本中的空格起分隔单词的作用，任意多个空格与一个空格的功能相同；只有字符后面的空格使有效的，每行最前面的空格会被忽略。单个换行也被看做是一个空格</li><li>有一种不可打断的空格，在TeX中被称为带子，用~表示，TeX禁止在这种空格之间分行，因为可以用来表示一些不宜分开的情况<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/qKvkp9w.png" alt="带子的使用" title="">                </div>                <div class="image-caption">带子的使用</div>            </figure></li><li>西文的逗号、句号、分号等标点后面应该加空格，这不仅能保证正确的间距，也能保证正确的换行。这是因为，标点后如果没有空格，就不能换行。</li><li>空行，即用连续两个换行表示分段，段与段之间会自动得到合适的缩进，任意多个空行与一个空行的效果相同</li><li>除了分段，也可以让LaTeX直接另起一行，并不分段。\命令直接另起一行，上一行保持原来的样子，\命令可以带一个可选的长度参数，表示换行后增加的额外垂直间距，例如\[2cm]。\linebreak则指定一行的断点，上一行仍按完整一行散开对齐</li><li>特殊符号<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/T5X1sug.png" alt="正文中常用的特殊符号" title="">                </div>                <div class="image-caption">正文中常用的特殊符号</div>            </figure></li><li>LaTeX的基本工具宏包textcomp就定义了大量用于文本的符号，例如欧元符号\texteuro，千分符\textperthousand等。tipa宏包提供了国际音标字体的访问</li><li>预定义命令的字体族有3种：罗马字体族、无衬底字体族和打字机字体族，其命令为：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/uiy67RS.png" alt="预定义命令的字体族" title="">                </div>                <div class="image-caption">预定义命令的字体族</div>            </figure></li><li>预定义命令的字体形状有4种：直立形状、意大利形状、倾斜形状、小型大写形状，其命令为：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/NPpS0NK.png" alt="预定义命令的字体形状" title="">                </div>                <div class="image-caption">预定义命令的字体形状</div>            </figure></li><li>预定义命令的字体系列有中等和加宽加粗两类<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/kIXpFT7.png" alt="预定义命令的字体系列" title="">                </div>                <div class="image-caption">预定义命令的字体系列</div>            </figure></li><li>对于中文字体，一般只是用不同字体族进行区分。xeCJK和CJK宏包机制下，中文字体的选择命令和西文字体是分离，选择中文字体族使用\CJKfamily</li><li>中文的字体族，根据不同的系统和使用方式有不同，在ctex宏包及文档下有一些预定义<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/eBwRbYt.png" alt="ctex宏包提供的简化中文字体命令" title="">                </div>                <div class="image-caption">ctex宏包提供的简化中文字体命令</div>            </figure></li><li>字体命令：<ol><li>\emph表示强调，用于把直立体改为意大利体，把意大利体改为直立体</li><li>\underline可以给文字或公式加下划线</li></ol></li><li>基本的LaTeX提供了10个简单的生命是命令调整文字的大小<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/QXMMMsV.png" alt="声明式命令调整文字大小" title="">                </div>                <div class="image-caption">声明式命令调整文字大小</div>            </figure></li><li>中文字号可以使用ctex宏包或者ctexart等文档类提供的\zihao命令设置<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/H0dDab2.png" alt="中文字号" title="">                </div>                <div class="image-caption">中文字号</div>            </figure></li><li>LaTeX中的行距是与字号直接相关的，在设置字号的时候，同时也就设置了基本行距为文字大小的1.2倍</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;LaTeX简介&quot;&gt;&lt;a href=&quot;#LaTeX简介&quot; class=&quot;headerlink&quot; title=&quot;LaTeX简介&quot;&gt;&lt;/a&gt;LaTeX简介&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;LaTeX是一种基于TeX的文档排版系统。&lt;/li&gt;
&lt;li&gt;LaTeX并不是单独的程序
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="Latex" scheme="https://suda-morris.github.io/tags/Latex/"/>
    
  </entry>
  
  <entry>
    <title>Android Introduction</title>
    <link href="https://suda-morris.github.io/2016/01/20/android/"/>
    <id>https://suda-morris.github.io/2016/01/20/android/</id>
    <published>2016-01-20T10:01:40.000Z</published>
    <updated>2018-07-05T01:38:09.630Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android系统架构图"><a href="#Android系统架构图" class="headerlink" title="Android系统架构图"></a>Android系统架构图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/fNWm4KQ.png" alt="Android系统架构" title="">                </div>                <div class="image-caption">Android系统架构</div>            </figure><ol><li>应用程序框架<ol><li>Activity Manager：管理各个应用程序生命周期以及通常的导航回退功能</li><li>Window Manager：管理所有的窗口程序</li><li>Content Provider：使得不同应用程序之间存取或者分享数据</li><li>View System：构建应用程序的基本组件</li><li>NotificationManager：使得应用程序可以在状态栏中显示自定义的提示信息</li><li>Package Manager：Android系统内的程序管理</li><li>TelephonyManager：管理所有的移动设备功能</li><li>Resource Manager：提供应用程序使用的各种非代码资源，如本地化字符串、图片、布局文件、颜色文件等</li><li>LocationManager：提供位置服务</li><li>XMPP Service：提供GoogleTalk服务</li></ol></li><li>系统运行库分成两个部分，分别是系统库和Android运行时。<ol><li>系统库是应用程序框架的支撑，是连接应用程序框架层与Linux内核层的重要纽带。<ol><li>Surface Manager：执行多个应用程序的时候，负责管理显示与存取操作间的互动，另外也负责2D绘图与3D绘图进行显示合成</li><li>Media Framework：多媒体库，基于PacketVideo OpenCore；支持多种常用的音频、视频格式录制和回放，编码格式包络MPEG4、MP3、H.264、AAC、ARM</li><li>SQLite：小型的关系型数据库引擎</li><li>OpenGL|ES：根据OpenGLES1.0API标准实现的3D绘图函数库</li><li>FreeType：提供点阵字与向量字的描绘与显示</li><li>WebKit：一套网页浏览器的软件引擎</li><li>SGL：底层的2D图形渲染引擎</li><li>SSL:在Android上通信过程中实现握手</li><li>Libc：从BSD继承来的标准C系统函数库，专门为基于embedded linux的设备定制</li></ol></li><li>Android运行时，程序在Android运行时中执行，其运行分为核心库和Dalvik虚拟机两部分<ol><li>核心库：核心库提供了Java语言API中的大多数功能，同时也包含了Android的一些核心API，如android.os、android.net、android.media等等</li><li>Dalvik虚拟机：Android程序不同于J2ME程序，每个Android应用程序都有一个专有的进程，并且不是多个程序运行在一个虚拟机中，而是每个Android程序都有一个Dalvik虚拟机的实例，并在该实例中执行。Dalvik虚拟机是一种基于寄存爱的Java虚拟机，而不是传统的基于栈的虚拟机，并进行了内存资源使用的优化，以及支持多个虚拟机的特点。需要注意，不同于J2ME，Android程序在虚拟机中执行的并非编译后的字节码，而是通过转换工具dx将java字节码转换成dex格式的中间码</li></ol></li></ol></li></ol><h2 id="Adnroid-UI基础"><a href="#Adnroid-UI基础" class="headerlink" title="Adnroid UI基础"></a>Adnroid UI基础</h2><ol><li>Android UI由View和ViewGroup组成，ViewGroup是不可见的，用于组织和排版View和ViewGroup。View显示用户内容，以及相应用户的操作。Android UI可以在code中生产，不过更加方便的方式是在Android的XML文件中定义UI</li><li>可以通过2种方式定义界面结构，一种是在XML中定义视图结构，另一种是在运行时动态创建视图结构，<ol><li>通过XML定义视图结构，可以有效做到代码与界面的分离，并且提高界面的可读性。XML的文件西部包含一个root，可以是View或者ViewGroup。在节点下面增加子界面的方式来构造界面结构</li><li>在编译阶段，所有的XML layout文件都会编译到一个统一的View资源里面，在需要使用layout资源的时候，需要将资源加载到程序中，一般做法是在Activity.onCreate()中做加载的资源操作</li></ol></li><li>每一个View或者ViewGroup都有一个ID属性，该属性由class View定义。其定义语法为：android:id=”@+id/my_button”。<ol><li>@的意思是指示XML parser解析并且展开后面的内容，将其作为一个ID的资源</li><li>+的意思是指示这是一个新的ID，需要将其加到资源定义文件R.java中去。有一些系统自定的ID，如果引用这些系统自定的ID，则不需要加+号，但是要加上包的命名空间，其定义非语法为：android：id=“@android：id/empty”</li></ol></li><li>在XML文件中，通常使用layout_something来定义View在ViewGroup中的位置。ViewGroup类会实现一个嵌套类来扩展ViewGroup.LayoutParms。这个内嵌的子类会定义类型来指定字View的位置和大小。每个view group一般都会包含width和height参数，因此每个在其内部的view都需要定义这两个属性。一般不会将其指定为某一个宽度或者高度，一般写为相对的，这样可以保证适用于多种屏幕大小的设备。其中，wrap_content会根据内容的大小来调节大小。fill_parent，最大化达到父几点所允许的，在API level8后名字改为match_parent</li><li>View作为一个几何图形，具有4个属性对应于它所属的容器，分别是left，top，width和height，每个属性的单位是pixel。参考API文档，可以很多函数获取位置以及View的大小信息。getLeft()，getTop(),getRight(),getBottom()。获取的值一本都是相对应与父节点的位置和大小信息。Padding是内容与View空间直接的间隔。View并未提供Margin属性，该属性一般由ViewGroup设置</li><li>如果需要在界面上显示的内容是动态获取的话，可以使用Adapter和继承AdapterView的View来动态显示。Adapter是数据源和AdapterView之间的桥梁，由它从数据源获取数据，然后转换为一组实体，填充到View</li><li>可以简单的使用继承自AdapterView的View来绑定Adapter，来获取外部数据源的数据。Android也提供了一些继承自Adapter的子类用于处理不同的数据形式来建立View，下面是三种比较常见的Adapter：<ol><li>ArrayAdapter，当数据源是一个数组的时候，可以使用这个Adapter，默认，ArrayAdapter在调用toString()后会为每个Item创建一个TextView</li><li>SimpleCursorAdapter，如果数据源是来自于游标的时候，使用这个Adapter。使用这个Adapter的时候，需要指定Cursor的哪个行，哪个列插入Layout的View</li></ol></li><li>可以通过实现AdapterView.OnItemClickListener接口来让AdapterView响应点击事件</li></ol><h2 id="Android开发中高效的数据结构"><a href="#Android开发中高效的数据结构" class="headerlink" title="Android开发中高效的数据结构"></a>Android开发中高效的数据结构</h2><ol><li>SimpleArrayMap与ArrayMap<ol><li>实质上ArrayMap继承自SimpleArrayMap，主要是为了实现像HashMap一样的api方法，让习惯使用HashMap的开发者感觉不到差异，本质上是SimpleArrayMap+Map的再封装。一般来说使用这两个类来代替HashMap，因为它们比HashMap更加高效，也对内存进行了优化</li></ol></li><li>SparseArray与SparseArrayCompat和LongSparseArray<ol><li>这3个类中，前2个基本上是同一类，只不过第二个类有removeAt方法，第三个是Long类型的。这3个类也是用来代替HashMap，只不过它们的键的类型是整形Integer或者Long类型，在实际开发中，如月份缩写的映射，或者进行文件缓存映射，viewHolder都特别适用</li></ol></li><li>AtomicFile<ol><li>AtomicFile首先不是用来代替File的，而是作为File的辅助类存在，AtomicFile的作用是实现事务性原子操作，即文件读写必须完整，适合多线程中的文件读写操作</li></ol></li></ol><h2 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h2><ol><li>Intent是不同组件中提供运行时绑定的对象。Intent代表一个应用“想去做什么事情”，你可以用它做各种各样的任务，不过大部分的时候他们被用来启动另一个Activity。</li><li><p>在Activity之间传递数据包Bundle</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送端</span></span><br><span class="line">Bundle b = <span class="keyword">new</span> Bundle();</span><br><span class="line">b.putString(<span class="string">"name"</span>,<span class="string">"morris"</span>);</span><br><span class="line">b.putInt(<span class="string">"age"</span>,<span class="number">20</span>);</span><br><span class="line">intent.putExtras(b);</span><br><span class="line"><span class="comment">//接收端</span></span><br><span class="line">Bundle data = intent.getExtras();</span><br><span class="line">String name = data.getString(<span class="string">"name"</span>);</span><br><span class="line"><span class="keyword">int</span> age = data.getInt(<span class="string">"age"</span>);</span><br></pre></td></tr></table></figure></li><li><p>在Activity之间传递值对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*方法1，使用Java的序列化，效率比较低*/</span></span><br><span class="line"><span class="comment">//前提要求User类实现Serializable接口</span></span><br><span class="line"><span class="comment">//发送端</span></span><br><span class="line">intent.putExtra(<span class="string">"user"</span>,<span class="keyword">new</span> User(<span class="string">"name"</span>,<span class="number">20</span>));</span><br><span class="line"><span class="comment">//接收端</span></span><br><span class="line">User user = (User)intent.getSerializableExtra(<span class="string">"user"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*方法2，使用Android的Parcelable，效率比较高*/</span></span><br><span class="line"><span class="comment">//前提要求User类实现了Parcelable接口,并且重写了writeToParcel方法来手动实现序列化</span></span><br><span class="line"><span class="comment">//在User类中实现方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest,<span class="keyword">int</span> flags)</span></span>&#123;</span><br><span class="line">dest.writeString(getName());</span><br><span class="line">dest.writeInt(getAge());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在User类中实现常量对象CREATOR</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;User&gt; CREATOR = <span class="keyword">new</span> CREATOR&lt;User&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">createFromParcel</span><span class="params">(Parcel source)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(source.readString(),source.readInt());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> User[] newArray(<span class="keyword">int</span> size)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User[size];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送端</span></span><br><span class="line">intent.putExtra(<span class="string">"user"</span>,<span class="keyword">new</span> User(<span class="string">"name"</span>,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收端</span></span><br><span class="line">User user = intent.getParcelableExtra(<span class="string">"user"</span>);</span><br></pre></td></tr></table></figure></li><li><p>获取Activity的返回参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送端</span></span><br><span class="line">startActivityForResult(intent,requestCode);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode,Intent data)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onActivityResult(requestCode,resultCode,data);</span><br><span class="line"><span class="comment">//ToDo</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接收端</span></span><br><span class="line">setResult(resultCode,intent);</span><br><span class="line">finish();</span><br></pre></td></tr></table></figure></li><li><p>隐式Intent</p><ol><li><p>在AndroidManifest文件中，为activity添加<intent-filter>标签，并为其指名category和action</intent-filter></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt; //表示该intent-filter的行为方式是activity</span><br><span class="line">&lt;action android:name=&quot;字符串A&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>然后在创建Intent实例的时候把“字符串A”传入构造函数</p></li><li>一般来说，字符串A约定的格式为：包名.intent.action.类名</li><li>通过这种方式能够访问其他应用中的activity，但是如果在activity的标签中指名<code>android:exported=&quot;false&quot;</code>的话，别的应用便无法访问该activity</li></ol></li></ol><h2 id="Activity的启动模式"><a href="#Activity的启动模式" class="headerlink" title="Activity的启动模式"></a>Activity的启动模式</h2><ol><li>在AndroidManifest文件中，为activity添加参数：android:lanuchMode=”standard”。在standard启动模式中，所有实例放入同一个任务栈，因此支持后退键导航</li><li>在AndroidManifest文件中，为activity添加参数：android:lanuchMode=”singleTop”。singleTop模式和standard模式都会将intent发送给新的实例，不过，singleTop要求如果创建intent的时候栈顶已经有了要创建的Activity的实例，则将intent发送给该实例，而不创建新的实例。singleTop模式，可用来解决栈顶多个重复相同的Activity的问题。如果是A activity跳转到B activity，在跳转到A activity，行为就和standard模式一样了，会在B activity跳转到A activity的时候创建A activity的新实例，因为当时的栈顶不是A activity实例。</li><li>在AndroidManifest文件中，为activity添加参数：android:lanuchMode=”singleTask”。当intent到来，需要穿件singleTask模式Activity的时候，系统会检查任务栈里面是否已经有该Activity的实例，如果有直接将intent发送给它。</li><li>在AndroidManifest文件中，为activity添加参数：android:lanuchMode=”singleInstance”。<strong>一个任务栈只包括一个activity</strong>。比如有A，B，C三个Activity，其中B为sigleInstance模式，他们之间的跳转关系是A-&gt;B-&gt;C，现在在C中按下返回键，由于B位于独立的task中，它不属于C的上下文activity，所以此时直接返回到A中。</li></ol><h2 id="Get-a-string-resource-from-you-app’s-Resources"><a href="#Get-a-string-resource-from-you-app’s-Resources" class="headerlink" title="Get a string resource from you app’s Resources"></a>Get a string resource from you app’s Resources</h2><blockquote><p>String hello = getResources().getString(R.string.hello_world);</p></blockquote><h2 id="Toast使用方法"><a href="#Toast使用方法" class="headerlink" title="Toast使用方法"></a>Toast使用方法</h2><blockquote><p>Toast.makeText(activity对象，“显示内容”，Toast.LENGTH_SHORT).show();</p></blockquote><h2 id="适配不同的屏幕"><a href="#适配不同的屏幕" class="headerlink" title="适配不同的屏幕"></a>适配不同的屏幕</h2><ol><li>安卓设备的屏幕的分类指标：大小(size)和分辨率(density)</li><li>有四种size：small，normal，large，xlarge</li><li>有四种density：low（ldpi），medium（mdpi），high（hdpi），extra high（xhdpi）</li><li>每份图片需要四种分辨率的备份，比如，如果你为xhdpi设备生成一张200X200的照片，同样，你需要为hdpi设备生成150X150的照片，为mdpi设备生成100X100的照片，为ldpi设备生成75X75的照片<ol><li>xhdpi：2.0</li><li>hdpi：1.5</li><li>mdpi：1.0（baseline）</li><li>ldpi：0.75</li></ol></li><li>一般来说，ldpi的素材是可以不需要的，因为如果你提供了hdpi的素材，系统会自动将它缩小一半来适应ldpi的设备</li></ol><h2 id="Activity的生命周期"><a href="#Activity的生命周期" class="headerlink" title="Activity的生命周期"></a>Activity的生命周期</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/gzlBPwv.png" alt="Activity生命周期" title="">                </div>                <div class="image-caption">Activity生命周期</div>            </figure><ol><li>onPause主要完成的工作（为了快速切换到下一个Activity，这个函数里面的操作内容应该尽量简单些）<ol><li>停止动画或者其他正在消耗CPU的动作</li><li>提交未保存的变化，比如草稿邮件</li><li>释放系统资源，包括broadcast receiver，传感器句柄等</li></ol></li><li>onStop函数用来执行占用CPU大的shut-down操作，比如往数据库中写入数据</li></ol><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><ol><li>它是用来访问全局信息（比如，应用程序的资源）的接口，一些常用的资源都会实现Context，这样就可以方便访问资源</li><li>System.out.println(R.string.hello_world)等同于System.out.println(getContext().getResources().getText(R.string.hello_world));</li></ol><h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><ol><li>安装一个app应用后可以在桌面上显示多个应用图标(即同一个应用程序有多个主Activity)，那是因为在Manifest文件中设置了多个activity的category为android.intent.category.LAUNCHER，action为android.intent.category.LAUNCHER。但是这几个应用同属于一个Application，表现为在Manifest文件中，这些activity在同一个application标签下。</li><li>在Manifest文件中，为application标签设置属性name,其值为一个继承自Application的某个自定义类，这样在任意一个activity中可以通过getApplicationContext来获取该自定义Application类的实例。从某种意义上来说，该自定义Appliacation类中的资源可以更加方便的为全局共享，里面可以存放一些全局的逻辑资源（区别于UI的资源）</li><li>Application的生命周期相关的方法<ol><li>onCreate，创建Application的时候调用，先于activity的onCreate</li><li>onTerminate，结束后调用</li><li>onLowMemory，低内存时候调用</li><li>onTrimMemory，操作系统内存整理的时候调用</li><li>onConfigurationChanged，配置改变的时候调用</li></ol></li></ol><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><ol><li>启动服务：startService，service内部会执行onStartCommand</li><li>停止服务：stopService</li><li>绑定服务：bindService</li><li>解绑服务：unbindService</li><li>当activity与service绑定后，如果activity退出，响应的service也会停止。即service的生命周期伴随着activity的存在于消亡。若是是使用startService来启动service的话，service的生命将会独立于activity，只有通过调用stopService才能将其停止。当startService与bindService都调用了的话，若想退出服务，unbindService与stopService都必须执行</li><li>同一个service只会创建1次</li></ol><h2 id="普通辅线程不允许修改UI线程中的资源！"><a href="#普通辅线程不允许修改UI线程中的资源！" class="headerlink" title="普通辅线程不允许修改UI线程中的资源！"></a>普通辅线程不允许修改UI线程中的资源！</h2><h2 id="AIDL-Android-Interface-Definition-Language"><a href="#AIDL-Android-Interface-Definition-Language" class="headerlink" title="AIDL(Android Interface Definition Language)"></a>AIDL(Android Interface Definition Language)</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Android系统架构图&quot;&gt;&lt;a href=&quot;#Android系统架构图&quot; class=&quot;headerlink&quot; title=&quot;Android系统架构图&quot;&gt;&lt;/a&gt;Android系统架构图&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
   
      
    
    </summary>
    
      <category term="Mobile" scheme="https://suda-morris.github.io/categories/Mobile/"/>
    
    
      <category term="Android" scheme="https://suda-morris.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio Install</title>
    <link href="https://suda-morris.github.io/2016/01/19/android-studio/"/>
    <id>https://suda-morris.github.io/2016/01/19/android-studio/</id>
    <published>2016-01-19T02:06:41.000Z</published>
    <updated>2018-07-05T01:38:09.630Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最新安装的Android-Studio打开软件特别慢，总是卡在“Fetching-Android-SDK-component-information”，如何解决？"><a href="#最新安装的Android-Studio打开软件特别慢，总是卡在“Fetching-Android-SDK-component-information”，如何解决？" class="headerlink" title="最新安装的Android Studio打开软件特别慢，总是卡在“Fetching Android SDK component information”，如何解决？"></a>最新安装的Android Studio打开软件特别慢，总是卡在“Fetching Android SDK component information”，如何解决？</h2><ol><li>进入Android Studio的安装目录下的bin目录，找到idea.properties文件，用文本编辑器打开</li><li>在idea.properties文件末尾天剑一行：disable.android.first.run=true,然后保存文件</li><li>关闭Android Studio后重新启动</li></ol><h2 id="给Android-Studio安装Genymotion插件"><a href="#给Android-Studio安装Genymotion插件" class="headerlink" title="给Android Studio安装Genymotion插件"></a>给Android Studio安装Genymotion插件</h2><ol><li>File-&gt;Settings</li><li>找到plugins设置项，点击Browser，输入：genymotion关键字，安装相应插件</li><li>重启android studio后，点击Genymotion插件的图标，设置Genymotion在本地的路径，完成后就告成</li></ol><h2 id="设置自动导入依赖包"><a href="#设置自动导入依赖包" class="headerlink" title="设置自动导入依赖包"></a>设置自动导入依赖包</h2><ol><li>File-&gt;Settings-&gt;Editor</li><li>找到Auto Import选项，使能：show import popup，Optimize imports on the fly，Add unambiguous imports on the fly</li></ol><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><ol><li>Gradle同步，在项目运行或者更改Gradle配置的时候都要点击下这个按钮，会下载相应的依赖</li><li>AVD Manager，模拟器管理</li><li>SDK Manager，管理SDK版本</li><li>DDMS即Dalvik Debug Monitor Service，Dalvik调试监控服务</li></ol><h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><ol><li>Gradle是一种依赖管理工具，基于Groovy语言，面向Java应用为主，它抛弃了基于XML的各种繁琐配置，而取而代之的是一种基于Groovy的内部领域特定（DSL）语言</li><li>Android Studio中新建项目成功后会自动下载Gradle，Windows下回安装到：C:\Documents and Settings\&lt;用户名&gt;.gradle\wrapper\dists 目录</li><li>命令行Gradle编译过程<ol><li>切换到项目根目录，执行./gradlew -v来查看项目所用的Gradle版本，如果是第一次执行，将会去下载Gradle</li><li>接着执行./gradlew clean，清除项目根目录/app目录下的build文件夹</li><li>最后执行./gradlew build,检查依赖，直接编译生成相应的apk文件。接着在项目根目录/app/build/outputs/apk目录下会看到类似于app-debug-unaligned.apk，app-release-unsigned.apk等，unaligned代表没有进行zip优化的，unsigned代表没有签名的。</li><li>gradlew build命令吧debug、release环境的包都打出来，如果正式发布只需要打Release的包，就需要这样使用：<ol><li>./gradlew assembleDebug编译并打Debug包</li><li>./gradlew assembleRelease编译并打Release包</li></ol></li><li>除此以外，assemble除了能和BuildType结合外还能和ProductFlavor结合，实质上，assemble是和Build Variants一起结合使用的，而Build Variants=Build Type + Product Flavor，例如如果想打包豌豆荚渠道的release版本，执行如下命令：<code>./gradle assembleWandoujiaRelease</code>,如果只打豌豆荚渠道的版本，则：<code>./gradle assembleWandoujia</code></li></ol></li><li>与Gradle相关的几个文件<ol><li>项目根目录/app/build.gradle,这个文件是app文件下下这个Module的gradle配置文件，在里面会指明要编译成安卓的应用程序（com.android.application）还是库（com.android.library）；指明编译SDK的版本，build tools的版本（根据实际开发者已经下载好的版本来修改），指明应用的包名，支持的最小的SDK版本，目标SDK版本，要编译在lib目录下的哪些jar包。</li><li>项目根目录/build.gradle，这个文件是整个项目的基础配置文件，内容主要包括两个方面，一个是声明仓库的源，一般是jcenter，jcenter可以理解成是一个新的中央远程仓库，兼容maven中心仓库，而且性能更优。另一个是声明了android gradle plugin的版本</li><li>项目根目录/settings.gradle，这个文件是全局的项目配置文件，里面主要声明一些需要加入gradle的module，例如：<code>include &#39;:app&#39;, &#39;:extras:ShimmerAndroid&#39;</code>,文件中的app，extra：ShimmerAndroid都是module，如果还有其他module都需要按照如上格式加进去</li></ol></li><li>完整的gradle脚本<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: 'com.android.application'</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">releaseTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Date().format(<span class="string">"yyyy-MM-dd"</span>, TimeZone.getTimeZone(<span class="string">"UTC"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">21</span></span><br><span class="line">    buildToolsVersion '21.1.2'</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.boohee.*"</span></span><br><span class="line">        minSdkVersion <span class="number">14</span></span><br><span class="line">        targetSdkVersion <span class="number">21</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// dex突破65535的限制</span></span><br><span class="line">        multiDexEnabled <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 默认是umeng的渠道</span></span><br><span class="line">        manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"umeng"</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        abortOnError <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            <span class="comment">// No debug config</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        release &#123;</span><br><span class="line">            storeFile file(<span class="string">"../yourapp.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"your password"</span></span><br><span class="line">            keyAlias <span class="string">"your alias"</span></span><br><span class="line">            keyPassword <span class="string">"your password"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            <span class="comment">// 显示Log</span></span><br><span class="line">            buildConfigField <span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"true"</span></span><br><span class="line"></span><br><span class="line">            versionNameSuffix <span class="string">"-debug"</span></span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            zipAlignEnabled <span class="literal">false</span></span><br><span class="line">            shrinkResources <span class="literal">false</span></span><br><span class="line">            signingConfig signingConfigs.debug</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        release &#123;</span><br><span class="line">            <span class="comment">// 不显示Log</span></span><br><span class="line">            buildConfigField <span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"false"</span></span><br><span class="line"></span><br><span class="line">            minifyEnabled <span class="literal">true</span></span><br><span class="line">            zipAlignEnabled <span class="literal">true</span></span><br><span class="line">            <span class="comment">// 移除无用的resource文件</span></span><br><span class="line">            shrinkResources <span class="literal">true</span></span><br><span class="line">            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'</span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line"></span><br><span class="line">            applicationVariants.all &#123; variant -&gt;</span><br><span class="line">                variant.outputs.each &#123; output -&gt;</span><br><span class="line">                    def outputFile = output.outputFile</span><br><span class="line">                    if (outputFile != null &amp;&amp; outputFile.name.endsWith('.apk')) &#123;</span><br><span class="line">                        <span class="comment">// 输出apk名称为boohee_v1.0_2015-01-15_wandoujia.apk</span></span><br><span class="line">                        def fileName = <span class="string">"boohee_v$&#123;defaultConfig.versionName&#125;_$&#123;releaseTime()&#125;_$&#123;variant.productFlavors[0].name&#125;.apk"</span></span><br><span class="line">                        output.outputFile = <span class="keyword">new</span> File(outputFile.parent, fileName)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 友盟多渠道打包</span></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        wandoujia &#123;&#125;</span><br><span class="line">        _360 &#123;&#125;</span><br><span class="line">        baidu &#123;&#125;</span><br><span class="line">        xiaomi &#123;&#125;</span><br><span class="line">        tencent &#123;&#125;</span><br><span class="line">        taobao &#123;&#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    productFlavors.all &#123; flavor -&gt;</span><br><span class="line">        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(dir: 'libs', include: ['*.jar'])</span><br><span class="line">    compile 'com.android.support:support-v4:21.0.3'</span><br><span class="line">    compile 'com.jakewharton:butterknife:6.0.0'</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;最新安装的Android-Studio打开软件特别慢，总是卡在“Fetching-Android-SDK-component-information”，如何解决？&quot;&gt;&lt;a href=&quot;#最新安装的Android-Studio打开软件特别慢，总是卡在“Fetchin
      
    
    </summary>
    
      <category term="Mobile" scheme="https://suda-morris.github.io/categories/Mobile/"/>
    
    
      <category term="Android" scheme="https://suda-morris.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>JSON</title>
    <link href="https://suda-morris.github.io/2015/12/07/json/"/>
    <id>https://suda-morris.github.io/2015/12/07/json/</id>
    <published>2015-12-07T10:06:10.000Z</published>
    <updated>2018-12-26T11:31:37.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cJSON使用"><a href="#cJSON使用" class="headerlink" title="cJSON使用"></a>cJSON使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">cJSON</span> &#123;</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">cJSON</span> *<span class="title">next</span>,*<span class="title">prev</span>;</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">cJSON</span> *<span class="title">child</span>;</span></span><br><span class="line"> <span class="keyword">int</span> type;</span><br><span class="line"> <span class="keyword">char</span> *valuestring;</span><br><span class="line"> <span class="keyword">int</span> valueint;</span><br><span class="line"> <span class="keyword">double</span> valuedouble;</span><br><span class="line"> <span class="keyword">char</span> *<span class="built_in">string</span>;</span><br><span class="line">&#125; cJSON;</span><br></pre></td></tr></table></figure><ol><li><p>cJSON结构体为一个双向链表，并可通过child指针访问下一层</p></li><li><p>type变量决定数据类型，数据项可以是字符串可以是整形，也可以是浮点型。如果是整形的话可以从valueint取出，如果是浮点型的话可以从valuedouble取出，以此类推</p></li><li><p>主要函数说明</p><ol><li>解析<ol><li>cJSON_Parse函数负责解析JSON数据包，并按照cJSON结构体的结构序列化整个数据包。使用该函数会通过malloc函数在内存中开辟一个空间，使用完成需要手动释放</li><li>cJSON_GetObjectItem函数可以从cJSON结构体中查找某个子节点名称，如果查找成功，可把该子节点序列化到cJSON结构体中</li><li>如果需要使用cJSON结构体中的内容，可通过cJSON结构体中的valueint和valuestring取出有价值的内容</li><li>通过cJSON_Delete释放内存空间</li></ol></li><li>组装<ol><li>cJSON_CreateObject函数可创建一个根数据项，之后便可向该根数据项中添加string或int等内容</li><li>cJSON_AddNumberToObject向节点中添加子节点</li><li>cJSON_Print函数可以打印跟数据项</li></ol></li></ol></li><li><p>使用例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">cJSON* pRoot = cJSON_CreateObject();</span><br><span class="line">cJSON* pArray = cJSON_CreateArray();</span><br><span class="line">cJSON_AddItemToObject(pRoot, <span class="string">"students_info"</span>, pArray);</span><br><span class="line"><span class="keyword">char</span>* szOut = cJSON_Print(pRoot);</span><br><span class="line">   </span><br><span class="line">cJSON* pItem = cJSON_CreateObject();</span><br><span class="line">cJSON_AddStringToObject(pItem, <span class="string">"name"</span>, <span class="string">"chenzhongjing"</span>);</span><br><span class="line">cJSON_AddStringToObject(pItem, <span class="string">"sex"</span>, <span class="string">"male"</span>);</span><br><span class="line">cJSON_AddNumberToObject(pItem, <span class="string">"age"</span>, <span class="number">28</span>);</span><br><span class="line">cJSON_AddItemToArray(pArray, pItem);</span><br><span class="line">   </span><br><span class="line">pItem = cJSON_CreateObject();</span><br><span class="line">cJSON_AddStringToObject(pItem, <span class="string">"name"</span>, <span class="string">"fengxuan"</span>);</span><br><span class="line">cJSON_AddStringToObject(pItem, <span class="string">"sex"</span>, <span class="string">"male"</span>);</span><br><span class="line">cJSON_AddNumberToObject(pItem, <span class="string">"age"</span>, <span class="number">24</span>);</span><br><span class="line">cJSON_AddItemToArray(pArray, pItem);</span><br><span class="line">   </span><br><span class="line">pItem = cJSON_CreateObject();</span><br><span class="line">cJSON_AddStringToObject(pItem, <span class="string">"name"</span>, <span class="string">"tuhui"</span>);</span><br><span class="line">cJSON_AddStringToObject(pItem, <span class="string">"sex"</span>, <span class="string">"male"</span>);</span><br><span class="line">cJSON_AddNumberToObject(pItem, <span class="string">"age"</span>, <span class="number">22</span>);</span><br><span class="line">cJSON_AddItemToArray(pArray, pItem);</span><br><span class="line">   </span><br><span class="line"><span class="keyword">char</span>* szJSON = cJSON_Print(pRoot);</span><br><span class="line">cJSON_Delete(pRoot);</span><br><span class="line"><span class="comment">//free(szJSON);</span></span><br><span class="line">   </span><br><span class="line">pRoot = cJSON_Parse(szJSON);</span><br><span class="line">pArray = cJSON_GetObjectItem(pRoot, <span class="string">"students_info"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pArray)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> iCount = cJSON_GetArraySize(pArray);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iCount; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    cJSON* pItem = cJSON_GetArrayItem(pArray, i);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pItem)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">string</span> strName = cJSON_GetObjectItem(pItem, <span class="string">"name"</span>)-&gt;valuestring;</span><br><span class="line">    <span class="built_in">string</span> strSex = cJSON_GetObjectItem(pItem, <span class="string">"sex"</span>)-&gt;valuestring;</span><br><span class="line">    <span class="keyword">int</span> iAge = cJSON_GetObjectItem(pItem, <span class="string">"age"</span>)-&gt;valueint;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">cJSON_Delete(pRoot);</span><br><span class="line"><span class="built_in">free</span>(szJSON);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;cJSON使用&quot;&gt;&lt;a href=&quot;#cJSON使用&quot; class=&quot;headerlink&quot; title=&quot;cJSON使用&quot;&gt;&lt;/a&gt;cJSON使用&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="json" scheme="https://suda-morris.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Network Security</title>
    <link href="https://suda-morris.github.io/2015/12/06/network-security/"/>
    <id>https://suda-morris.github.io/2015/12/06/network-security/</id>
    <published>2015-12-06T10:06:10.000Z</published>
    <updated>2018-12-29T03:34:07.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息安全的基本属性"><a href="#信息安全的基本属性" class="headerlink" title="信息安全的基本属性"></a>信息安全的基本属性</h2><ol><li>机密性（Confidentiality）——别人“看不到”或者“看不懂”</li><li>认证（Authentication）——证明“你就是你”</li><li>完整性（Integrity）——信息没有被“动过”</li><li>不可否认性（Non-repudiation）——不能抵赖</li></ol><h2 id="密码算法分类"><a href="#密码算法分类" class="headerlink" title="密码算法分类"></a>密码算法分类</h2><ul><li>加密算法：用于机密性解决方案</li><li>杂凑函数：用于完整性解决方案</li><li>数字签名：用于认证和不可否认性</li></ul><h2 id="保密通信系统模型"><a href="#保密通信系统模型" class="headerlink" title="保密通信系统模型"></a>保密通信系统模型</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/12/29/FWXQtx.png" alt="FWXQtx.png" title="">                </div>                <div class="image-caption">FWXQtx.png</div>            </figure><h2 id="SSL-TLS加密"><a href="#SSL-TLS加密" class="headerlink" title="SSL/TLS加密"></a>SSL/TLS加密</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/YJZiqwC.png" alt="SSL协议报文" title="">                </div>                <div class="image-caption">SSL协议报文</div>            </figure><ol><li>SSL运行在TCP/IP层之上、应用层之下，为应用程序提供加密数据通道，它采用了RC4、MD5以及RSA等加密算法，使用40位的密钥。</li><li>HTTPS实际上就是HTTP over SSL，它使用默认端口443，而不是像HTTP那样使用端口80。</li><li>HTTPS协议使用SSL在发送方把原始数据进行加密，然后在接收方进行解密，加密和解密需要发送方和接收方通过交换公知的密钥来实现，因此，所传送的数据不容易被网络何可截获和解密<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/rahzPAL.png" alt="SSL通信过程" title="">                </div>                <div class="image-caption">SSL通信过程</div>            </figure></li><li>工作流程<ol><li>建立安全能力。SSL捂手的第一阶段启动逻辑连接，建立这个连接的安全能力。首先客户机向服务器发出client hello消息并等待服务器响应，随后服务器向客户机返回server hello消息，对client hello消息中的信息进行确认。<ol><li>Client hello消息包括：<ol><li>客户端可以支持的SSL最高版本号</li><li>一个客户端生成的随机数，稍后用于生成“对话密钥”</li><li>一个确定会话的会话ID</li><li>一个客户端可以支持的密码套件列表，每个套件都以SSL开头，紧跟着的是密钥交换算法，用with这个词把密钥交换算法、机密算法、散列算法分开。例如：SSL_DHE_RSA_WITH_DES_CBC_SHA, 表示把DHE_RSA(带有RSA数字签名的暂时Diffie-HellMan)定义为密钥交换算法；把DES_CBC定义为加密算法；把SHA定义为散列算法。</li><li>一个客户端可以支持的压缩算法列表</li></ol></li><li>Server Hello消息包括 <ol><li>一个SSL版本号。去客户端支持的最高版本号和服务端支持的最高笨笨好中的较低者</li><li>一个服务器生成的随机数，稍后用于生成“对话密钥”</li><li>会话ID</li><li>从客户端的密码条件列表中选择的一个密码套件</li><li>从客户端的压缩方法的列表中选择的压缩方法</li></ol></li><li>这个阶段之后，客户端服务端知道了下列内容：<ol><li>SSL版本</li><li>密钥交换、信息验证和加密算法</li><li>压缩方法</li><li>有关密钥生成的两个随机数</li></ol></li></ol></li><li>服务器鉴别与密钥交换。服务器启动SSL握手第二阶段，是本阶段所有消息的唯一发送方，客户机是所有消息的唯一接收方。该阶段分为4步<ol><li>证书：服务器将数字证书和到根CA整个链发给客户端，使客户端能用服务器证书中的服务器公钥认证服务器</li><li>服务器密钥交换：这里视密钥交换算法而定</li><li>证书请求：服务端可能会要求客户自身进行验证</li><li>服务器握手完成</li></ol></li><li>客户机鉴别与密钥交换。客户机启动SSL握手第三阶段，是本阶段所有消息的唯一发送方，服务器是所有消息的唯一接收方。该阶段分为3歩：<ol><li>证书：为了对服务器证明自身，客户要发送一个整数信息，这是可选的</li><li>客户机密钥交换：这里客户端将预备主密钥发送给服务端，注意这里会使用服务端的公钥进行加密</li><li>证书验证：对预备密钥和随机数进行签名</li></ol></li><li>完成，客户机启动SSL握手的第四阶段，是服务器结束。该阶段分成4歩</li></ol></li><li>SSL协议可分为两层：<ol><li>SSL记录协议：它建立在可靠的传输协议之上，为高层协议提供数据封装、压缩、加密等基本功能的支持</li><li>SSL握手协议：它建立在SSL记录协议之上，用于在实际数据传输开始前，通讯双方进行身份认证、协商加密算法、交换密钥等</li></ol></li><li>ESP8266作为SSL server时，提供加密证书的制作脚本，生成SSL加密所需的头文件cert.h和private_key.h。CA认证功能默认关闭，用户可调用接口espconn_secure_ca_enable使能CA认证<ol><li>证书制作：tool文件夹下，修改makefile.sh文件里面的IP地址为实际SSL 服务器的IP地址；然后./makefile.sh</li><li>开发者必须调用espconn_secure_set_default_certificate和espconn_secure_set_default_private_key传入证书和密钥</li><li>证书制作脚本makefile.sh生成默认SSL server证书由Espressif System颁发，并非由CA颁发。如果用户需要CA认证，请将运行脚本Makefile.sh生成的TLS.ca_x509.cer导入SSL client，并使用脚本make_cacert.py将CA文件生成eap_ca_cert.bin烧写到Flash对应的地址</li></ol></li><li>ESP8266作为SSL client时，可支持双向认证。CA认证功能默认关闭，用户可调用接口espconn_secure_ca_enable使能CA认证</li><li>ESP8266作为SSL client时支持证书认证功能，但此功能默认关闭，开发者可以调用接口espconn_secure_cert_req_enable使能证书认证，证书制作：<ol><li>修改脚本makefile.sh，制作开发者自行签发的CA证书，例如，证书实例中的TLS.ca_x509.cer</li><li>使用签发的CA制作供SSL client使用的证书，例如，证书示例中的TLS.x509_1024.cer</li><li>去除制作SSL client使用的证书时所用的密钥，例如证书示例中的TLS.key_1024</li><li>将证书合成脚本make_cacert.py与CA文件放在同一目录下</li><li>运行脚本“make_cacert.py”将合成同一目录下的CA文件生成sap_ca_cert.bin，esp_ca_cert.bin的烧录位置由接口espconn_secure_ca_enable设置，用户可以自行定义</li><li>重命名证书名称（例如TLS.x509_1024.cer）；重命名密钥名称，改为private_key.key_1024。</li><li>将重命名后的文件，与脚本make_cert.py拷贝到同一目下下</li><li>运行脚本make_cert.py生成esp_cert_private_key.bin，esp_cert_private_key.bin的烧录位置由接口espconn_secure_cert_enable设置，用户可自行定义</li></ol></li><li>软件接口<ol><li>SSL系列软件接口与普通TCP软件接口，在SDK底层是两套不同的处理流程，因此不能混用两种软件接口。SSL连接时，仅支持使用：<ol><li>espconn_secure_XXX系列接口</li><li>espconn_regist_XXX系列注册回调的接口</li><li>espconn_port获得一个空闲的端口</li></ol></li></ol></li><li>在SSL中会使用密钥交换算法交换密钥；使用密钥对数据进行加密；使用散列算法对数据的完整性进行验证，使用数字证书证明自己的身份</li><li>SSL/TLS协议的基本思路是采用<strong>公钥加密法</strong>，也就是说，客户端先向服务器所要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。<ol><li>如何保证公钥不被篡改？<ul><li>将公钥放在数字证书中。只要证书时可信的，公钥就是可信的</li></ul></li><li>公钥加密计算量太大，如何减少耗用的时间？<ul><li>每一次对话（session），客户端和服务器都生成一个“对话密钥”，用它来加密信息。由于“对话密钥”是对称加密，所以运算速度非常快，而服务器公钥只用于加密“对话密钥”本身，这样就减少了加密运算的消耗时间</li></ul></li><li>SSL/TLS协议的基本过程是这样的：<ol><li>客户端向服务端索要并验证公钥</li><li>双方协商生成“对话密钥”</li><li>双方采用“对话密钥”进行加密通信</li></ol></li><li>为什么要用三个随机数来生成“会话密钥”？<ul><li>不管是客户端还是服务器，都需要随机数，这样生成的密钥才不会每次都一样。由于SSL协议中证书是静态的，因此十分有必要引入一种随机因素来保证协商出来的密钥的随机性。对于RSA密钥交换算法来说，pre-master-key本身就是一个随机数，再加上hello消息中的随机，三个随机数通过一个密钥导出器最终导出一个对称密钥。pre master的存在在于SSL协议不信任每个主机都能产生完全随机的随机数，如果随机数不随机，那么pre master secret就有可能被猜出来，那么仅适用pre master secret作为密钥就不合适了，因此必须引入新的随机因素，那么客户端和服务器加上pre master secret三个随机数一同生成的密钥就不容易被猜出了，一个伪随机可能完全不随机，可是是三个伪随机就十分接近随机了，每增加一个自由度，随机性增加的可不是一。</li></ul></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;信息安全的基本属性&quot;&gt;&lt;a href=&quot;#信息安全的基本属性&quot; class=&quot;headerlink&quot; title=&quot;信息安全的基本属性&quot;&gt;&lt;/a&gt;信息安全的基本属性&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;机密性（Confidentiality）——别人“看不到”或者“看不懂”
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="SSL/TLS" scheme="https://suda-morris.github.io/tags/SSL-TLS/"/>
    
  </entry>
  
  <entry>
    <title>Verilog Basic</title>
    <link href="https://suda-morris.github.io/2015/11/22/verilog/"/>
    <id>https://suda-morris.github.io/2015/11/22/verilog/</id>
    <published>2015-11-22T11:53:49.000Z</published>
    <updated>2018-07-05T01:38:09.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="verilog与数字电路基础"><a href="#verilog与数字电路基础" class="headerlink" title="verilog与数字电路基础"></a>verilog与数字电路基础</h2><ol><li>数字电路的五基元电路：反相器、与门、或门、三态门、D触发器</li><li>常用三种描述方式：<ol><li>数据流描述(assign)-&gt;组合逻辑电路</li><li>行为级描述(always)-&gt;时序逻辑电路</li><li>门级电路(and/or/not/buf)-&gt;基本门电路的调用</li></ol></li><li>常用关键字：always,assign,begin,case(xz),default,defparam,else,end,for,function,if,input,input,integer,module,negedge,output,parameter,posedge,primitive,reg,table,task,wire<ol><li>自定义模块(一般由FPGA厂商制作):primitive…endprimitive;table…endtable;</li></ol></li></ol><h2 id="我的FPGA"><a href="#我的FPGA" class="headerlink" title="我的FPGA"></a>我的FPGA</h2><ol><li>FPGA芯片：EP4CE6F22C8N，逻辑资源6272LEs，乘法器15，RAM资源270Kbits</li><li>SDRAM芯片：K4S561632J，256Mbit</li><li>串行FLASH：EPCS4，4Mbit</li><li>有源晶振：48MHz</li><li>SPI Flash：Winbond 25Q128</li></ol><h2 id="FPGA入门知识"><a href="#FPGA入门知识" class="headerlink" title="FPGA入门知识"></a>FPGA入门知识</h2><ol><li>FPGA的仿真分为：行为仿真、门级仿真和布局布线后仿真，或者叫做前仿真、后仿真（包含门级仿真和布局布线后仿真）。</li><li>一个标称450MHz的FPGA仅仅值内部的寄存器或者乘法器、RAM等单个资源的时钟频率能够达到。实际上使用这些器件搭建一个运行在200-300MHz之间的设计已经非常理想。因为级联门延时、线延时都是非常大的除了优化算法结构外，为了达到更高的速率插入同步寄存器，增加流水级数必不可少，这样才能用资源换来速度的提升。对同功能的设计，速度和资源永远成反比</li><li>建立就是CLK到来前DATA稳定时间，保持就是时钟到来后数据的保持时间</li><li>现在的很多PCB工具和FPGA开发软件都有附带的接口，可以相互转换。将PCB设计软件中的管脚转换成FPGA的约束文件（TCL或者CSV格式），或者在FPGA调整之后再次导入PCB</li><li>真的时钟是不能赋值给线网或者寄存器的。由于FPGA里时钟属于单独的时钟树，CLK是无法直接赋值给一个寄存器变量的，因为他们只能从时钟树分配到寄存器的CLK端。因为时钟树总是和寄存器的clk端相连，他们和触发器的D端实际是不连接的，需要通过特殊处理。</li><li>在基本组成元素中非时序组合逻辑在FPGA内部使用查找表资源实现（LUT）。而时序则由寄存器实现。</li><li>三段式有限状态机：<ol><li>现态</li><li>次态</li><li>逻辑输出</li></ol></li><li>状态机编码：<ol><li>顺序编码</li><li>格雷编码</li><li>一位热码</li><li>约翰逊编码</li></ol></li><li></li></ol><h2 id="将POF文件转换成固化到FPGA-Flash的文件"><a href="#将POF文件转换成固化到FPGA-Flash的文件" class="headerlink" title="将POF文件转换成固化到FPGA Flash的文件"></a>将POF文件转换成固化到FPGA Flash的文件</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/u2iVkzg.png" alt="使用JTAG烧写Flash文件（非AS模式）" title="">                </div>                <div class="image-caption">使用JTAG烧写Flash文件（非AS模式）</div>            </figure><ol><li>选择File-&gt;Convert Programming Files</li><li>选择Programming file type为：JTAG Indirect Configuration(.jic),选择相应的串行配置Flash型号，点击Flash Loader，添加Flash器件，然后导入之前生成的pof文件</li></ol><h2 id="使用TCL文件来分配器件与管脚"><a href="#使用TCL文件来分配器件与管脚" class="headerlink" title="使用TCL文件来分配器件与管脚"></a>使用TCL文件来分配器件与管脚</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/oEYr6m0.png" alt="一个tcl文件的例子" title="">                </div>                <div class="image-caption">一个tcl文件的例子</div>            </figure><h2 id="Verilog的模块"><a href="#Verilog的模块" class="headerlink" title="Verilog的模块"></a>Verilog的模块</h2><ol><li><p>模块是Verilog语言的基本单元，其基本语法如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> &lt;模块名&gt;（&lt;端口列表&gt;）</span><br><span class="line">端口说明（<span class="keyword">input</span>，<span class="keyword">output</span>，<span class="keyword">inout</span>）</span><br><span class="line">参数定义</span><br><span class="line">数据类型定义：指定模块内用到的数据对象为寄存器型、存储器型还是连续型</span><br><span class="line">连续赋值语句（<span class="keyword">assign</span>）</span><br><span class="line">过程块（<span class="keyword">initial</span>和<span class="keyword">always</span>）</span><br><span class="line">-行为描述语句</span><br><span class="line">底层模块实例</span><br><span class="line">任务和函数</span><br><span class="line">延时说明块：对模块各个输入和输出端口之间的路径延时进行说明</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></li><li><p>模块的描述方式</p><ol><li>模块的描述方式又称建模方式。verilog既是一门行为化又是一门结构化的HDL语言，根据设计的需要，每个模块的内部可以分为四种抽象级别来进行描述。模块在外部环境中的表现都是同等的，而与其内部具体描述的抽象级别无关。因此模块的内部具体描述相对于外部环境来说是隐藏的，该表一个模块内部描述的抽象级别，可以不用对其外部环境做任何的改动。</li><li>模块的4类抽象级别的描述<ol><li>行为级建模：这是Verilog最高抽象级别的描述方式。一个模块可以按照要求的设计算法来实现，而不用关心具体硬件实现的细节。行为描述通过行为语句来实现，行为功能可使用下述过程语句结构描述<ul><li>initial语句，此语句只执行一次</li><li>always语句，此语句循环执行</li></ul></li><li>数据流描述方式（数据流级建模）<ol><li>数据流描述方式也称RTL（寄存器传输级）描述方式。在这种描述方式下，设计者需要知道数据是如何在寄存器之间传输的以及将被如何处理。数据流描述防护四类似于布尔方程，它能够比较直观地表达底层逻辑行为。在Verilog中数据流描述方式主要用来描述组合逻辑，具体由连续赋值语句“assign”来实现。</li></ol></li><li>门级描述方式<ol><li>在这种描述方式下，模块是按照逻辑门和他们之间的互连线来实现的，在这种抽象级别下的设计与按照门级逻辑图来描述一个设计类似。门级描述就是指调用Verilog内建的基本门级元件来对硬件电路进行结构设计。这些基本的门级元件是一类特殊的模块，共有14种，分成4类，他们分别由Verilog语言自身提供。</li></ol></li><li>开关级描述方式<ol><li>开关级描述方式也称晶体管级描述方式，是Verilog最低级别的描述方式。在这种描述方式下，模块是按照开关级元件和存储节点以及它们之间的互连来实现的。具体来说是指调用Verilog内建的基本开关级原价来对硬件电路进行结构设计。与门级元件类似，这些基本的开关级元件也是一类特殊的模块，共有12种，由Verilog语言自身提供</li></ol></li></ol></li></ol></li><li>模块调用<figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;模块名&gt; &lt;参数值列表&gt; &lt;实例名&gt; (&lt;端口连接表&gt;)；</span><br></pre></td></tr></table></figure></li></ol><h2 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h2><ol><li>注释：<code>/*多行注释*/</code>和<code>//单行注释</code></li><li>数值可取下面的4类值：<ol><li>0：逻辑0或者假状态</li><li>1：逻辑1或者真状态</li><li>x(X)：未知状态</li><li>z(Z)：高阻状态</li></ol></li><li>整数型常量<ol><li>简单的十进制格式。由0~9的数字串组成的十进制数，可以在数值前面加上符号“+”或“-”来表示数的正负</li><li>指定位宽的基数格式，由三部分组成：<size>&lt;’base_format&gt;<number><ol><li>size指定数的二进制位宽，是一个非零的无符号十进制常量，size若省略默认32位</li><li>‘base_format:单引号’是指定位宽格式表示法的固有字符，不能省略。base_format指定数的基数格式，用一个字母表示，对大小写不敏感。在base_format之前，单引号之后可以加上字母s(S)表示该数为有符号数。合法的技术格式字符串字母有d(D)-十进制；h(H)-十六进制；o(O)-八进制；b(B)-二进制。number是一个无符号的数，由相应基数格式的数字串组成。十六进制数字a~f对大小写也是不敏感的。可以在size之前加上“+”或“-”表示数的正或负，但是不能再base_format和number之间加“+”或“-”，因为这违背了Verilog的语法规则</li></ol></number></size></li><li>下划线符号“_”除了不能放在数值的首位外，可以放在整数型和实数型内任何地方。它们对数值没有任何影响，在编译时会被忽略，只是为了将长的数值分段，提高可读性</li><li>数值常量中的？表示高阻状态</li></ol></li><li>实数型常量<ol><li>实数型常量可以通过对小数的四舍五入，转换为最靠近的整数型常量，而不是直接将小数舍弃，从而得到整数。当一个实数常量被赋给一个整数变量时，一种隐式的转换就发生了。例如实数-1.5转换为整数-2，实数35.2转换为整数得到35</li><li>实数既可以使用小数也可以使用科学计数法的方式来表达</li></ol></li><li>字符串：用双引号“”括起来的字符序列，必须包含在一行内，不能分成多行书写<ol><li>字符串变量是寄存器类型的变量，该字符串变量的位数要大于等于字符串的最大长度</li><li>存储一个12字符的字符串“Hello world！”需要一个8*12=96位的寄存器变量。<ul><li><code>reg [8*12:1] stringvar;</code></li><li><code>stringvar = &quot;Hello world&quot;;</code></li></ul></li><li>如果声明的字符串变量位数大于字符串实际长度，则在赋值操作后，字符串变量的左端（即高位）补0.如果声明的字符串变量位数小于字符串实际长度，那么字符串的左端被截取，这些高位字符就丢失了</li></ol></li><li>标识符分为简单标识符、转义标识符、生成标识符、关键字<ol><li>简单标识符是由字母、数字、美元符号、下划线构成的任意序列。简单标识符的第一个符号不能是数字或者美元符号$</li><li>关键字都用小写字母定义</li><li>标识符的第一个字符不能够是“$”，因为在Verilog中，“$”专门用来代表系统命令</li><li>Verilog中9个关键字：always,endmodule,reg,and,assign,begin,for,case,or,function,output,parameter,wait,if,else,input,while,end</li></ol></li><li>系统任务和函数<ol><li>为了便于设计者对仿真过程进行控制，以及对仿真结果进行分析，Verilog提供了大量的系统功能调用，大致分为：<ol><li>任务型的功能调用，称为系统任务</li><li>函数型的功能调用，称为系统函数</li></ol></li><li>Verilog的系统任务和系统函数是以字符$开头的标识符，他们的主要区别是<ol><li>系统任务可以没有返回值或者有多个返回值，而系统函数只有一个返回值</li><li>系统任务可以带有延迟，而系统函数不允许延迟，在0时刻执行</li></ol></li><li>用户可以根据需要基于Verilog仿真系统提供的PLI编程接口，编制特殊的系统任务和系统函数，根据系统任务和系统函数实现的功能不同，可将其分成以下几类：<ol><li>标准输出任务<ol><li>$display:将特定信息输出到标准输出设备时，具有自动换行的功能</li><li>$write：不带有行结束符</li><li>$displayb和writeb（输出二进制）</li><li>$displayo和writeo（输出八进制）</li><li>$displayh和writeh（输出十六进制）</li><li>格式说明符：<ol><li>%h或%H：以十六进制数的形式输出</li><li>%d或%D：以十进制数的形式输出</li><li>%o或%O：以八进制的形式输出</li><li>%b或%B：以二进制的形式输出</li><li>%c或%C：以ASCII码字符的形式输出</li><li>%s或%S：以字符串的形式输出</li><li>%v或%V：输出线型数据的驱动强度</li><li>%m或%M：输出模块的名称</li></ol></li></ol></li><li>文件管理任务<ol><li>&lt;file_handle&gt;=$fopen(“&lt;file_name&gt;”);如果文件名&lt;file_name&gt;正确，则返回一个32位的句柄描述符&lt;file_handle&gt;，且其中只有一位为高电平</li><li>Verilog中用来将信息输出到文件的系统任务有$fdisplay,$fwrite,$fmonitor:&lt;task_name&gt;(&lt;file_handles&gt;,&lt;format_specifiers&gt;);其中&lt;task_name&gt;是上述三种系统任务中的一种。&lt;file_handles&gt;是文件句柄描述符，与打开文件所不同的是，可以对句柄进行多位设置。&lt;format_specifiers&gt;用来指定输出格式</li><li>$fclose(&lt;file_handle&gt;);关闭文件</li><li>Verilog中有两个系统任务$readmemb和$readmemh,它们能够把一个数据文件中的数据内容读入到一个指定的存储器中。这两个系统任务的区别在于，前者要求以二进制数据格式存放数据文件，而后者要求以十六进制数据格式存放数据文件。他们具有相同的语法格式：&lt;task_name&gt;(&lt;file_name&gt;,&lt;register_array&gt;,<start>,<end>);其中&lt;task_name&gt;用来指定系统任务，可取上述任务中的一个。&lt;file_name&gt;是读出数据的文件名。&lt;register_array&gt;为要读入数据的存储器。<start>和<end>分别为存储器的起始地址和结束地址。<ul><li>系统任务$readmem中，被读取的数据文件内容只能够包含空白符、注释行、二进制或十六进制的数字，同样也可以存在不定态X、高阻态Z和下划线_。</li><li>数据文件中地址的表示格式为：“@”后面加上十六进制数字。同一个数据文件中可以出现多个地址。当系统任务遇到一个地址时，立刻将该地址后面的数据存放到存储器中相应的地址单元中</li></ul></end></start></end></start></li></ol></li><li>仿真控制任务<ol><li>Verilog中有三种仿真监控任务：$monitor,$monitoron,$monitoroff</li><li>$monitor(&lt;format_specifiers&gt;,signal,signal,…);该任务可用来连续监控指定的信号参数，如果发现其中的任一信号发生变化，则系统按照调用$monitor时规定的格式，在时间歩结束时显示整个信号表。</li><li>$finish和$stop这两个系统任务可以用来结束仿真。$finish用来终止仿真器的运行，结束仿真过程返回到操作系统。$stop暂时挂起仿真器，进入Verilog界面，可以通过输入相应命令使仿真继续进行</li></ol></li><li>时间函数<ol><li>$timeformat(<unit>,<precision>,<suffix>,&lt;min_field_width&gt;)其中<unit>用于指定时间单位，取值范围是0~-15。<precision>指定所要显示时间信息的精度，<suffix>是诸如“ms”，“ns”之类的字符，&lt;min_field_width&gt;说明时间信息的最小字符数</suffix></precision></unit></suffix></precision></unit></li><li><code>$timeformat(-9,2,&quot;ns&quot;,10)</code></li><li>时间显示函数<ol><li>$time，返回64位整数，指定当前的仿真时间</li><li>$stime，返回32位的仿真时间</li><li>$realtime，以实数形式范湖当前的仿真时间</li></ol></li></ol></li><li>其他<ol><li>随机函数<ol><li>$random%<number>,其中<number>用来指定所产生的随机数的范围，即-<number>+1到<number>-1</number></number></number></number></li></ol></li><li>转换函数<ol><li>有时需要将整数转换成实数，或将实数转换成整数，或者用向量形式来表示实数等。Verilog提供了许多转换函数可以方便实现上述功能。</li><li>$rtio：通过截断小数部分，将实数转换成整数</li><li>$itor:将整数转换成实数</li><li>$realtobits:将实数转换成64位的实数向量表示</li><li>$bitstoreal:将位模式转换为实数</li></ol></li></ol></li></ol></li></ol></li><li>相等（==）与全等（===）运算符<ol><li>相等运算中，如果任何一个操作数中存在不定态或者高阻态，将得到一个不定态的结果；而在全等运算中，则是将不定态和高阻态看作是逻辑状态的一种，同样参与比较，当这两个操作数的相应位都是X或者Z时，认为全等关系成立，否则运算结果为0。所以，全等是比较是否完全匹配，只有0和1两个状态，相等则会出现不定态。</li></ol></li><li>缩位运算符&amp;，~&amp;，|，~|，^,~^<ol><li>缩位运算符是对单个操作数进行与或非等操作，与逻辑运算符的区别是最终结果和操作的位数无关，一定是1位的逻辑值。如果a为[3:0]，&amp;a等效于a[0]&amp;a[1]&amp;a[2]&amp;a[3],~|a等效于~(a[0]|a[1]|a[2]|a[3])</li></ol></li><li>Verilog中的数据类型是指在硬件数字电路中数据进行存储和传输的方式。按照物理数据类型分类，Verilog中变量分为<strong>线型</strong>和<strong>寄存器</strong>型两种，两者在驱动方式、保持方式和对应的硬件实现都不同。这两种变量在定义时要设置位宽，缺省值为1位。变量的每一位可以是0，1，x或者z，其中x代表一个未被预置初始状态的变量，或者是由于两个或更多个驱动装置试图将之设定为不同的值而引起的冲突型变量。z代表高阻状态或悬空状态。<ol><li>参数(parameters)<ol><li>参数是常量的一种，经常用来定义延时、线宽、寄存器位数等物理量，可以增加代码的可读性和可维护性</li><li>参数的定义格式：parameter 参数名1=表达式1，参数名2=表达式2，参数名3=表达式3，……</li><li>对含有参数的模块通常称为参数化模块</li></ol></li><li>线型变量（Nets）<ol><li>线型变量表示硬件电路中元器件之间的物理连接。它的值由驱动元件的值决定，并具有实时更新性</li><li>线型变量不具备电荷保持作用（trireg型除外），因此没有存储数据的能力，其逻辑值由驱动源提供和保持。各种线型变量在没有驱动源的情况下呈现高阻态（trireg保持不定态）</li><li>wire,tri表示标准连线</li><li>wor，trior，多重驱动时，具有线或特性的连线</li><li>wand，triand，多重驱动时，具有线与特性的连线</li><li>tri1，tri0，上拉电阻，下拉电阻</li><li>supply1，supply0，电源线，地线</li><li>trireg，具有点和保持特性的连线</li><li>线型变量主要通过assign语句赋值。对于综合而言，wire型变量的取值可以是0，1，X与Z</li></ol></li><li>寄存器型变量（Register），<strong>寄存器型变量对应的硬件电路并不一定是寄存器</strong><ol><li>寄存器型变量表示一个抽象的数据存储单元，它并不是指寄存器，而是所有具有存储能力的硬件电路的通称，如触发器、锁存器等。此外，寄存器型变量还包括测试文件中的<strong>激励信号</strong>。虽然这些激励信号并不是电路元件，仅是虚拟驱动源，但由于保持数值的特性，任然属于寄存器变量。</li><li>寄存器类型只能在always语句和initial语句中被赋值，并且它的值从一个赋值到另一个赋值被保存下来。寄存器型变量的缺省值是不定态X</li><li>寄存器型变量与线型变量的显著区别是寄存器型数据在接受下一次赋值之前，始终保持原值不变，而线型变量需要有持续的驱动</li><li>reg，表示常用的寄存器型变量</li><li>integer，表示32位带符号整数型变量</li><li>real，便是64位带符号整数型变量</li><li>time，无符号时间变量</li></ol></li><li>存储器（Memories）<ol><li>设计中，经常有存储指令或者存储数据等操作</li><li>存储器定义格式：reg[wordsize-1:0] memory_name[memorysize-1:0]</li><li>存储器可以看成是寄存器组成的数组</li></ol></li></ol></li><li>编译向导<ol><li>类似于C语言中的编译预处理的功能，在编译时首先对这些编译向导进行预处理，然后保持其结果，将其与源代码一起进行编译</li><li>编译向导的标志是在某些标识符前面添加反引号“`”</li><li>`define &lt;宏名&gt; &lt;宏定义的文本内容&gt;。用于文本定义，和C语言#define类似，即在编译时通知编译器，用宏定义中的文本直接替换代码中出现的宏名。宏定义语句可以用于模块的任意位置，通常写在模块的外面，建议使用大写字母表示宏名，便于与变量名相区别。在调用宏定义的时候，也需要撇号作为开头</li><li>`timescale &lt;时间单位&gt;/&lt;时间精度&gt;。时间单位和时间精度都是由整数和计时单位组成的。合法的整数有1，10，100；合法的计时单位为s,ms,us,ns,ps和fs。在仿真时间尺度中，时间单位用来定义模块内部仿真时间和延迟时间的基准单位；时间精度用来声明该模块仿真时间的精确程度。时间精度和时间单位的差别最好不要太大，因为在仿真过程中，仿真时间是以时间精度累计的，两者差异越大，仿真花费的时间就越长。另外，时间精度值至少要和时间单位一样精确，时间精度值不能大于时间单位值。如果一个设计中存在多个timescale，则采用最小的时间单位。如果不指定timescale，则系统默认执行时间单位为1ns，时间精度为1ns的timescale</li><li>`include “文件名”。文件名中可以指定包含文件的路径，既可以是相对路径，也可以是完整的路径名。每条文件包含语句只能够用于一个文件的包含，但是，包含文件允许嵌套，即包含的文件中允许再去包含另外的一个文件</li></ol></li><li><p>Verilog HDL中，所有的描述都是通过下面四种结构中的一种实现的，在一个模块内部可以由任意多个initial语句和always语句，两者都是从仿真的起始时刻开始执行的，但是initial语句后面的块语句只执行一次，而always语句则循环地重复执行后面的块语句，直到仿真结束。task任务和function函数可以在模块内部从一处或多处被调用</p><ol><li><p>initial语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">initial</span><br><span class="line">begin</span><br><span class="line">语句1;</span><br><span class="line">语句2;</span><br><span class="line">语句3;</span><br><span class="line">...</span><br><span class="line">语句n;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li><li><p>always语句,多个敏感信号表达式之间用or或者逗号隔开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">always @ （敏感信号表达式）</span><br><span class="line">begin</span><br><span class="line">......</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li><li><p>task任务</p><ol><li>任务可以在源代码的不同位置执行共同的代码段，这些代码段已经用任务定义编写成任务，因此能够从源代码的不同位置调用任务。</li><li>任务的定义与引用都在一份模块内部完成，任务内部可以包含时序控制，即时延控制，并且任务也能够调用任何任务（包括本身）和函数</li><li>定义任务与调用任务必须在同一个模块内，任务调用语句应该在always块或者task-endtask块中</li><li>定义任务时，没有端口名称表，但要进行端口与数据类型的声明</li><li>调用任务时，与调用模块一样，要列出端口名称表，但是顺序要与定义中的排序完全一致</li><li>任务中可以调用其他的任务或者函数，且调用的个数不受限制</li><li>定义格式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">task &lt;任务名&gt;；</span><br><span class="line">&lt;端口及数据类型定义语句&gt;</span><br><span class="line">&lt;语句1&gt;</span><br><span class="line">&lt;语句2&gt;</span><br><span class="line">...</span><br><span class="line">&lt;语句n&gt;</span><br><span class="line">endtask</span><br></pre></td></tr></table></figure></li></ol></li><li><p>function函数</p><ol><li>函数与task一样，也可以在模块中的不同位置执行同一段代码，不同之处是函数只能返回一个值，它不能包含任何时间控制语句。函数可以调用其他函数，但是不能调用任务。此外，函数必须至少带有一个输入端口，在函数中允许没有输出或输入输出说明</li><li>函数的定义蕴含声明了一个与函数同名的，函数的内部寄存器，并作为函数的返回值传出函数</li><li>定义格式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function &lt;位宽说明&gt; 函数名；</span><br><span class="line">&lt;输入端口和类型说明&gt;</span><br><span class="line">&lt;局部变量说明&gt;</span><br><span class="line">begin</span><br><span class="line">&lt;语句1&gt;</span><br><span class="line">&lt;语句2&gt;</span><br><span class="line">...</span><br><span class="line">&lt;语句n&gt;</span><br><span class="line">end</span><br><span class="line">endfunction</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>赋值语句Assignments，是Verilog中对线型和寄存器型变量赋值的主要方式，根据赋值对象的不同分为连续赋值语句（针对线型变量）和过程赋值语句（针对寄存器型变量）</p><ol><li>线型变量一旦被连续赋值语句赋值后，赋值语句右端表达式中的信号有任何变化，都将实时反映到左端的线型变量中；</li><li>过程赋值语句只有在语句被执行到时，赋值过程才能够进行一次，而且赋值过程的具体执行时间还受到各种因素的影响</li><li>连续赋值语句不能出现在任何一个过程块中；过程赋值语句只能够出现在过程块中</li><li>连续赋值语句以关键词assign为先导。过程赋值语句不需要任何先导的关键词，但是语句的赋值分为阻塞性和非阻塞型</li><li>连续赋值语句<ol><li>assign #[delay] &lt;线型变量&gt;=&lt;表达式&gt;</li></ol></li><li>过程赋值语句<ol><li>&lt;寄存器型变量&gt; = &lt;表达式&gt;，阻塞型过程赋值</li><li>&lt;寄存器型变量&gt; &lt;= &lt;表达式&gt;，非阻塞型过程赋值</li><li>阻塞型赋值语句的执行受到前后顺序的而影响，只有在第一条语句执行完之后才可以执行第二条语句，而在非阻塞型赋值语句中，则是某一规定时刻同时完成，不受先后顺序的影响。从某种角度来说，非阻塞型赋值语句的执行顺序与并行块的执行十分相像。</li><li>总结：阻塞赋值按顺序执行，非阻塞赋值，块结束后并行执行</li></ol></li></ol></li><li>块语句<ol><li>串行块（begin-end）<ol><li>串行块中的每条语句都是依据块中的排列次序顺序执行</li><li>串行块中每条语句的延时都是相对于前一条语句执行结束的相对时间</li><li>串行块的起始执行时间是块中第一条语句开始执行的时间，结束时间是最后一条语句执行结束的时间</li></ol></li><li>并行快（fork-join）<ol><li>并行块中的每条语句都是同时并行执行的，与排列次序无关</li><li>并行块中每条语句的延时都是相对于整个并行块开始执行的绝对时间</li><li>并行块的起始时间是流程控制转入并行块的时间，结束时间是并行块中按执行时间排序，最后执行的那条语句结束的时间</li></ol></li></ol></li><li>case语句<ol><li>case语句要求敏感表达式的值与给定的值1、值2……或值n中的一个全等时，执行后面相应的块语句，如果均不相等，执行default语句</li><li>casez语句认为，如果给定的值中有一位或几位是高阻态z，则认为该位为“真”，敏感表达式与其比较时不予判断，只需比较其他几位</li><li>casex语句扩充为，如果给定的值中有一位或某几位是高阻态或者不定态，同样认为其为“真”，不予判断</li></ol></li><li>Verilog中存在4中类型的循环语句，可以控制语句的执行次数。这四种语句分别是for语句，repeat语句，while语句和forever语句<ol><li>for(循环变量赋初值；循环结束条件；循环变量增值) 块语句；</li><li>repeat(循环次数表达式) 块语句；</li><li>while(循环执行条件表达式) 块语句；</li><li>forever 块语句；多用在initial块中，生成周期性输入波形，通常为不可综合语句</li></ol></li><li>任务与函数的区别<ol><li>函数需要在一个仿真时间单位内完成，而任务定义中可以包含任意类型的定时控制部分及weit语句等</li><li>函数不能调用任务，而任务可以调用任何任务和函数</li><li>函数只允许有输入变量且至少有一个，不能够有输出端口输入输出端口；任务可以没有任何端口，也可以包括各种类型的端口</li><li>函数通过函数名返回一个值；任务则不需要</li></ol></li></ol><h2 id="减小NIOS程序的代码量"><a href="#减小NIOS程序的代码量" class="headerlink" title="减小NIOS程序的代码量"></a>减小NIOS程序的代码量</h2><ol><li>采用alt_main()作为程序入口</li><li>打开编译器优化选项，-O3</li><li>使用小封装的驱动库与C语言库<ol><li>HAL为处理器的外设提供了两种驱动库：一种是执行速度快，但是代码量大的版本；另一种是小封装的版本。默认情况下，HAL系统使用的是代码量大的版本。可以选择Reduced device drivers选项来选择小封装版本，从而减小代码量</li><li>完整的ANSI C标准库通常不适用于嵌入式系统，HAL提供了一系列经过剪裁的新的ANSI C标准库，占用非常小的代码量。可以选择Small C library选项来选择新的ANSI C标准库</li></ol></li><li>去掉不使用的驱动库<ol><li>当用户的程序没有使用到NIOS系统中某些设备时，应该在系统中将这些设备完全移出</li></ol></li></ol><h2 id="流水灯"><a href="#流水灯" class="headerlink" title="流水灯"></a>流水灯</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">module led_module(</span><br><span class="line">input EN,</span><br><span class="line">input CLK,</span><br><span class="line">output [3:0] leds</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">reg clk_hz;</span><br><span class="line">initial clk_hz= 1&apos;b0;//初始化只对仿真有效，综合器会自动无视</span><br><span class="line">reg[31:0]count;</span><br><span class="line">initial count = 32&apos;b0;</span><br><span class="line">reg[3:0] led_reg;</span><br><span class="line">initial led_reg = 4&apos;b1111;</span><br><span class="line">parameter SEC_TIME = 32&apos;d48_000_000;</span><br><span class="line"></span><br><span class="line">always@(posedge CLK)</span><br><span class="line">if(count == SEC_TIME&gt;&gt;1)</span><br><span class="line">begin</span><br><span class="line">count &lt;= 32&apos;b0;</span><br><span class="line">clk_hz = !clk_hz;</span><br><span class="line">end</span><br><span class="line">else</span><br><span class="line">count &lt;= count+1&apos;b1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">always@(posedge clk_hz)</span><br><span class="line">begin</span><br><span class="line">if(led_reg == 4&apos;b1111)</span><br><span class="line">led_reg &lt;= 4&apos;b1110;</span><br><span class="line">else if(led_reg == 4&apos;b1110)</span><br><span class="line">led_reg &lt;= 4&apos;b1101;</span><br><span class="line">else if(led_reg == 4&apos;b1101)</span><br><span class="line">led_reg &lt;= 4&apos;b1011;</span><br><span class="line">else if(led_reg == 4&apos;b1011)</span><br><span class="line">led_reg &lt;= 4&apos;b0111;</span><br><span class="line">else if(led_reg == 4&apos;b0111)</span><br><span class="line">led_reg &lt;= 4&apos;b1110;</span><br><span class="line">else</span><br><span class="line">led_reg &lt;= 4&apos;b1111;</span><br><span class="line">end</span><br><span class="line">assign leds = EN ? led_reg : 4&apos;bzzzz;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h2 id="蜂鸣器"><a href="#蜂鸣器" class="headerlink" title="蜂鸣器"></a>蜂鸣器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">module beep_module(</span><br><span class="line">input EN,</span><br><span class="line">input CLK,</span><br><span class="line">output BP</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">reg clk_hz;</span><br><span class="line">initial clk_hz= 1&apos;b0;//初始化只对仿真有效，综合器会自动无视</span><br><span class="line">reg[31:0]count;</span><br><span class="line">initial count = 32&apos;b0;</span><br><span class="line"></span><br><span class="line">parameter SEC_TIME = 32&apos;d48_000_000;</span><br><span class="line"></span><br><span class="line">always@(posedge CLK)</span><br><span class="line">if(count == SEC_TIME&gt;&gt;1)</span><br><span class="line">begin</span><br><span class="line">count &lt;= 32&apos;b0;</span><br><span class="line">clk_hz = !clk_hz;</span><br><span class="line">end</span><br><span class="line">else</span><br><span class="line">count &lt;= count+1&apos;b1;</span><br><span class="line"></span><br><span class="line">assign BP = EN ? clk_hz : 1&apos;bz;</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h2 id="8位共阳数码管"><a href="#8位共阳数码管" class="headerlink" title="8位共阳数码管"></a>8位共阳数码管</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">//8位共阳数码管</span><br><span class="line">module HEX8(Clk,Rst_n,En,disp_data,sel,seg);</span><br><span class="line"></span><br><span class="line">input Clk;//输入50M外部时钟</span><br><span class="line">input Rst_n;</span><br><span class="line">input En;//使能引脚，低功耗考虑</span><br><span class="line">input [31:0]disp_data;//数码管总共有8位，每位显示0~F(4位表示)</span><br><span class="line"></span><br><span class="line">output [7:0]sel;//数码管位选(选择当前要显示的数码管)</span><br><span class="line">output reg [7:0]seg;//数码管段选(当前要显示的内容)</span><br><span class="line"></span><br><span class="line">reg [14:0]divider_cnt;</span><br><span class="line">localparam DELAY_ONE_MS = 25_000;//500us/20ns=25000</span><br><span class="line"></span><br><span class="line">reg clk_1k;</span><br><span class="line"></span><br><span class="line">reg [7:0]sel_r;</span><br><span class="line"></span><br><span class="line">reg [3:0]data_tmp;</span><br><span class="line"></span><br><span class="line">//分频计数器计数模块</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">divider_cnt &lt;= 15&apos;d0;</span><br><span class="line">else if(En == 1&apos;b0)</span><br><span class="line">divider_cnt &lt;= 15&apos;d0;</span><br><span class="line">else if(divider_cnt == DELAY_ONE_MS -1)</span><br><span class="line">divider_cnt &lt;= 1&apos;d0;</span><br><span class="line">else</span><br><span class="line">divider_cnt &lt;= divider_cnt + 1&apos;b1;</span><br><span class="line"></span><br><span class="line">//1KHz扫描时钟生成模块</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">clk_1k &lt;= 1&apos;b0;</span><br><span class="line">else if(divider_cnt == DELAY_ONE_MS -1)</span><br><span class="line">clk_1k &lt;= ~clk_1k;</span><br><span class="line">else</span><br><span class="line">clk_1k &lt;= clk_1k;</span><br><span class="line"></span><br><span class="line">//8位循环移位寄存器</span><br><span class="line">always@(posedge clk_1k or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">sel_r &lt;= 8&apos;b0000_0001;</span><br><span class="line">else if(sel_r == 8&apos;b1000_0000)</span><br><span class="line">sel_r &lt;= 8&apos;b0000_0001;</span><br><span class="line">else</span><br><span class="line">sel_r &lt;= sel_r &lt;&lt; 1;</span><br><span class="line"></span><br><span class="line">//8选1多路选择器</span><br><span class="line">always@(*)</span><br><span class="line">case(sel_r)</span><br><span class="line"></span><br><span class="line">8&apos;b0000_0001:data_tmp = disp_data[3:0];</span><br><span class="line">8&apos;b0000_0010:data_tmp = disp_data[7:4];</span><br><span class="line">8&apos;b0000_0100:data_tmp = disp_data[11:8];</span><br><span class="line">8&apos;b0000_1000:data_tmp = disp_data[15:12];</span><br><span class="line">8&apos;b0001_0000:data_tmp = disp_data[19:16];</span><br><span class="line">8&apos;b0010_0000:data_tmp = disp_data[23:20];</span><br><span class="line">8&apos;b0100_0000:data_tmp = disp_data[27:24];</span><br><span class="line">8&apos;b1000_0000:data_tmp = disp_data[31:28];</span><br><span class="line">default:data_tmp = 4&apos;b0000;</span><br><span class="line"></span><br><span class="line">endcase</span><br><span class="line"></span><br><span class="line">always@(*)</span><br><span class="line">case(data_tmp)</span><br><span class="line">4&apos;h0:seg = 8&apos;hc0;</span><br><span class="line">4&apos;h1:seg = 8&apos;hf9;</span><br><span class="line">4&apos;h2:seg = 8&apos;ha4;</span><br><span class="line">4&apos;h3:seg = 8&apos;hb0;</span><br><span class="line">4&apos;h4:seg = 8&apos;h99;</span><br><span class="line">4&apos;h5:seg = 8&apos;h92;</span><br><span class="line">4&apos;h6:seg = 8&apos;h82;</span><br><span class="line">4&apos;h7:seg = 8&apos;hf8;</span><br><span class="line">4&apos;h8:seg = 8&apos;h80;</span><br><span class="line">4&apos;h9:seg = 8&apos;h90;</span><br><span class="line">4&apos;ha:seg = 8&apos;h88;</span><br><span class="line">4&apos;hb:seg = 8&apos;h83;</span><br><span class="line">4&apos;hc:seg = 8&apos;hc6;</span><br><span class="line">4&apos;hd:seg = 8&apos;ha1;</span><br><span class="line">4&apos;he:seg = 8&apos;h86;</span><br><span class="line">4&apos;hf:seg = 8&apos;h8e;</span><br><span class="line">endcase</span><br><span class="line"></span><br><span class="line">assign sel = ((En==1&apos;b1) ? sel_r:8&apos;b0000_0000);</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h2 id="按键消抖"><a href="#按键消抖" class="headerlink" title="按键消抖"></a>按键消抖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">module key_filter(Clk,Rst_n,key_in,key_flag,key_status);</span><br><span class="line"></span><br><span class="line">input Clk;</span><br><span class="line">input Rst_n;</span><br><span class="line">input key_in;</span><br><span class="line"></span><br><span class="line">output reg key_flag;//按键按下或者弹起便产生一个脉冲</span><br><span class="line">output reg key_status;//按键当前的状态，0表示按下</span><br><span class="line"></span><br><span class="line">reg [3:0]state;//状态机变量</span><br><span class="line"></span><br><span class="line">localparam</span><br><span class="line">IDEL = 4&apos;b0001,//空闲</span><br><span class="line">FILTER0 = 4&apos;b0010,//按下消抖</span><br><span class="line">DOWN = 4&apos;b0100,//按下且稳定</span><br><span class="line">FILTER1 = 4&apos;b1000;//松开消抖</span><br><span class="line"></span><br><span class="line">reg [19:0]cnt;//用于20ms延迟的计数器</span><br><span class="line">reg en_cnt;//计数器使能信号</span><br><span class="line">reg cnt_full;//计数器满标志信号</span><br><span class="line"></span><br><span class="line">reg key_in_s0,key_in_s1;//同步按键输入(按键输入为异步信号)用的两级寄存器</span><br><span class="line">reg key_tmp0,key_tmp1;//边沿检测用的两级寄存器</span><br><span class="line">wire pedge,nedge;</span><br><span class="line"></span><br><span class="line">//50_000_000-&gt;20ns,20ms/20ns=1_000_000</span><br><span class="line">parameter twenty_ms = 1_000_000;//消抖时间一般为20ms</span><br><span class="line"></span><br><span class="line">//对异步信号进行同步处理</span><br><span class="line">always@ (posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)begin</span><br><span class="line">key_in_s0 &lt;= 1&apos;b0;</span><br><span class="line">key_in_s1 &lt;= 1&apos;b0;</span><br><span class="line">end</span><br><span class="line">else begin</span><br><span class="line">key_in_s0 &lt;= key_in;</span><br><span class="line">key_in_s1 &lt;= key_in_s0;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//按键边沿检测</span><br><span class="line">always@ (posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)begin</span><br><span class="line">key_tmp0 &lt;= 1&apos;b0;</span><br><span class="line">key_tmp1 &lt;= 1&apos;b0;</span><br><span class="line">end</span><br><span class="line">else begin</span><br><span class="line">key_tmp0 &lt;= key_in_s1;//key_in_s1为同步后的按键输入信号</span><br><span class="line">key_tmp1 &lt;= key_tmp0;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">//边沿检测组合逻辑电路</span><br><span class="line">assign nedge = (key_tmp0 == 1&apos;b0 &amp;&amp; key_tmp1 == 1&apos;b1);</span><br><span class="line">assign pedge = (key_tmp0 == 1&apos;b1 &amp;&amp; key_tmp1 == 1&apos;b0);</span><br><span class="line"></span><br><span class="line">//一段式状态机主程序</span><br><span class="line">always@ (posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)begin</span><br><span class="line">en_cnt &lt;= 1&apos;b0;</span><br><span class="line">state &lt;= IDEL;</span><br><span class="line">key_flag &lt;= 1&apos;b0;</span><br><span class="line">key_status &lt;= 1&apos;b1;</span><br><span class="line">end</span><br><span class="line">else begin</span><br><span class="line">case(state)</span><br><span class="line"></span><br><span class="line">IDEL:</span><br><span class="line">begin</span><br><span class="line">key_flag &lt;= 1&apos;b0;</span><br><span class="line">if(nedge)begin</span><br><span class="line">state &lt;= FILTER0;</span><br><span class="line">en_cnt &lt;= 1&apos;b1;</span><br><span class="line">end</span><br><span class="line">else</span><br><span class="line">state &lt;= IDEL;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">FILTER0:</span><br><span class="line">if(cnt_full)begin</span><br><span class="line">en_cnt &lt;= 1&apos;b0;</span><br><span class="line">state &lt;= DOWN;</span><br><span class="line">key_flag &lt;= 1&apos;b1;</span><br><span class="line">key_status &lt;= 1&apos;b0;</span><br><span class="line">end</span><br><span class="line">else if(pedge)begin</span><br><span class="line">en_cnt &lt;= 1&apos;b0;</span><br><span class="line">state &lt;= IDEL;</span><br><span class="line">end</span><br><span class="line">else</span><br><span class="line">state &lt;= FILTER0;</span><br><span class="line"></span><br><span class="line">DOWN:</span><br><span class="line">begin</span><br><span class="line">key_flag &lt;= 1&apos;b0;</span><br><span class="line">if(pedge)begin</span><br><span class="line">state &lt;= FILTER1;</span><br><span class="line">en_cnt &lt;= 1&apos;b1;</span><br><span class="line">end</span><br><span class="line">else</span><br><span class="line">state &lt;= DOWN;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">FILTER1:</span><br><span class="line">if(cnt_full)begin</span><br><span class="line">state &lt;= IDEL;</span><br><span class="line">key_flag &lt;= 1&apos;b1;</span><br><span class="line">key_status &lt;= 1&apos;b1;</span><br><span class="line">end</span><br><span class="line">else if(nedge)begin</span><br><span class="line">en_cnt &lt;= 1&apos;b0;</span><br><span class="line">state &lt;= DOWN;</span><br><span class="line">end</span><br><span class="line">else</span><br><span class="line">state &lt;= FILTER1;</span><br><span class="line"></span><br><span class="line">default:</span><br><span class="line">begin</span><br><span class="line">state &lt;= IDEL;</span><br><span class="line">en_cnt &lt;= 1&apos;b0;</span><br><span class="line">key_flag &lt;= 1&apos;b0;</span><br><span class="line">key_status &lt;= 1&apos;b1;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">endcase</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">//计数器</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">cnt &lt;= 20&apos;d0;</span><br><span class="line">else if(en_cnt)</span><br><span class="line">cnt &lt;= cnt +1&apos;b1;</span><br><span class="line">else </span><br><span class="line">cnt &lt;= 20&apos;d0;</span><br><span class="line"></span><br><span class="line">//判断是否计数满20ms</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">cnt_full &lt;= 1&apos;b0;</span><br><span class="line">else if(cnt == twenty_ms-1)</span><br><span class="line">cnt_full &lt;= 1&apos;b1;</span><br><span class="line">else </span><br><span class="line">cnt_full &lt;= 1&apos;b0;</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h2 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h2><ol><li>起始位：低电平，停止位：高电平</li><li><p>串口发送模块包含两个主要组件：</p><ol><li>发送波特率生成模块</li><li>数据发送模块<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">//串口发送模块</span><br><span class="line">module uart_byte_tx(</span><br><span class="line">Clk,</span><br><span class="line">Rst_n,</span><br><span class="line">data_byte,</span><br><span class="line">send_en,</span><br><span class="line">baud_set,</span><br><span class="line">Rs232_Tx,</span><br><span class="line">Tx_Done,</span><br><span class="line">uart_state</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">input Clk;</span><br><span class="line">input Rst_n;</span><br><span class="line">input [7:0]data_byte;</span><br><span class="line">input send_en;</span><br><span class="line">input [2:0]baud_set;</span><br><span class="line"></span><br><span class="line">output reg Rs232_Tx;</span><br><span class="line">output reg Tx_Done;</span><br><span class="line">output reg uart_state;</span><br><span class="line"></span><br><span class="line">reg bps_clk;//波特率时钟</span><br><span class="line"></span><br><span class="line">reg [15:0]bps_DR;//分频计数最大值</span><br><span class="line"></span><br><span class="line">reg [15:0]div_cnt;//分频计数器</span><br><span class="line"></span><br><span class="line">reg [3:0]bps_cnt;//波特率计数时钟</span><br><span class="line"></span><br><span class="line">reg [7:0]r_data_byte;</span><br><span class="line"></span><br><span class="line">localparam </span><br><span class="line">START_BIT = 1&apos;b0,</span><br><span class="line">STOP_BIT = 1&apos;b1;</span><br><span class="line"></span><br><span class="line">//外部数据寄存，保持数据稳定</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">r_data_byte = 8&apos;d0;</span><br><span class="line">else if(send_en)</span><br><span class="line">r_data_byte &lt;= data_byte;</span><br><span class="line">else</span><br><span class="line">r_data_byte &lt;= r_data_byte;</span><br><span class="line"></span><br><span class="line">//uart_state</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">uart_state &lt;= 1&apos;b0;</span><br><span class="line">else if(send_en)</span><br><span class="line">uart_state &lt;= 1&apos;b1;</span><br><span class="line">else if(bps_cnt == 4&apos;d11)</span><br><span class="line">uart_state &lt;= 1&apos;b0;</span><br><span class="line">else </span><br><span class="line">uart_state &lt;= uart_state;</span><br><span class="line"></span><br><span class="line">//波特率分频系数查找表</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">bps_DR &lt;= 16&apos;d5207;</span><br><span class="line">else begin</span><br><span class="line">case(baud_set)</span><br><span class="line">3&apos;d0:bps_DR &lt;= 16&apos;d5207;//9600Hz</span><br><span class="line">3&apos;d1:bps_DR &lt;= 16&apos;d2603;//19200Hz</span><br><span class="line">3&apos;d2:bps_DR &lt;= 16&apos;d1301;//38400Hz</span><br><span class="line">3&apos;d3:bps_DR &lt;= 16&apos;d867;//57600Hz</span><br><span class="line">3&apos;d4:bps_DR &lt;= 16&apos;d433;//115200Hz</span><br><span class="line">default:bps_DR &lt;= 16&apos;d433;//115200Hz</span><br><span class="line">endcase</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">//波特率计数器</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">div_cnt &lt;= 16&apos;d0;</span><br><span class="line">else if(uart_state)begin</span><br><span class="line">if(div_cnt == bps_DR)</span><br><span class="line">div_cnt &lt;= 16&apos;d0;</span><br><span class="line">else</span><br><span class="line">div_cnt &lt;= div_cnt + 1&apos;b1;</span><br><span class="line">end</span><br><span class="line">else</span><br><span class="line">div_cnt &lt;= 16&apos;d0;</span><br><span class="line"></span><br><span class="line">//产生波特率时钟</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">bps_clk &lt;= 1&apos;b0;</span><br><span class="line">else if(div_cnt == 16&apos;d1)</span><br><span class="line">bps_clk &lt;= 1&apos;b1;</span><br><span class="line">else </span><br><span class="line">bps_clk &lt;= 1&apos;b0;</span><br><span class="line"></span><br><span class="line">//bps counter</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">bps_cnt &lt;= 4&apos;d0;</span><br><span class="line">else if(bps_cnt == 4&apos;d11)</span><br><span class="line">bps_cnt &lt;= 4&apos;d0;</span><br><span class="line">else if(bps_clk)</span><br><span class="line">bps_cnt &lt;= bps_cnt + 1&apos;b1;</span><br><span class="line">else </span><br><span class="line">bps_cnt &lt;= bps_cnt;</span><br><span class="line"></span><br><span class="line">//Tx_Done</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">Tx_Done &lt;= 1&apos;b0;</span><br><span class="line">else if(bps_cnt == 4&apos;d11)</span><br><span class="line">Tx_Done &lt;= 1&apos;b1;</span><br><span class="line">else </span><br><span class="line">Tx_Done &lt;= 1&apos;b0;</span><br><span class="line"></span><br><span class="line">//串口发送逻辑</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">Rs232_Tx &lt;= 1&apos;b1;</span><br><span class="line">else begin</span><br><span class="line">case(bps_cnt)</span><br><span class="line">4&apos;d0:Rs232_Tx &lt;= 1&apos;b1;</span><br><span class="line">4&apos;d1:Rs232_Tx &lt;= START_BIT;</span><br><span class="line">4&apos;d2:Rs232_Tx &lt;= r_data_byte[0];</span><br><span class="line">4&apos;d3:Rs232_Tx &lt;= r_data_byte[1];</span><br><span class="line">4&apos;d4:Rs232_Tx &lt;= r_data_byte[2];</span><br><span class="line">4&apos;d5:Rs232_Tx &lt;= r_data_byte[3];</span><br><span class="line">4&apos;d6:Rs232_Tx &lt;= r_data_byte[4];</span><br><span class="line">4&apos;d7:Rs232_Tx &lt;= r_data_byte[5];</span><br><span class="line">4&apos;d8:Rs232_Tx &lt;= r_data_byte[6];</span><br><span class="line">4&apos;d9:Rs232_Tx &lt;= r_data_byte[7];</span><br><span class="line">4&apos;d10:Rs232_Tx &lt;= STOP_BIT;</span><br><span class="line">default:Rs232_Tx &lt;= 1&apos;b1;</span><br><span class="line">endcase</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li></ol></li><li><p>串口接收模块</p><ol><li>对于接收数据中的每一位进行采样，一般情况下每一位数据的中间点是最稳定的，因此在一般应用中，采集中间时刻的数据即可，但是在工业应用中，往往有非常强的电磁干扰，只采样一次就作为该数据的电平判定，是不保险的，有可能恰好采集到被干扰的信号而导致结果出错，因此需要使用多次采样求概率的方式进行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line">//串口接收模块,采用过采样的方案，将有效时间分成5-6-5三段，检查中间6端的数据，有效降低工业环境的干扰</span><br><span class="line">module uart_byte_rx(</span><br><span class="line">Clk,</span><br><span class="line">Rst_n,</span><br><span class="line">baud_set,</span><br><span class="line">Rs232_Rx,</span><br><span class="line"></span><br><span class="line">data_byte,</span><br><span class="line">Rx_Done</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">input Clk;</span><br><span class="line">input Rst_n;</span><br><span class="line">input [2:0]baud_set;</span><br><span class="line">input Rs232_Rx;//Rx输入引脚</span><br><span class="line"></span><br><span class="line">output reg[7:0]data_byte;//接收到的数据</span><br><span class="line">output reg Rx_Done;//接收完毕信号</span><br><span class="line"></span><br><span class="line">reg s0_Rs232_Rx,s1_Rs232_Rx;//同步寄存器，消除亚稳态</span><br><span class="line">reg tmp0_Rs232_Rx,tmp1_Rs232_Rx;//数据寄存器,用于边沿检测</span><br><span class="line"></span><br><span class="line">wire nedge;//下降沿标志</span><br><span class="line"></span><br><span class="line">reg [15:0]bps_DR;//分频计数最大值</span><br><span class="line">reg [15:0]div_cnt;//分频计数器</span><br><span class="line">reg uart_state;</span><br><span class="line">reg bps_clk;//波特率时钟</span><br><span class="line">reg [7:0]bps_cnt;//波特率计数时钟</span><br><span class="line"></span><br><span class="line">reg [2:0]r_data_byte [7:0];</span><br><span class="line">reg [2:0]START_BIT,STOP_BIT;</span><br><span class="line"></span><br><span class="line">//同步寄存器，消除亚稳态,s1_Rs232_Rx为最终稳定的输入数据</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)begin</span><br><span class="line">s0_Rs232_Rx &lt;= 1&apos;b0;</span><br><span class="line">s1_Rs232_Rx &lt;= 1&apos;b0;</span><br><span class="line">end</span><br><span class="line">else begin</span><br><span class="line">s0_Rs232_Rx &lt;= Rs232_Rx;</span><br><span class="line">s1_Rs232_Rx &lt;= s0_Rs232_Rx;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">//数据寄存器</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)begin</span><br><span class="line">tmp0_Rs232_Rx &lt;= 1&apos;b0;</span><br><span class="line">tmp1_Rs232_Rx &lt;= 1&apos;b0;</span><br><span class="line">end</span><br><span class="line">else begin</span><br><span class="line">tmp0_Rs232_Rx &lt;= s1_Rs232_Rx;</span><br><span class="line">tmp1_Rs232_Rx &lt;= tmp0_Rs232_Rx;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">assign nedge = (tmp0_Rs232_Rx==1&apos;b0 &amp;&amp; tmp1_Rs232_Rx==1&apos;b1);</span><br><span class="line"></span><br><span class="line">//波特率分频系数查找表</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">bps_DR &lt;= 16&apos;d324;</span><br><span class="line">else begin</span><br><span class="line">case(baud_set)</span><br><span class="line">3&apos;d0:bps_DR &lt;= 16&apos;d324;//9600Hz,50000000/9600/16=325</span><br><span class="line">3&apos;d1:bps_DR &lt;= 16&apos;d162;//19200Hz</span><br><span class="line">3&apos;d2:bps_DR &lt;= 16&apos;d80;//38400Hz</span><br><span class="line">3&apos;d3:bps_DR &lt;= 16&apos;d53;//57600Hz</span><br><span class="line">3&apos;d4:bps_DR &lt;= 16&apos;d26;//115200Hz</span><br><span class="line">default:bps_DR &lt;= 16&apos;d26;//115200Hz</span><br><span class="line">endcase</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">//波特率计数器</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">div_cnt &lt;= 16&apos;d0;</span><br><span class="line">else if(uart_state)begin//检测到有效信号才开始计数，随之产生波特率</span><br><span class="line">if(div_cnt == bps_DR)</span><br><span class="line">div_cnt &lt;= 16&apos;d0;</span><br><span class="line">else</span><br><span class="line">div_cnt &lt;= div_cnt + 1&apos;b1;</span><br><span class="line">end</span><br><span class="line">else</span><br><span class="line">div_cnt &lt;= 16&apos;d0;</span><br><span class="line"></span><br><span class="line">//产生波特率时钟</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">bps_clk &lt;= 1&apos;b0;</span><br><span class="line">else if(div_cnt == 16&apos;d1)</span><br><span class="line">bps_clk &lt;= 1&apos;b1;</span><br><span class="line">else </span><br><span class="line">bps_clk &lt;= 1&apos;b0;</span><br><span class="line"></span><br><span class="line">//bps counter,159=16*10-1</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">bps_cnt &lt;= 8&apos;d0;</span><br><span class="line">else if(bps_cnt == 8&apos;d159 | (bps_cnt == 8&apos;d12 &amp;&amp; (START_BIT &gt; 2)))</span><br><span class="line">bps_cnt &lt;= 8&apos;d0;</span><br><span class="line">else if(bps_clk)</span><br><span class="line">bps_cnt &lt;= bps_cnt + 1&apos;b1;</span><br><span class="line">else </span><br><span class="line">bps_cnt &lt;= bps_cnt;</span><br><span class="line"></span><br><span class="line">//Rx_Done</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">Rx_Done &lt;= 1&apos;b0;</span><br><span class="line">else if(bps_cnt == 8&apos;d159)</span><br><span class="line">Rx_Done &lt;= 1&apos;b1;</span><br><span class="line">else </span><br><span class="line">Rx_Done &lt;= 1&apos;b0;</span><br><span class="line"></span><br><span class="line">//data_byte</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">data_byte &lt;= 8&apos;d0;</span><br><span class="line">else if(bps_cnt == 8&apos;d159)begin</span><br><span class="line">data_byte[0] &lt;= r_data_byte[0][2];//100开始表示收到1的概率大，数据判定为1</span><br><span class="line">data_byte[1] &lt;= r_data_byte[1][2];</span><br><span class="line">data_byte[2] &lt;= r_data_byte[2][2];</span><br><span class="line">data_byte[3] &lt;= r_data_byte[3][2];</span><br><span class="line">data_byte[4] &lt;= r_data_byte[4][2];</span><br><span class="line">data_byte[5] &lt;= r_data_byte[5][2];</span><br><span class="line">data_byte[6] &lt;= r_data_byte[6][2];</span><br><span class="line">data_byte[7] &lt;= r_data_byte[7][2];</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">//串口接收逻辑</span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0) begin</span><br><span class="line">START_BIT &lt;= 3&apos;d0;</span><br><span class="line">r_data_byte[0]&lt;= 3&apos;d0;</span><br><span class="line">r_data_byte[1]&lt;= 3&apos;d0;</span><br><span class="line">r_data_byte[2]&lt;= 3&apos;d0;</span><br><span class="line">r_data_byte[3]&lt;= 3&apos;d0;</span><br><span class="line">r_data_byte[4]&lt;= 3&apos;d0;</span><br><span class="line">r_data_byte[5]&lt;= 3&apos;d0;</span><br><span class="line">r_data_byte[6]&lt;= 3&apos;d0;</span><br><span class="line">r_data_byte[7]&lt;= 3&apos;d0;</span><br><span class="line">STOP_BIT &lt;= 3&apos;d0;</span><br><span class="line">end</span><br><span class="line">else if(bps_clk)begin</span><br><span class="line">case(bps_cnt)</span><br><span class="line">0:begin</span><br><span class="line">START_BIT &lt;= 3&apos;d0;</span><br><span class="line">r_data_byte[0]&lt;= 3&apos;d0;</span><br><span class="line">r_data_byte[1]&lt;= 3&apos;d0;</span><br><span class="line">r_data_byte[2]&lt;= 3&apos;d0;</span><br><span class="line">r_data_byte[3]&lt;= 3&apos;d0;</span><br><span class="line">r_data_byte[4]&lt;= 3&apos;d0;</span><br><span class="line">r_data_byte[5]&lt;= 3&apos;d0;</span><br><span class="line">r_data_byte[6]&lt;= 3&apos;d0;</span><br><span class="line">r_data_byte[7]&lt;= 3&apos;d0;</span><br><span class="line">STOP_BIT &lt;= 3&apos;d0;</span><br><span class="line">end</span><br><span class="line">6,7,8,9,10,11:START_BIT &lt;= START_BIT + s1_Rs232_Rx;</span><br><span class="line">22,23,24,25,26,27:r_data_byte[0] &lt;= r_data_byte[0] + s1_Rs232_Rx;</span><br><span class="line">38,39,40,41,42,43:r_data_byte[1] &lt;= r_data_byte[1] + s1_Rs232_Rx;</span><br><span class="line">54,55,56,57,58,59:r_data_byte[2] &lt;= r_data_byte[2] + s1_Rs232_Rx;</span><br><span class="line">70,71,72,73,74,75:r_data_byte[3] &lt;= r_data_byte[3] + s1_Rs232_Rx;</span><br><span class="line">86,87,88,89,90,91:r_data_byte[4] &lt;= r_data_byte[4] + s1_Rs232_Rx;</span><br><span class="line">102,103,104,105,106,107:r_data_byte[5] &lt;= r_data_byte[5] + s1_Rs232_Rx;</span><br><span class="line">118,119,120,121,122,123:r_data_byte[6] &lt;= r_data_byte[6] + s1_Rs232_Rx;</span><br><span class="line">134,135,136,137,138,139:r_data_byte[7] &lt;= r_data_byte[7] + s1_Rs232_Rx;</span><br><span class="line">150,151,152,153,154,155:STOP_BIT &lt;= STOP_BIT + s1_Rs232_Rx;</span><br><span class="line">default:</span><br><span class="line">begin</span><br><span class="line">START_BIT = START_BIT;</span><br><span class="line">r_data_byte[0] &lt;= r_data_byte[0];</span><br><span class="line">r_data_byte[1] &lt;= r_data_byte[1];</span><br><span class="line">r_data_byte[2] &lt;= r_data_byte[2];</span><br><span class="line">r_data_byte[3] &lt;= r_data_byte[3];</span><br><span class="line">r_data_byte[4] &lt;= r_data_byte[4];</span><br><span class="line">r_data_byte[5] &lt;= r_data_byte[5];</span><br><span class="line">r_data_byte[6] &lt;= r_data_byte[6];</span><br><span class="line">r_data_byte[7] &lt;= r_data_byte[7];</span><br><span class="line">STOP_BIT = STOP_BIT;</span><br><span class="line">end</span><br><span class="line">endcase</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">always@(posedge Clk or negedge Rst_n)</span><br><span class="line">if(Rst_n == 1&apos;b0)</span><br><span class="line">uart_state &lt;= 1&apos;b0;</span><br><span class="line">else if(nedge)</span><br><span class="line">uart_state &lt;= 1&apos;b1;</span><br><span class="line">else if(Rx_Done || (bps_cnt == 8&apos;d12 &amp;&amp; (START_BIT &gt; 2)))//接收结束或者接收到错误的开始位</span><br><span class="line">uart_state &lt;= 1&apos;b0;</span><br><span class="line">else</span><br><span class="line">uart_state &lt;= uart_state;</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="VGA"><a href="#VGA" class="headerlink" title="VGA"></a>VGA</h2><ol><li>VGA全称Video Graphic Array，也叫显示绘图阵列，是逐行扫描的显示制式，其支持的分辨率为640X480，对更高分辨率800X600称为SVGA模式；1024X768称为XVGA</li><li>VGA时序分行时序和帧时序，两者都包含同步脉冲（Sync a），显示后延（Back porch b），显示时序段（Display interval c）和显示前沿（Front porch d）四个部分<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/xTENNYJ.png" alt="VGA时序" title="">                </div>                <div class="image-caption">VGA时序</div>            </figure></li><li>各种分辨率的行场同步时序如图<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/VTCZg6j.png" alt="VGA参考时序数据表" title="">                </div>                <div class="image-caption">VGA参考时序数据表</div>            </figure></li></ol><h2 id="基于NIOS-II的SOPC技术"><a href="#基于NIOS-II的SOPC技术" class="headerlink" title="基于NIOS II的SOPC技术"></a>基于NIOS II的SOPC技术</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/6h2MCPM.png" alt="Nios II处理器" title="">                </div>                <div class="image-caption">Nios II处理器</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/KMXyhNc.png" alt="典型系统架构" title="">                </div>                <div class="image-caption">典型系统架构</div>            </figure><ol><li>可二次开发的32位RISC软核处理器，基于哈佛结构，免版税</li><li>32个通用寄存器，3种指令格式，32位指令，32位数据总线，平面寄存器文件，高速缓冲Cache(指令缓存和数据缓存分开)，分支预测，紧耦合型存储器选项，32级中断支持</li><li>凡是需要存储程序代码的外设都需要连接到nios的指令总线上</li></ol><h2 id="经验之谈"><a href="#经验之谈" class="headerlink" title="经验之谈"></a>经验之谈</h2><ol><li>异步信号的同步处理<ol><li>对于异步信号输入，为了避免时钟沿采到的数据处于亚稳态引起电路振荡，一般在异步信号输入后面加入两级D触发器</li></ol></li><li>分频后的时钟信号不能直接去驱动D触发器</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;verilog与数字电路基础&quot;&gt;&lt;a href=&quot;#verilog与数字电路基础&quot; class=&quot;headerlink&quot; title=&quot;verilog与数字电路基础&quot;&gt;&lt;/a&gt;verilog与数字电路基础&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;数字电路的五基元电路：反相器、与
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="Verilog" scheme="https://suda-morris.github.io/tags/Verilog/"/>
    
  </entry>
  
  <entry>
    <title>Linux Basic</title>
    <link href="https://suda-morris.github.io/2015/11/12/linux-basic/"/>
    <id>https://suda-morris.github.io/2015/11/12/linux-basic/</id>
    <published>2015-11-12T07:40:17.000Z</published>
    <updated>2019-01-03T08:28:28.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux内核组成部分"><a href="#Linux内核组成部分" class="headerlink" title="Linux内核组成部分"></a>Linux内核组成部分</h2><ol><li>内存管理<ol><li>进程管理负责控制进程对CPU的访问，如任务的创建、调度和终止等。任务调度是进程管理最核心的工作，由Linux内核调度器来完成。Linux内核调度器根据一定算法来选择最值得运行的进程</li><li>运行态：已经获得了资源，并且进程正在被CPU执行进程既可以运行在内核态，也可运行在用户态<ol><li>内核态：内核和驱动所运行时的状态，程序处于特权阶级，能够访问系统的任何资源</li><li>用户态：用户程序运行的状态，处于非特权阶级，不能随意访问系统资源，必须通过驱动程序方可访问，用户态程序运行的状态，处于非特权阶级，不能随意访问系统资源，必须通过驱动程序方可访问，用户态程序可通过系统调用进入内核态。</li></ol></li><li>就绪态：当系统资源已经可用，但由于前一个进程还没有执行完而释放CPU，准备进入运行状态</li><li>可中断睡眠状态：当进程处于可中断等待状态时，系统不会调度改程序执行。当系统产生一个中断或者释放了进程正在等待的资源，或者进程收到一个信号，都可以被唤醒进入就绪状态或者运行态</li><li>不可中断睡眠状态：处于中断等待状态，但是该进程只能被使用wake_up（）函数明确唤醒的时候才可进入就绪状态。</li><li>暂停状态：当进程收到SIGSTOP、SIGSTP、SIGTTIN或者SIGTTOU就会进入暂停状态，收到SIGCONT信号即可进入运行态</li><li>僵死态：进程已经被停止运行，但是其父进程还没有询问其状态<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/bBBsOdX.png" alt="Linux进程状态和转换" title="">                </div>                <div class="image-caption">Linux进程状态和转换</div>            </figure></li></ol></li><li>内存管理<ul><li>内存管理的主要作用是控制和管理多个进程，使之能够安全的共享主内存区域。当CPU提供内存管理单元MMU时，内存管理为各进程实现虚拟地址到内存物理地址的转换。在32位系统上，Linux内核将4G空间分为1G内核空间（3~4G）和3G（0~3G）用户控件，通过内存管理，每个进程都可以使用3G的用户空间</li></ul></li><li>文件系统<ul><li>Linux内核支持众多的逻辑文件系统，如Ext2、Ext3、Ext4、btrfs、NFS、VFAT等。VFS则是Linux基于各种逻辑文件系统抽象出的一种内存中的文件系统，隐藏了各种硬件设备的细节，为用户提供了同意的操作接口，是用户访问各种不同文件系统和设备时，不用区分具体的逻辑文件系统。</li></ul></li><li>网络接口<ul><li>Linux对网络支持相当完善，网络接口提供了对各种网络标准的存取和各种网络硬件的支持，接口可分为网络协议和网络驱动程序。网络协议部分负责实现每一种可能的网络传输协议。网络设备驱动程序负责与硬件设备通讯，每一种可能的硬件设备都有相应的设备驱动程序</li></ul></li><li>进程间通信<ul><li>支持进程间各种通信机制，如管道、命令管道、信号、消息队列、内存共享、信号量和套接字等。<ol><li>管道通常用于具有亲缘关系的父子进程或者兄弟进程间通信，是半双工的，数据只能往一个方向流动，先入先出，与自来水管很相似。如果双方胡同时，需要建立两个管道</li><li>命名管道突破了进程间的亲缘关系限制，即非父子、兄弟进程之间也可以相互通信</li><li>信号是软件中断，用于在多个进程之间传递一步信号。</li><li>信号能传递的信息很有限，而消息队列正好弥补了这点。 </li><li>共享内存常用于不同进程间进行大量数据传递。Linux下每个进程都有自己的独立空间，各自都不能直接访问其他进程的空间。</li><li>信号量用于进程同步。只有获得了信号量的进程才可以运行，没有获得信号量的进程则只能等待。</li><li>套接字起源于BSD，也常称“BSD套接字”，用于多个进程间通信，可以基于文件，也可以基于网络。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/fk3Ryjy.png" alt="Linux操作系统基本体系结构" title="">                </div>                <div class="image-caption">Linux操作系统基本体系结构</div>            </figure>    </li></ol></li></ul></li></ol><h2 id="设置主板支持虚拟化"><a href="#设置主板支持虚拟化" class="headerlink" title="设置主板支持虚拟化"></a>设置主板支持虚拟化</h2><ol><li>进入BIOS（F2或者F10等等）</li><li>找到Intel Virtualization Technology选项，设置为Enable</li><li>设置好后重启电脑</li></ol><h2 id="虚拟网卡有三种模式"><a href="#虚拟网卡有三种模式" class="headerlink" title="虚拟网卡有三种模式"></a>虚拟网卡有三种模式</h2><ol><li>桥接模式<ol><li>这种情况下，虚拟机虚拟出来的操作系统就像是局域网中的一台独立的主机，它可以访问网内任何一台主机。在桥接模式下，虚拟系统和宿主机的关系就像连接在同一个Hub上的两台电脑。用户需要手工为虚拟系统配置IP地址、子网掩码，而且还要和宿主机器处于同一网段，这样虚拟系统才能和宿主机器进行通信。同时，由于这个虚拟系统是局域网中的而一个独立的主机系统，那么就可以手工配置它的TCP/IP配置信息，以实现通过局域网的网关或罗尤其访问互联网。在进行嵌入式Linux开发，要目标板通过NFS挂载虚拟机的NFS共享目录的话，必须将虚拟王珂配置为桥接模式</li></ol></li><li>NAT模式<ol><li>使用NAT模式，就是让虚拟机系统借助NAT（网络地址转化）功能，通过宿主机器在的网络来访问公网。也就是说，使用NAT模式可以实现在虚拟系统里访问互联网。NAT模式下的虚拟系统的TCP/IP配置信息是由VMnet8（NAT）虚拟网络的DHCP服务器提供的，虚拟机无法正常对主机锁链网络中的其他主机提供普通的而络服务，如TFTP、NFS和FTP等。采用NAT模式最大的优势是虚拟系统接入互联网非常简单，用户不需要进行任何其他的配置，只需要宿主机器能访问互联网即可</li></ol></li><li>Host-Only模式<ol><li>在某些特殊的网络调试环境中，要求将真实环境和虚拟环境隔开，这是用户就可采用仅主机（Host-Only）模式。在Host-Only模式中，所有的虚拟系统是可以相互通信的，但虚拟系统和真实的网络是被隔离开的。</li></ol></li></ol><h2 id="简单的Shell"><a href="#简单的Shell" class="headerlink" title="简单的Shell"></a>简单的Shell</h2><ol><li>cd -:切换至之前的工作目录</li><li>ls -lash:查看当前目录文件信息</li><li>pwd：查看当前路径</li><li>mkdir -p：创建多级目录</li><li>rmdir：删除空目录</li><li>alias rm=”rm -vi”：为rm -vi取别名</li><li>rm -rf:强制删除某些文件或者目录</li><li>touch a：创建a文件，文件大小为0</li><li>file a：读取a文件的文件头并识别文件类型。a文件必须具有可读属性</li><li>more/less：两个命令都能用来浏览文本文件，可以分页查看文件内容，空格翻页。文件浏览完毕，按键盘q退出。相比来说，less命令更加灵活，支持键盘Page Up和Page Down键，可任意向前后翻页浏览，并且还支持文本搜索。使用less打开文件后，输入/abc可在文本中搜索字符串abc</li><li>head/tail：这两个命令可分别查看文件头部和文件尾部，一般用于查看ASCII文件。默认显示10行，加上参数-n【数字】可以指定显示行数或者加上参数-c【数字】指定显示的字节数</li><li>cat：cat命令可以将一个或者多个文件输出到标准输出上，可以用于文件查看</li><li>文件合并：cat [选项] 文件1 文件2 … [&gt;文件3]<ol><li>选项<ul><li>-n ：从1开始对输出进行编号</li><li>-b：类似于-n，从1开始编号，但是忽略空白行</li><li>-s：遇到连续两行或者以上的空白行，就替换为一行空白行</li></ul></li></ol></li><li>文件压缩/解压：tar [选项] 文件<ol><li>tar是UNIX系统的一个文件打包工具，只是连续首位相连的将文件堆放起来，并不具备压缩功能，但是加上选项，tar可以调用其它压缩/解压工具，能够实现文件的压缩和解压</li><li>选项<ul><li>-c：创建存档文件，与-x相斥</li><li>-t：列出档案文件的文件列表</li><li>-x：解包存档文件，与-c相斥</li><li>-A：合并存档文件</li><li>-d：比较存档文件与源文件</li><li>-r：追加文件到存档文件末尾</li><li>-u：更新存档文件</li><li>-f：指定存档文件，与其他选项同时使用时，必须在最后，如tar -xjvf a.tar.bz2</li><li>-v:显示详细处理信息</li><li>-C：转到指定目录，常用于解开存档文件</li><li>-j：调用bzip2程序</li><li>-z：调用gzip程序</li><li>-Z：调用compress程序</li><li>–exclude=PATH：排除指定文件或者目录，常用于打包文件</li></ul></li></ol></li><li>文件复制：cp [选项] 源文件/目录 目的文件/目录<ol><li>选项：<ul><li>-a：保留链接，文件属性并递归复制，等同于-dpR组合，常用于复制目录</li><li>-d：复制时保留链接</li><li>-f：若目标文件已经存在，则直接删除而不提示</li><li>-i：若目标文件已经存在，需要用户确认操作，与-f相反</li><li>-p：除复制文件内容外，把访问权限和修改时间也复制到新文件中</li><li>-f：递归复制，递归复制指定目录下的文件和目录</li><li>-v：显示文件复制过程</li></ul></li></ol></li><li>创建链接：ln [选项] 源文件/目录 目标文件<ol><li>硬链接通过索引节点进行链接，相当于源文件的镜像，占用源文件一样大小的空间，修改其中任何一个，另外一个都会进行同样的改动。给一个文件创建硬链接后，文件属性的硬连接数会增加。硬链接不能跨越文件系统，只能在同一个文件系统内进行链接，且不能对目录文件建立硬链接，给目录文件建立硬链接会出错</li><li>软连接和硬链接不同，软连接是产生一个新文件，这个文件指向另一个文件的位置，类似于Windows下的快捷方式。软连接可以跨越文件系统，且用于任何文件，包括目录文件</li></ol></li><li>网卡配置：ifconfig 网络接口 [选项] 地址/参数<ol><li>选项：<ul><li>-a：查看系统拥有的全部网络接口</li><li>网络接口如eth0：指定操作某个网口</li><li>broadcast：设置网口的广播地址</li><li>netmask：设置网口的子网掩码</li><li>hw ether：设置网卡物理地址（如果驱动不支持则无效）</li><li>up：激活指定网卡</li><li>down：关闭指定网卡</li></ul></li></ol></li><li>安装和卸载文件系统<ol><li>linux允许多个文件系统存在于同一个系统中，也允许用户在系统运行中安装内核所支持的文件系统。例如，讲一个FAT格式的U盘插入到linux系统中。</li><li>linux安装文件系统：mount [参数] [设备名] [挂载点]<ol><li>参数：<ul><li>-a：挂载/etc/fstab文件中列出的所有文件系统</li><li>-r：以只读的方式挂载</li><li>-w：以可写的方式挂载（默认）</li><li>-v：显示详细安装信息</li><li>-t&lt;文件系统类型&gt;：指定文件系统类型，常见的有：<ul><li>ext/ext2/ext3/ext4:Linux常用文件系统</li><li>msdos：MS-DOS的FAT，即FAT16</li><li>vfat：Windows系统的FAT，FAT32</li><li>nfs：网络文件系统</li><li>ntfs：Windows2000/NT/XP的ntfs文件系统</li><li>auto：自动检测文件系统</li></ul></li><li>-o&lt;选项&gt;：指定挂载时的一些选项，常用有：<ul><li>defaults：使用默认值（auto，nouser，rw，suid）</li><li>suid/nosuid：确认/不确认suid和sgid位</li><li>user/nouser：允许/不允许一般用户挂载</li><li>codepage=XXX：指定codepage</li><li>iocharset=XXX：指定字符集</li><li>ro：以只读方式挂载</li><li>rw：以读写方式挂载</li><li>remount：重新安装已经安装了的文件系统</li><li>loop：挂载loopback设备以及ISO文件</li></ul></li></ul></li></ol></li><li>挂载点必须是一个已经存在的目录</li><li>一个挂载点可以被多个设备/文件重复挂载，只是后一次挂载将覆盖前一次内容，卸载后可用</li><li>使用多个-o参数的时候，-o只用一次，参数之间用半角逗号隔开</li><li>例如，挂载FAT格式的U盘：<ol><li>mount -t vfat /dev/sda1 /mnt</li></ol></li><li>nfs挂载，将远程主机主机Linux的某个共享目录挂载到嵌入式系统本地，当成本地设备进行操作：<ol><li>mount -t nfs 192.168.1.138:/home/morris/lpc/mnt -o nolock</li><li>nolock表示禁用文件锁，当连接到一个旧版本的NFS服务器时常加该选项</li></ol></li><li>此外，嵌入式开发中常用的文件系统还有cramfs，jffs2，yaffs2以及ubifs等，特别是用于NOR Flash的jffs2和用于NAND Flash的yaffs/yaffs2,ubifs等，在进行系统操作中通常需要对各设备进行挂载或者卸载，需要在挂载的时候指定正确的文件系统类型。<ul><li>挂载yaffs2分区的命令示例：mount -t yaffs2 /dev/mtdblock2 /mnt</li><li>挂载ubifs分区的命令示例：mount -t ubifs ubi0:rootfs /mnt</li></ul></li><li>文件系统卸载：umount 挂载点</li></ol></li><li>使用sudo命令需要管理员将用户添加到sudoer组中，一般在/etc/sudoer文件中修改</li><li>linux中，对文件的操作都是先保存在缓存中，并没有立即写入磁盘，经系统调度后方可写入磁盘。如果修改了缓存，还没来得及写到磁盘就断电，自然就会造成文件改变丢失。要避免这种情况，就是修改文件后，立即强制进行一次文件同步操作，将缓存的内容写入磁盘，确保文件系统的完整性。能完成这样功能的命令是sync。只需要在关闭文本编辑器后再shell输入sync即可</li><li>文件搜索，find 路径 选项 其他<ol><li>最常用的就是根据文件名来查找，加上-name就可以了，还可以支持通配符，进行模糊搜索。例如：find arch/arm/ -name mux*.c</li></ol></li><li>字符串搜索： grep 选项<ol><li>例如：grep “pcf8563” -R arch/arm</li><li>关键字最好加上双引号，特别是包含空格的关键字。</li><li>-R表示递归查找</li></ol></li><li>执行Shell脚本有多种方式：<ol><li>点+斜线+文件名，这种方式要求文件必须具有可执行权限</li><li>点+空格+文件名，这种方式不要求文件一定具有可执行权限</li><li>sh+空格+文件名，这种方式不要求文件一定具有可执行权限</li><li>source+空格+文件名，这种方式不要求文件一定具有可执行权限</li></ol></li></ol><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><ol><li>Linux Shell终端启动的时候会打开3个标准文件：标准输入（stdin）、标准输出（stdout）和标准错误（stderr）。shell从标准输入（通常是键盘）接收命令，命令执行结果信息打印到标准输出（通常是终端屏幕）上，如有错误信息，则打印到标准错误（通常是终端屏幕）上。</li><li>Shell允许用户对输入输出进行重定向。输出重定向允许将输出信息从标准输出重定向到其他文件上，也可以重定向到某个设备如打印机上。</li><li>重定向在Linux下用“&gt;”和“&gt;&gt;”表示，“&gt;”表示输出到一个新文件中，而“&gt;&gt;”则表示输出到现有文件的末尾。如果文件已经存在，直接操作文件，否则将创建新文件。</li><li>echo命令将内容回显到标准输出上，使用echo命令加上重定向可以创建一个带内容的非空文件。</li><li>回显内容如果不加引号，则用单空格替代多个连续空格，如果加了引号，则原封不动回显</li></ol><h2 id="使用内核模块和驱动"><a href="#使用内核模块和驱动" class="headerlink" title="使用内核模块和驱动"></a>使用内核模块和驱动</h2><ol><li>加载（插入）模块<ol><li>linux能够动态加载和卸载模块。如果某些功能平时用不到，可以不编译进内核，而采取模块方式编译，在需要的时候再插入内核，不再需要的时候卸载。linux中最常见的模块是内核驱动</li><li>insmod [选项] 模块 [符号名称=值]，常用选项<ol><li>-f：强制将模块载入，不检查目前kernel版本与模块编译时的kernel是否一致</li><li>-k：将模块设置为自动卸载</li><li>-p：测试模块是否能正确插入</li><li>-x：不导出模块符号</li><li>-X：导出模块所有外部符号（默认）</li><li>-v：显示执行过程</li></ol></li></ol></li><li>查看系统已经加载的模块：lsmod，其实际上就是列出/proc/modules的内容</li><li>卸载驱动模块：rm [选项] 模块，常用选项<ol><li>-f：强制卸载正在被使用的模块，非常危险。需要内核支持CONFIG_MODULE_FORCE_UNLOAD使能，否则无效</li><li>-w：通常情况下不能卸载正在被使用的模块，加上-w选项，指定模块将会被孤立，直到不再被使用</li><li>-s：将错误信息写入syslog，而不是标准错误</li><li>-v：显示执行过程</li></ol></li><li>自动处理可加载模块：insmod/rmmod分别用于加载和卸载模块，但是每次只能加载/卸载一个模块，如果一个模块依赖于多个模块，则需要进行多次操作，比较繁琐。modprobe命令集加载/卸载功能于一身，并且可以自动解决模块的依赖关系。modprobe [选项] 模块[符号=值]，常用选项：<ol><li>-C&lt;文件&gt;：不使用默认配置文件，使用指定文件作为配置文件</li><li>-i：忽略配置文件中的加载和卸载命令</li><li>-r：卸载指定模块，包括依赖模块</li><li>-f：强制安装</li><li>-l：显示所有匹配模块</li><li>-a：安装所有匹配的模块</li><li>–show-depends：显示模块的依赖关系</li><li>-v：显示执行过程</li><li>-q：不显示任何信息</li><li>-V：显示版本信息</li></ol></li><li>modprob处理模块时忽略模块的路径，这要求系统模块和驱动是按照make modules_install方式安装的，即模块必须放在/lib/modules/$(uname -r)目录下，并且有正确的/lib/modules/$(uname -r)/modules.dep文件，modprobe根据该文件来寻找和解决依赖关系</li><li>如果系统不能自动创建设备节点，加载驱动后，则需要为驱动建立对应的设备节点，否则无法通过驱动来操作设备。mknod 设备名 设备类型 主设备号 次设备号</li></ol><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ol><li>Linux是一个多用户操作系统，每个用户都有自己专有的运行环境，用户所使用的环境由一系列变量所定义，这些变量被称为环境变量，系统环境变量一般都是大写</li><li>常见的环境变量：<ol><li>PATH：决定了Shell将到哪些目录中寻找命令或程序，这个变量是在日常使用中经常需要修改的变量</li><li>TERM：指定系统终端</li><li>SHELL：当前用户shell类型</li><li>HOME：当前用户主目录</li><li>LOGNAME：当前用户的登录名</li><li>USER：当前用户名</li><li>HISTSIZE：历史命令记录数</li><li>HOSTNAME：主机名</li><li>LANGUGE：语言相关的环境变量，多语言可以修改此环境变量</li><li>MAIL：当前用户的邮件存放目录</li><li>PS1：基本提示符，对于root用户是#，对于普通用户是$</li><li>PS2：附属提示符，默认是“&gt;”</li><li>LS_COLORS:ls命令结果颜色显示</li></ol></li><li>在shell下通过$符号来引用环境变量，使用echo可以查看某个具体环境变量的值</li><li>使用env或者printenv命令可以查看系统全部的环境变量设置</li><li>修改系统配置文件以达到修改环境变量的目的<ol><li>修改/etc/profile文件会影响使用本机的全部用户</li><li>修改~/.bashrc则仅仅影响当前用户</li></ol></li></ol><h2 id="Linux目录树标准与文件系统"><a href="#Linux目录树标准与文件系统" class="headerlink" title="Linux目录树标准与文件系统"></a>Linux目录树标准与文件系统</h2><ol><li>文件层次标准（FHS）对Linux根文件系统的基本目录结构做了比较详细的规定<ol><li>bin：基本命令的程序文件，里面不能再包含目录</li><li>boot：Bootloader静态文件</li><li>dev：设备文件</li><li>etc：系统配置文件，配置文件必须是静态文件，不能是二进制文件</li><li>home：存放各用户的个人数据</li><li>lib：基本的共享库和内核模块</li><li>media：可移动介质的挂载点</li><li>mnt：临时的文件系统挂载点</li><li>opt：附件的应用程序软件包</li><li>root：root用户目录</li><li>sbin：基本的系统命令二进制文件</li><li>srv：系统服务的一些数据</li><li>tmp：临时文件</li><li>usr<ol><li>/usr/bin:众多的应用程序</li><li>/usr/sbin:超级用户的一些管理程序</li><li>/usr/doc:linux文档</li><li>/usr/lib:常用的动态链接库和软件包的配置文件</li><li>/usr/man:帮助文档</li><li>/usr/src:源代码</li><li>/usr/local/bin:本地增加的命令</li><li>/usr/local/lib:本地增加的库</li></ol></li><li>var：可变数据</li></ol></li><li>Linux下所有文件的描述结构都是相同的，包含索引节点和数据<ol><li>索引节点：又称I节点，是Linux文件系统用来记录文件信息的一种数据结构，信息包括文件名、文件长度、文件权限、存放位置、所属关系、创建和修改时间。文件系统维护了一个索引节点的数组，每个文件都与索引节点数组中的唯一元素对应，索引节点在数组中的索引号称为索引节点号。每个文件都有一个索引号与之对应，而一个索引节点号可以对应多个文件。</li><li>数据：文件的实际内容，可以是空的，也可以非常大，并且拥有自己的结构</li></ol></li><li>Linux系统中，文件名以点号（.）开始的文件是隐藏文件，用ls命令不加-a将看不到这类文件</li><li>设备文件<ol><li>设备是一种特殊的的文件，除了存放在文件I节点中的信息外，它们不包含任何数据，有效的设备文件与相应的设备对应，通过设备文件，可以操作与之对应的硬件设备</li><li>设备文件包括字符设备和块设备文件。字符设备按照字符操作设备，如键盘、中断等；块设备文件以块为单位操作设备，如磁盘、光盘等。Linux系统的设备文件都放在/dev目录下，用ls -la命令可以查看各设备的属性</li></ol></li><li>Linux支持多种文件系统，且同时存在于一个一个运行的系统中，查看/proc/filesystems文件，可以看到系统支持的全部文件系统</li><li>proc文件系统<ol><li>proc是Linux系统中的一种特殊的文件系统，是内核和内核模块用来向进程发送消息的机制，只存在于内存中，实际上是一个伪文件系统。用户和应用程序可通过/proc获得系统的信息，还可以改变内核的某些参数。</li><li>/proc/cpuinfo：CPU信息</li><li>/proc/meminfo：物理内存，交换空间信息</li><li>/proc/mounts：已加载的文件系统列表</li><li>/proc/devices：可用设备的列表</li><li>/proc/filesystems：被支持的文件系统</li><li>/proc/modules：已加载的模块</li><li>/proc/version：内核版本</li><li>/proc/cmdline：系统启动时输入的内核命令行参数</li></ol></li><li>sysfs文件系统<ol><li>sysfs是Linux2.6引入的新型文件系统是一个基于内存的文件系统，它的作用是将内核的信息以文件的方式提供给用户程序使用。该文件系统的目录层次结构严格按照内核的数据结构组织，除了二进制文件外，sysfs文件内容均以ASCII格式保存，且一个文件只保存一个数据，另外，一个文件不可大于一个内存页（通常为4096字节）</li><li>sysfs提供一种机制，使得可以显式地描述内核对象，对象属性及对象间关系。sysfs有两组接口，一组针对内核，用于将设备映射到文件系统中，另一组针对用户程序，用于读取或操作这些设备<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/yE7Xrtx.png" alt="sysfs内部结构与外部表现" title="">                </div>                <div class="image-caption">sysfs内部结构与外部表现</div>            </figure></li><li>sysfs产生了一个包含所有系统硬件的层次视图，把连接在系统上的设备和总线组织成为一个分级的文件，向用户空间导出内核数据结构和以及它们的属性。sysfs清晰地展示了设备驱动模型中各组件的关系，顶层目录包括block、device、bus、drivers、class、power和firmware等。各目录和所包含的内容如下<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/JjRYVxz.png" alt="sysfs目录结构" title="">                </div>                <div class="image-caption">sysfs目录结构</div>            </figure></li></ol></li></ol><h2 id="vi的使用"><a href="#vi的使用" class="headerlink" title="vi的使用"></a>vi的使用</h2><ol><li>从命令模式进入编辑模式：插入（i或者I），附件（a或者A），打开（o或者O）</li><li>光标移动：命令模式下，h（左），j（下），k（上），l（右）</li><li>快速光标定位：<ol><li>命令G：将光标定位到最后一行</li><li>命令nG：将光标定位到第n行</li><li>命令gg：将光标定位到第1行</li><li>命令ngg：将光标定位到第n行</li><li>命令:n将光标定位到第n行</li></ol></li><li>文本块选定<ol><li>将光标移动到将要选定的文本块开始处，按esc进入命令模式，再按v，进入可视状态，然后移动光标至文本块结尾，被选定的文本块高亮显示。连按两次esc可以取消所选定的文本块</li></ol></li><li>复制和粘贴<ol><li>如果已经选定文本块，按y即可将所选定文本复制到缓冲区，将光标移到将要粘贴的地方，按p，就可完成文本粘贴</li><li>在命令模式下，连按yy，即可复制光标所在的行的内容，连按yny即可复制从光标所在行开始的n行</li></ol></li><li>剪切和删除<ol><li>最后一次剪切和删除的内容都可以被粘贴到其他位置</li><li>x或nx：剪切从光标所在位置开始的一个或者n个字符</li><li>X或nX：剪切光标前的一个或n个字符</li><li>dd：删除光标所在行</li><li>D：删除光标位置开始至行尾</li><li>dw：删除从光标位置至该词末尾的所有字符</li><li>d0：删除从光标位置开始至行首</li><li>dnd：删除光标所在行开始的n行</li><li>dnG：将光标所在行至第n行删除</li></ol></li><li>文本查找<ol><li>在命令模式下，输入“/字符串”即可从光标位置开始向下查找字符串。输入“？字符串”则从光标位置开始向上查找字符串。无论向上还是向下查找，查找下一个，按键盘n键即可</li><li>全局匹配搜索：先将光标移动到字符串abc，然后按下“SHIFT+*”，完成搜索。</li></ol></li><li>文本替换<ol><li>在命令模式下，输入：%s /old/new/gc，能够将文本内全部的字符串old替换为new，为了安全起见，可以在替换命令尾部加上c，这样每次替换前都需要确认一下</li></ol></li><li>撤销和回复<ol><li>在命令模式下输入u，可以撤销所做的更改，回复编辑前的状态，这里的编辑以保存命令为界。不小心多按了u时可以用Ctrl+R来恢复</li></ol></li><li>Vi的配置文件<ol><li>在vi内执行的配置命令的效果是临时IDE，关闭vi，再次打开vi，需要重新配置。vi有自己的配置文件，可以是”/etc/vim/vimrc”或者”~/.vimrc”。两者的区别是前者是全局的，影响登陆本机的全部用户，后者仅仅对当前用户有效</li></ol></li><li>文本对比<ol><li>Vim提供了文本对比工具vimdiff</li><li>用法：vimdiff file1 file2 file3</li><li>vimdiff可以同时进行2个以上文件的对比</li></ol></li></ol><h2 id="如何使全局环境变量生效"><a href="#如何使全局环境变量生效" class="headerlink" title="如何使全局环境变量生效"></a>如何使全局环境变量生效</h2><ol><li>添加在/etc/profile中的全局变量生效的方法：. /etc/profile（点+空格+文件名）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Linux内核组成部分&quot;&gt;&lt;a href=&quot;#Linux内核组成部分&quot; class=&quot;headerlink&quot; title=&quot;Linux内核组成部分&quot;&gt;&lt;/a&gt;Linux内核组成部分&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;内存管理&lt;ol&gt;
&lt;li&gt;进程管理负责控制进程对CPU的
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="ARM" scheme="https://suda-morris.github.io/tags/ARM/"/>
    
  </entry>
  
  <entry>
    <title>Matlab Basic</title>
    <link href="https://suda-morris.github.io/2015/11/11/matlab/"/>
    <id>https://suda-morris.github.io/2015/11/11/matlab/</id>
    <published>2015-11-11T14:45:49.000Z</published>
    <updated>2018-07-05T01:38:09.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="几个常用命令"><a href="#几个常用命令" class="headerlink" title="几个常用命令"></a>几个常用命令</h2><ol><li>help：查看某个命令的帮助文档</li><li>version：获得当前Matlab的版本</li><li>pwd：给出当前的工作目录名</li><li>dir：ls或dir列出当前目录下的所有文件名清单</li><li>cd：改变目录</li><li>what：列出当前工作目录下所有的M文件、MAT文件和MEX文件</li><li>who：列出当前工作空间里的变量名</li><li>clock：时钟设置命令</li><li>data：日期设置命令</li><li>path：显示MATLAB的当前搜索路径</li><li>getenv：getenv（‘matlabpath’）显示当前的MATLAB路径</li><li>diary on，diary off：利用diary可以记录MATLAB窗口中进行的所有操作</li><li>！（escape）：符号！是MATLAB的扩展运算符，通过该符号，用户有权使用DOS或UNIX命令</li><li>demo：该命令引导使用者通过菜单选择为数众多的演示程序</li><li>format：数据显示格式。系统默认的数据显示格式是5位</li><li>clear：清除工作空间中所有的变量</li><li>clear all：从工作空间中清除所有变量和函数</li><li>clf：清除图形窗口内容</li><li>delete&lt;文件名&gt;：从磁盘中删除指定文件</li><li>load name：载入‘name’文件中的所有变量到工作空间</li><li>load name x y：载入‘name’文件中的变量x，y到工作空间</li><li>save name：保存工作空间变量到文件name.mat中</li><li>save name x y：保存工作空间变量x y到文件name.mat中</li><li>pack：整理工作空间内存</li><li>size：显示当前工作空间中变量的尺寸</li><li>length：显示当前工作空间中变量的长度</li><li>disp：显示当前工作空间中的变量</li></ol><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>反除运算符：\:该运算符得到商的倒数，即a\b等于b/a</li><li>不等于：~=</li><li>逻辑与：&amp;</li><li>逻辑或：|</li><li>逻辑非：~</li></ul><h2 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h2><ol><li>区分大小写</li><li>长度不能超过31位</li><li>变量名以字母开头，可以是字母、数字、下划线组成</li></ol><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><blockquote><p>if-else-end语句中的else子句是可选项<br>嵌套：if-elseif-elseif-…-else-end</p></blockquote><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><blockquote><p>for-end<br>while-end；该语句中的循环判断语句为矩阵时，当且仅当所有的矩阵元素非零时，逻辑表达式的值为真<br>break；退出循环体，执行循环后的其他语句</p></blockquote><h2 id="数据输入与输出"><a href="#数据输入与输出" class="headerlink" title="数据输入与输出"></a>数据输入与输出</h2><ol><li>input：通过键盘输入数据</li><li>fprintf：输出格式化信息和数字</li><li>disp：可以在命令窗口输出数字、向量、矩阵或字符串，无需变量名</li><li>sprintf：将输出写入字符串</li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ol><li>MATLAB中，行数组与行向量是同义语，列数组和列向量是同义语</li><li>对于加法和减法，数组运算与线性代数中的向量运算相同。但是符号.*和./分别被称为数组乘法运算符和数组除法运算符，它们不同于矩阵和向量乘除法。</li><li>计算数组长度：length（x）</li><li>删除数组元素：z（3）=[]</li><li>MATLAB里，二维数组变量等同于一个矩阵，每一行的元素以分号结束</li><li>二维数组的整行或整列可以用一个冒号表示。例如：m(1,:)和m(:,3)分别表示m的第一列和第三列</li><li>只有长度相同的向量才能在if语句中进行比较，如果将两个长度不同的向量进行比较，命令窗口会出现出错信息提示。在if语句中比较字符串之前一定要通过增加空格使字符串长度完全相同</li></ol><h2 id="MATLAB特有的数字特性"><a href="#MATLAB特有的数字特性" class="headerlink" title="MATLAB特有的数字特性"></a>MATLAB特有的数字特性</h2><blockquote><p>在MATLAB里，所有的变量均为双精度，整数变量和实数变量之间没有区别，实数变量和复数变量同样也没有区别</p></blockquote><h2 id="初等数学函数"><a href="#初等数学函数" class="headerlink" title="初等数学函数"></a>初等数学函数</h2><ul><li>sin(x)</li><li>cos(x)</li><li>tan(x)</li><li>asin(x)</li><li>acos(x)</li><li>atan(x):[-π/2,π/2]</li><li>atan2(y,x):与atan(y/x)结果相同，但是-π/2≥atan2(y,x)≥π</li><li>sinh(x)</li><li>cosh(x)</li><li>tanh(x)</li><li>asinh(x)</li><li>acosh(x)</li><li>atanh(x)</li><li>abs(x):x的绝对值</li><li>angle(x):复数x的相位角</li><li>sqrt(x):x的平方根</li><li>real(x)</li><li>imag(x)</li><li>conj(x):复数x的共轭数</li><li>round(x):向最近整数取整</li><li>fix(x):向0取整</li><li>floor(x):向-∞取整</li><li>ceil(x):向+∞取整</li><li>sign(x):如果x&gt;0,则为+1；如果x&lt;0,则为-1</li><li>mod(x,y)：除后余数：x-y*fix(x/y)</li><li>rem(x,y):除后余数：x-y*fix(x/y).如果y≤0，则与mod不同</li><li>exp(x):以e为底的指数</li><li>log(x):以e为底的对数</li><li>log10(x):以10为底的对数</li><li>factor(x):将x分解质因数</li><li>isprime(x):如果x为素数，值为1，否则为0</li><li>factorial(x):x!</li></ul><h2 id="功能函数"><a href="#功能函数" class="headerlink" title="功能函数"></a>功能函数</h2><ol><li>sort(x):将x按照升序重新排列,如果x是矩阵，则重新排列按列进行</li><li>sum(x):如果是x是矩阵，返回值由矩阵各列元素和组成的一个行向量</li><li>max(x),min(x):如果x是矩阵，函数值为一个行向量，每个元素为矩阵相应列的最大或最小值</li><li>rand(n),返回一个nxn的矩阵，元素全是随机数。除非特别规定，否则所生成的是0~1之间均匀分布的随机数</li><li>eval：该命令可以作为字符串被编辑，然后用eval执行。字符串可以通过input读取，或在程序中创建</li></ol><h2 id="M文件"><a href="#M文件" class="headerlink" title="M文件"></a>M文件</h2><ol><li>M文件可以分为脚本文件和函数文件两种</li><li>脚本文件操作对象为MATLAB工作空间内的变量，并且在脚本执行结束后，脚本中对变量的一切操作均会被保留。在MATLAB语言中也可以在脚本内部定义变量，并且该变量将会自动地被加入到当前的MATLAB工作空间中，并可以为其他的脚本或函数引用，直到MATLAB被关闭或采用一定的命令将其删除</li><li>MATLAB语言的函数文件包含5个部分：<ol><li>函数题头：指函数的定义行，是函数语句的第一行，在该行中将定义函数名，输入变量列表以及输出变量列表等</li><li>HI行：指函数帮助文档的第一行</li><li>帮助信息</li><li>函数体</li><li>注释部分：注释语句是以%引导的</li></ol></li><li>echo on,echo off:M文件执行过程中，其命令语句通常不出现在屏幕上，但是当echo on命令将echo开启后，屏幕上会显示所有语句。这时，用户可以看到正在执行的那部分M文件。</li><li>开发函数M文件最基本且很有效的一个办法是将第一行的函数语句用%注释掉，然后作为一个命令M文件进行测试。测试通过后，再将函数语句恢复</li></ol><h2 id="保存和载入数据"><a href="#保存和载入数据" class="headerlink" title="保存和载入数据"></a>保存和载入数据</h2><ol><li>save，load：如果直接使用save，则所有当前变量将被保存到默认文件matlab.mat里。load是与save相反的命令，它取回所有被save保存的变量。</li><li>save file_name data-ascii：save能以ASCII码格式保存数据。带有ASCII选项的save和load非常重要，因为他们可以从MATLAB导入和导出数据</li><li>自动创建文件名：在一个M文件中，常常需要自动创建一些文件名。如果整条命令连同文件名写为一个字符串，则可通过eval执行。</li></ol><h2 id="硬拷贝"><a href="#硬拷贝" class="headerlink" title="硬拷贝"></a>硬拷贝</h2><ul><li>使用diary命令制作一个屏幕内容的拷贝，如果其后不加任何文件名，屏幕内容将存入名为diary的文件中，此文件可以用文本方式打开。但是在diary文件里无法得到图形</li></ul><h2 id="Matlab中的默认常量"><a href="#Matlab中的默认常量" class="headerlink" title="Matlab中的默认常量"></a>Matlab中的默认常量</h2><ol><li>pi：圆周率</li><li>inf：无穷大</li><li>nan：不定值，即0/0</li><li>realmax：最大正实数</li><li>realmin：最小正实数</li><li>eps：浮点数的相对误差</li><li>i：虚数单位</li><li>nargin：函数实际输入参数个数</li><li>nargout：函数实际输出参数个数</li><li>ans：默认变量名</li></ol><h2 id="常用矩阵函数运算"><a href="#常用矩阵函数运算" class="headerlink" title="常用矩阵函数运算"></a>常用矩阵函数运算</h2><ol><li>rot90（）：矩阵逆时针旋转90°</li><li>flipud（）：矩阵上下翻转</li><li>fliplr（）：矩阵左右翻转</li><li>flipdim（）：矩阵的某维元素翻转</li><li>shiftdim（）：矩阵的元素移位</li><li>eig（）：计算矩阵的特征值和特征向量</li><li>rank（）：计算矩阵的秩</li><li>trace（）：计算矩阵的迹</li><li>norm（）：计算矩阵的范数</li><li>poly（）：计算矩阵的特征方程的根</li><li>svd（）：矩阵的奇异值分解</li><li>qr（）：矩阵的QR分解</li><li>chol（）：矩阵的Cholesky分解</li><li>schur（）：矩阵的Schur分解</li><li>lu（）：矩阵的LU分解</li></ol><h2 id="符号运算"><a href="#符号运算" class="headerlink" title="符号运算"></a>符号运算</h2><ol><li>syms 符号变量名1 符号变量名2 … 符号变量名n<ol><li>用这种格式定义符号变量时不要在变量名上加字符串分界符，变量间用空格而不用逗号分隔</li></ol></li><li>含有符号对象的表达式称为符号表达式，建立符号表达式有以下3中方法：<ol><li>利用单引号来生成符号表达式</li><li>用sym函数建立符号表达式</li><li>使用已经定义的符号变量组成符号表达式<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/sjfydxI.png" alt="符号表达式创建实例" title="">                </div>                <div class="image-caption">符号表达式创建实例</div>            </figure></li></ol></li><li>Matlab中，数值矩阵不能直接参与符号运算，必须先转化为符号矩阵<ol><li>将数值矩阵转化为符号矩阵：sym（数值矩阵）</li><li>将符号矩阵转化为数值矩阵：numeric（A）</li></ol></li><li>关于符号矩阵的函数<ol><li>transpose（S）：返回S矩阵的转置矩阵</li><li>determ（S）：返回S矩阵的行列式值</li><li>许多数值矩阵的函数，如diag，triu，tril，inv，det，rank，eig等也可直接应用于符号矩阵</li></ol></li><li>符号表达式的四则运算<ol><li>factor（S）：对S分解因式，S是符号表达式或符号矩阵</li><li>expand（S）：对S进行展开，S是符号表达式或符号矩阵</li><li>collect（S，v）：对S按变量v合并同类项，S是符号表达式或符号矩阵</li><li>simplify（S）：应用函数规则对S进行简化</li><li>simple（S）：调用MATLAB的其他函数对表达式进行综合化简，并显示化简过程</li></ol></li><li>常用的符号运算<ol><li>limit，求极限的符号函数，常用的格式：limit（F，x，a，‘right’）或limit（F，x，a，‘left’）。当自变量x从右侧或左侧逼近a时，函数F的极值</li><li>diff，求微分用的符号函数，常用格式：diff（f，x，n），表示f关于x求n阶导数</li><li>int，求积分用的符号函数，常用格式：int（f，r，x0，x1），f为所要积分的表达式，r为积分变量，若为定积分，则x0与x1为积分上下限</li><li>symsum，级数求和的符号函数，常用的格式：S=symsum（fk，k，k0，kn），其中fk为级数的通项，k为级数自变量，k0和kn为级数求和的起始项和终止项，且可设为inf</li><li>dsolve，求解常微分方程的符号函数，常用格式：dsolve（’eqnl’,’condition’,’var’）;该函数求解微分方程eqnl在初始条件condition下的特解。参数var描述方程中的自变量符号，省略时按默认原则处理，若没有给出初值条件condition，则求方程的通解<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/o1KV20Q.png" alt="极限和极值的符号运算实例" title="">                </div>                <div class="image-caption">极限和极值的符号运算实例</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/Hp0qYod.png" alt="微积分的符号运算实例" title="">                </div>                <div class="image-caption">微积分的符号运算实例</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/sHRwiap.png" alt="常微分方程符号运算实例" title="">                </div>                <div class="image-caption">常微分方程符号运算实例</div>            </figure></li></ol></li></ol><h2 id="图形绘制"><a href="#图形绘制" class="headerlink" title="图形绘制"></a>图形绘制</h2><ol><li>ploy,绘制二维图形，常用格式：plot(x1,y,option1,x2,y2,option2,…)</li><li>plot3,绘制三维图形，常用格式：plot3(x1,y1,z1,option1,x2,y2,z2,option2,…)</li><li>mesh,绘制三维曲面，常用格式：mesh(X,Y,Z,C),参数X,Y,Z都为矩阵值，C表示网格曲面的颜色分布。mesh(x,y,Z,C),参数x，y为长度分别是n和m的向量值，而参数Z是维数为mxn的矩阵</li><li>surf，绘制三维阴影曲面，常用格式：surf(X,Y,Z,C),surf(x,y,Z,C)<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/pZGpcxE.png" alt="三维网格曲面图绘制应用实例" title="">                </div>                <div class="image-caption">三维网格曲面图绘制应用实例</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/0hS4l6O.png" alt="绘图命令使用实例" title="">                </div>                <div class="image-caption">绘图命令使用实例</div>            </figure></li></ol><h2 id="MATLAB程序"><a href="#MATLAB程序" class="headerlink" title="MATLAB程序"></a>MATLAB程序</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/xWXusd3.png" alt="MATLAB程序基本组成结构" title="">                </div>                <div class="image-caption">MATLAB程序基本组成结构</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;几个常用命令&quot;&gt;&lt;a href=&quot;#几个常用命令&quot; class=&quot;headerlink&quot; title=&quot;几个常用命令&quot;&gt;&lt;/a&gt;几个常用命令&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;help：查看某个命令的帮助文档&lt;/li&gt;
&lt;li&gt;version：获得当前Matlab的版本&lt;
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="Matlab" scheme="https://suda-morris.github.io/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>StarUML Install</title>
    <link href="https://suda-morris.github.io/2015/11/10/star-uml/"/>
    <id>https://suda-morris.github.io/2015/11/10/star-uml/</id>
    <published>2015-11-10T07:44:29.000Z</published>
    <updated>2018-07-05T01:38:09.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="StarUML-软件破解"><a href="#StarUML-软件破解" class="headerlink" title="StarUML 软件破解"></a>StarUML 软件破解</h2><ol><li><a href="http://staruml.io" target="_blank" rel="noopener">官网地址</a></li><li>该软件为跨平台的UML建模工具，采用NodeJs编写</li><li><p>破解：安装目录/www/license/node/LicenseManagerDomain.js文件修改为如下：</p><figure class="highlight javascript"><figcaption><span>LicenseManagerDomain.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> NodeRSA = <span class="built_in">require</span>(<span class="string">'node-rsa'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params">PK, name, product, licenseKey</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pk, decrypted;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">            name: <span class="string">"morris"</span>,</span><br><span class="line">            product: <span class="string">"StarUML"</span>,</span><br><span class="line">            licenseType: <span class="string">"vip"</span>,</span><br><span class="line">            quantity: <span class="string">"suda_morris.github.io"</span>,</span><br><span class="line">            licenseKey: <span class="string">"later equals never!"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pk = <span class="keyword">new</span> NodeRSA(PK);</span><br><span class="line">            decrypted = pk.decrypt(licenseKey, <span class="string">'utf8'</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> terms = decrypted.trim().split(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> (terms[<span class="number">0</span>] === name &amp;&amp; terms[<span class="number">1</span>] === product) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123; </span><br><span class="line">                name: name, </span><br><span class="line">                product: product, </span><br><span class="line">                licenseType: terms[<span class="number">2</span>],</span><br><span class="line">                quantity: terms[<span class="number">3</span>],</span><br><span class="line">                licenseKey: licenseKey</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initializes the domain with several commands.</span></span><br><span class="line"><span class="comment">     * @param &#123;DomainManager&#125; domainManager The DomainManager for the server</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">domainManager</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!domainManager.hasDomain(<span class="string">"LicenseManager"</span>)) &#123;</span><br><span class="line">            domainManager.registerDomain(<span class="string">"LicenseManager"</span>, &#123;<span class="attr">major</span>: <span class="number">0</span>, <span class="attr">minor</span>: <span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        domainManager.registerCommand(</span><br><span class="line">            <span class="string">"LicenseManager"</span>, <span class="comment">// domain name</span></span><br><span class="line">            <span class="string">"validate"</span>,       <span class="comment">// command name</span></span><br><span class="line">            validate,         <span class="comment">// command handler function</span></span><br><span class="line">            <span class="literal">false</span>,            <span class="comment">// this command is synchronous in Node ("false" means synchronous")</span></span><br><span class="line">            <span class="string">"Validate License"</span>,</span><br><span class="line">            [</span><br><span class="line">                &#123;</span><br><span class="line">                    name: <span class="string">"PK"</span>,</span><br><span class="line">                    type: <span class="string">"string"</span>,</span><br><span class="line">                    description: <span class="string">"PK"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    name: <span class="string">"name"</span>,</span><br><span class="line">                    type: <span class="string">"string"</span>,</span><br><span class="line">                    description: <span class="string">"name of license owner"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    name: <span class="string">"product"</span>,</span><br><span class="line">                    type: <span class="string">"string"</span>,</span><br><span class="line">                    description: <span class="string">"product name"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    name: <span class="string">"licenseKey"</span>,</span><br><span class="line">                    type: <span class="string">"string"</span>,</span><br><span class="line">                    description: <span class="string">"license key"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                &#123;</span><br><span class="line">                    name: <span class="string">"result"</span>, <span class="comment">// return values</span></span><br><span class="line">                    type: <span class="string">"object"</span>,</span><br><span class="line">                    description: <span class="string">"result"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    exports.init = init;</span><br><span class="line"></span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></li><li><p>打开软件，，help-&gt;Enter License,随便输入用户名密码即可破解成功</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;StarUML-软件破解&quot;&gt;&lt;a href=&quot;#StarUML-软件破解&quot; class=&quot;headerlink&quot; title=&quot;StarUML 软件破解&quot;&gt;&lt;/a&gt;StarUML 软件破解&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://staruml.
      
    
    </summary>
    
      <category term="UML" scheme="https://suda-morris.github.io/categories/UML/"/>
    
    
      <category term="StarUML" scheme="https://suda-morris.github.io/tags/StarUML/"/>
    
  </entry>
  
  <entry>
    <title>SD Card Driver</title>
    <link href="https://suda-morris.github.io/2015/10/30/sd-card/"/>
    <id>https://suda-morris.github.io/2015/10/30/sd-card/</id>
    <published>2015-10-30T08:58:07.000Z</published>
    <updated>2018-07-05T01:38:09.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Micro-SD卡简介"><a href="#Micro-SD卡简介" class="headerlink" title="Micro SD卡简介"></a>Micro SD卡简介</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/baGsEky.jpg" alt="SD卡" title="">                </div>                <div class="image-caption">SD卡</div>            </figure><ol><li>Micro SD卡的控制指令功能强大，支持SPI、SDIO模式，兼容MMC。在SPI模式下，CS/MOSI/MISO/CLK都需要加10~100K左右的上拉电阻</li><li>SD卡有5个寄存器<ol><li>CID：128比特，卡标识寄存器,只读</li><li>RCA：16比特，相对卡地址寄存器，即本地系统中卡的地址，动态变化，在主机初始化的时候确定。SPI模式中没有此寄存器</li><li>CSD：128比特，卡描述数据，主要存储了卡的容量、数据格式、DSR寄存器是否可用、数据传输相关参数、数据传输速度、最大的数据访问时间、最大的读写数据块长度等，是可配置寄存器</li><li>SCR：64比特，SD配置寄存器，即SD卡特定信息数据如：SCR版本号、SD卡版本号、是否支持安全性、擦除后卡状态默认值、SD总线宽度等，由生产商在卡生产阶段写入</li><li>OCR：32比特，操作条件寄存器,提供SD Host查询SD卡支持的电压范围，是否是大容量卡OCR[30],卡省电过程是否结束OCR[31]</li></ol></li><li>每发送一个命令，SD卡都会给出一个应答，以告知主机该命令的执行情况，或者返回主机需要获取的数据。SPI模式下，SD卡针对不同的命令，应答可以是R1~R7。命令与响应都是MSB优先。除了SEND_STATUS和READ_OCR指令外，其他指令的响应格式都是R1，格式R1的长度是1Byte，并且最高位总是0，其余每位均是错误提示，在指令接收过程中发生了什么样的错误，对应的错误位就会是‘1’。R1b和R1具有相同的格式，它将伴随一个附加的busy信号，busy信号的长度可以是任意个字节，全0表示卡处在“忙”的状态。格式R2的长度为2字节，它是指令SEND_STATUS的响应，它的高字节和R1相同，低字节同样作为状态提示。格式R3的长度是5字节，它是指令READ_OCR的响应，最高字节和R1相同，其余4字节包含SD卡的OCR寄存器信息</li><li>在SD卡收到复位命令（CMD0）时，CS为低电平则SD卡的SPI模式被启用。不过在发送CMD0之前，要发送&gt;74个时钟这是因为SD卡内部有一个供电电压上升时间，大概为64个CLK，剩下的10个CLK用于SD卡同步，之后才能开始CMD0的操作。在卡初始化的时候，CLK时钟最大不能超过400KHz</li><li>对SD卡的常用基本操作主要由：单块读、连续读、单块写、连续写。SPI模式下，通过向SD卡发送响应的命令并读取相应的响应来实现对SD卡的控制。</li></ol><h2 id="SD-命令"><a href="#SD-命令" class="headerlink" title="SD 命令"></a>SD 命令</h2><ol><li>命令:每个命令都有一个起始位和结束位，总长度为48 bits，并且每个命令都有 7 bits 的CRC 校验码，高字节优先传输<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/sDb6XU5.jpg" alt="SD Command" title="">                </div>                <div class="image-caption">SD Command</div>            </figure></li><li>Command 共分为12类（class0 - class11），在寄存器CSD中有12 bits CCC（Card Command Class）对本卡支持的分类进行描述<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/2QG9Ein.jpg" alt="SD命令" title="">                </div>                <div class="image-caption">SD命令</div>            </figure></li><li>几个重要的命令<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/Xh1BWEV.png" alt="常用命令" title="">                </div>                <div class="image-caption">常用命令</div>            </figure></li><li>CMD8命令格式<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/9oboqjq.jpg" alt="CMD8" title="">                </div>                <div class="image-caption">CMD8</div>            </figure></li></ol><h2 id="SD-应答"><a href="#SD-应答" class="headerlink" title="SD 应答"></a>SD 应答</h2><ol><li>R1响应格式<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/ZYbXuth.png" alt="R1响应格式" title="">                </div>                <div class="image-caption">R1响应格式</div>            </figure></li></ol><h2 id="SD卡初始化"><a href="#SD卡初始化" class="headerlink" title="SD卡初始化"></a>SD卡初始化</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/ccW4YbS.jpg" alt="SD卡初始化流程" title="">                </div>                <div class="image-caption">SD卡初始化流程</div>            </figure><ol><li>配置时钟，慢速一般为400Hz，设置工作模式</li><li>发送CMD0，对卡进行软复位，进入空闲态，该指令没有反馈</li><li>发送CMD8命令用于读取卡的接口信息，如果是SD2.0，则支持CMD8命令；如果是SD1.x，MMC，则不支持CMD8</li><li>发送CMD55+ACMD41，判断当前电压是否在卡的工作范围内，看卡能否识别命令，如果是MMC卡，则CMD55不能被识别，短反馈</li><li>发送CMD2，验证SD卡是否接入，长反馈</li><li>发送CMD3，读取SD卡的RCA地址，短反馈</li><li>以RCA作为参数，发送CMD9读取CSD，长反馈</li><li>发送CMD7，选中要操作的SD卡，短反馈</li><li>配置告诉时钟，准备数据传输，一般为20~25MHz</li><li>设置工作模式：DMA、中断或者查询模式</li></ol><h2 id="SD卡读取数据流程"><a href="#SD卡读取数据流程" class="headerlink" title="SD卡读取数据流程"></a>SD卡读取数据流程</h2><ol><li>发送CMD17</li><li>接收卡响应R1</li><li>接收数据起始令牌0xFE</li><li>接收数据</li><li>接收2字节的CRC，如果不使用CRC，这两个字节在读取后可以丢掉</li><li>禁止片选之后，发多8个CLK</li></ol><h2 id="SD卡写数据流程"><a href="#SD卡写数据流程" class="headerlink" title="SD卡写数据流程"></a>SD卡写数据流程</h2><ol><li>发送CMD24</li><li>接收卡响应R1</li><li>发送写数据起始令牌0xFE</li><li>发送数据</li><li>发送2字节的伪CRC</li><li>禁止片选之后，发多8个CLK</li></ol><h2 id="SD卡读数据块操作"><a href="#SD卡读数据块操作" class="headerlink" title="SD卡读数据块操作"></a>SD卡读数据块操作</h2><ol><li>在读数据块模式下，数据传输的基本单元是数据块，它的大小在CSD中（READ_BL_LEN）定义</li><li>为了保证数据传输的正确，每个数据块后都有一个CRC校验码。</li><li>CMD17（Read_Single_Block）启动一次读数据块操作，在传输结束后返回返回到发送状态。</li><li>CMD18（Read_Multiple_Block）启动一次连续多个数据块的读操作</li><li>主机可以在多数据块读操作的任何时候终止操作，而不管操作的类型。发送停止传输命令即可终止操作</li><li>如果在多数据块读操作中，卡检测到错误（如越界，地址错位或内部错误），它将停止数据传输并仍处于数据状态；此时主机必须发送停止传输命令，终止操作</li></ol><h2 id="FATFS简介"><a href="#FATFS简介" class="headerlink" title="FATFS简介"></a>FATFS简介</h2><ol><li>FATFS是一个完全免费开源的FAT文件系统模块，专门为小型的嵌入式系统而设计。支持FAT12、FAT16和FAT32，支持多个存储媒介；有独立的缓冲区，可以对多个文件进行读/写。</li><li>拥有多种配置选项：<ol><li>支持多卷（物理驱动器或分区，最多10个卷）</li><li>多个ANSI/OEM代码页包括DBCS</li><li>支持长文件名、ANSI/OEM或Unicode</li><li>支持RTOS</li><li>支持多种扇区大小</li><li>只读、最小化的API和I/O缓冲区等</li></ol></li><li>需要我们编写移植代码的是FATFS模块提供的底层接口，包括存储媒介读/写接口(disk I/O)和供给文件创建修改时间的实时时钟<ol><li>ffconf.h:FATFS模块配置文件</li><li>ff.h:FATFS和应用模块共用的包含文件</li><li>ff.c:FATFS模块</li><li>diskio.h:FATFS和disk I/O模块共用的包含文件</li><li>interger.h:数据类型定义</li><li>option：可选的外部功能(比如支持中文等)</li><li>diskio.c:FATFS和disk I/O模块接口层文件</li></ol></li><li>ffconf.h<ol><li>_CODE_PAGE,根据具体使用的而语言在ffconf.h中定义具体的宏定义。如果使用简体中文，则选择936；如果使用英文，则选择437；如果使用日文，则选择932。打开option文件夹，打开cc936.c文件，里面有一个很大的数组static const WCHAR uni2oem[]。这个数组用于unicode码和OEM码之间的相互转换。接下来又有两个函数，ff_convert()和ff_wtoupper()具体执行码型转换和将字符串转换为大写。unicode是一种双字节字符编码，无论中文还是英文，或者其他语言统一到2字节。与现有的任何编码都不兼容。WindowsNT的内核即使用该编码，所有数据进入内核前转换成UNICODE，退出内核后再转换成版本相关的编码(通常称为OEM，在简体中文下即为GB)</li><li>_FS_TINY，使用浓缩版的FATFS就设置为1</li><li>_FS_READONLY,这个用来配置是不是只读</li><li>_USE_STRFUNC,这个用来设置是否支持字符串类操作，比如f_putc,f_puts等</li><li>_USE_MKFS,这个用来设置是否使能格式化</li><li>_USE_FASTSEEK，这个用来使能快速定位</li><li>_USE_LABEL,这个用来设置是否支持磁盘盘符（磁盘名字）读取与设置</li><li>_USE_LFN,该选项用于设置是否支持长文件名，还需要_CODE_PAGE支持，取值范围为0~3。0表示不支持长文件名，1~3是支持长文件名，但是存储地方不一样</li><li>_VOLUMES,用于设置FATFS支持的逻辑设备数目</li><li>_MAX_SS,扇区缓冲的最大值，一般设置为512</li></ol></li><li>ff.h中的函数定义<ol><li>FRESULT f_mount (FATFS<em> fs, const TCHAR</em> path, BYTE opt);加载文件系统<ul><li>fs表示文件系统对象，path表示本地设备驱动号，opt=1表示立即挂载，0表示延迟挂载</li></ul></li><li>FRESULT f_lseek (FIL* fp, DWORD ofs);移动文件的读写指针<ul><li>ofs表示文件偏移量的数目</li></ul></li><li>FRESULT f_close (FIL* fp);关闭打开的文件对象    </li><li>FRESULT f_opendir (DIR<em> dp, const TCHAR</em> path);打开目录，返回目录对象    </li><li>FRESULT f_readdir (DIR<em> dp, FILINFO</em> fno);读取目录获得文件信息</li><li>FRESULT f_stat (const TCHAR<em> path, FILINFO</em> fno);读取文件的状态</li><li>FRESULT f_getfree (const TCHAR<em> path, DWORD</em> nclst, FATFS** fatfs);获取驱动器上的空闲簇数</li><li>FRESULT f_truncate (FIL* fp);截断文件</li><li>FRESULT f_sync (FIL* fp);刷新写文件的缓冲数据</li><li>FRESULT f_unlink (const TCHAR* path);删除目录中的一个文件</li><li>FRESULT f_mkdir (const TCHAR* path);创建一个新目录</li><li>FRESULT f_chmod (const TCHAR* path, BYTE attr, BYTE mask);更改文件/目录的属性</li><li>FRESULT f_utime (const TCHAR<em> path, const FILINFO</em> fno);更改文件/目录的时间戳</li><li>FRESULT f_rename (const TCHAR<em> path_old, const TCHAR</em> path_new);重命名/移动文件或目录</li><li>FRESULT f_forward (FIL<em> fp, UINT(</em>func)(const BYTE<em>,UINT), UINT btf, UINT</em> bf);转发数据流</li><li>FRESULT f_mkfs (const TCHAR* path, BYTE sfd, UINT au);在驱动器上创建一个文件系统</li><li>FRESULT f_chdir (const TCHAR* path);改变当前目录</li><li>FRESULT f_chdrive (const TCHAR* path);更改当前驱动器</li><li>int f_putc (TCHAR c, FIL* fp);</li><li>int f_puts (const TCHAR<em> str, FIL</em> cp);    </li><li>int f_printf (FIL<em> fp, const TCHAR</em> str, …);</li><li>TCHAR<em> f_gets (TCHAR</em> buff, int len, FIL* fp);</li></ol></li><li>diskio.c(需要用户提供如下几个函数接口)<ol><li>DSTATUS disk_initialize (BYTE pdrv);初始化磁盘驱动器</li><li>DSTATUS disk_status (BYTE pdrv);获取磁盘状态</li><li>DRESULT disk_read (BYTE pdrv, BYTE* buff, DWORD sector, UINT count);读扇区</li><li>DRESULT disk_write (BYTE pdrv, const BYTE* buff, DWORD sector, UINT count);写扇区</li><li>DRESULT disk_ioctl (BYTE pdrv, BYTE cmd, void* buff);设备相关的控制特性</li><li>get_fattime获取当前时间</li></ol></li><li>簇：文件数据分配的基本单位</li><li>FAT文件系统依次应该为:引导扇区、文件分配表两个、根目录区和数据区</li></ol><h2 id="汉字字库"><a href="#汉字字库" class="headerlink" title="汉字字库"></a>汉字字库</h2><ol><li>常用的汉字内码系统有GB2312，GB13000，GBK，BIG5（繁体）等几种，其中GB2312支持的汉字仅有几千个，很多时候不够用，而GBK内码不仅完全兼容GB2312，还支持繁体字，总汉字数量达到2万多个。</li><li>每个GBK码由2字节组成，第一个字节为0X81~0xFE，第二个字节分为两部分，一是0x40~0x7E，二是0x80~0xFE。第一个字节代表的意义称为区，GBK里面总共有126个区，每个区内有190个汉字。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Micro-SD卡简介&quot;&gt;&lt;a href=&quot;#Micro-SD卡简介&quot; class=&quot;headerlink&quot; title=&quot;Micro SD卡简介&quot;&gt;&lt;/a&gt;Micro SD卡简介&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
       
      
    
    </summary>
    
      <category term="Driver" scheme="https://suda-morris.github.io/categories/Driver/"/>
    
    
      <category term="SD" scheme="https://suda-morris.github.io/tags/SD/"/>
    
  </entry>
  
  <entry>
    <title>GPS Introduction</title>
    <link href="https://suda-morris.github.io/2015/10/16/gps/"/>
    <id>https://suda-morris.github.io/2015/10/16/gps/</id>
    <published>2015-10-16T01:06:12.000Z</published>
    <updated>2019-01-03T08:20:25.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NEO-M8N模块"><a href="#NEO-M8N模块" class="headerlink" title="NEO-M8N模块"></a>NEO-M8N模块</h2><ol><li>内嵌USB转串口功能</li><li>三维位置定位</li><li>测速</li><li>授时</li><li>MAXIM公司20.5dB高增益LNA芯片</li><li>应用场合：<ol><li>语音报站</li><li>航模，飞控，无人机</li><li>同步授时</li><li>汽车导航</li></ol></li><li>接收制式：<ol><li>GPS</li><li>GLONASS</li><li>Galileo</li><li>BeiDou</li><li>QZSS</li><li>SBAS</li></ol></li><li>72路接收通道</li><li>水平定位精度：2米（空旷地）</li><li>输出频率1Hz~10Hz</li><li>速度精度：0.1m/s</li><li>加速度精度：0.1m/s2</li><li>最大高度18000米，最大速度515m/s</li><li>最大加速度4g</li><li>基于UBX协议进行模块的配置</li><li>IIC接口的SDA与SCL已经内部接了上拉电阻</li></ol><h2 id="XH414法拉电容"><a href="#XH414法拉电容" class="headerlink" title="XH414法拉电容"></a>XH414法拉电容</h2><ol><li>参数:3.3V 0.07F</li><li>功能和锂电池一样，在主电源掉电的时候可以为GPS模块的RTC部分供电，以使GPS模块在下次启动时能快速搜索到卫星，一般可维持供电1小时</li></ol><h2 id="NMEA-0183协议"><a href="#NMEA-0183协议" class="headerlink" title="NMEA-0183协议"></a>NMEA-0183协议</h2><ol><li>NMEA是美国国家海洋电子协会为海用电子设备指定的标准格式，目前已经成为了GPS导航设备统一的RTCM标准协议</li><li>NMEA-0183是一套定义接收机输出的标准信息，有几种不同的二格式，每种都是独立相关的ASCII，使用逗号隔开数据，数据流长度30-100字符不等，通常以每秒间隔选择输出，最常用的格式为“GGA”，它包含了定位时间，纬度，经度，高度，定位所用的卫星数，DOP值，差分状态和校正时段，其他的有速度，跟踪，日期等。</li><li>NMEA-0183常用语句格式说明：<ol><li>$GPGGA:全球定位数据，最大帧长72</li><li>$GPGSA：卫星PRN数据，最大帧长65</li><li>$GPGSV：卫星状态信息，最大帧长210</li><li>$GPRMC：推荐最小数据，最大帧长70</li><li>$GPVTG：地面速度信息，最大帧长34</li><li>$GPGLL：大地坐标信息</li><li>$GPZDA：UTC时间和日期</li></ol></li><li>协议帧总说明：该协议采用ASCII码。帧格式形如：$aacc,dd,dd,…,ddd*hh<cr><lf><ol><li>$表示帧命令起始位</li><li>aaccc表示地址域，前两位是标识符，后三位为语句名</li><li>ddd…ddd表示数据</li><li>*表示校验和前缀</li><li>hh表示校验和，$与*之间所有字符ASCII码的校验和(各字节做异或运算，得到校验和后，再转换16进制格式的ASCII字符)</li><li><cr><lf>表示回车和换行</lf></cr></li></ol></lf></cr></li><li>GPGGA：GPS固定数据输出语句<ol><li>格式：$GPGGA,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>*<15><cr><lf></lf></cr></15></14></13></12></11></10></9></8></7></6></5></4></3></2></1></li><li>例子：$GPGGA,092725.00,4717.11399,N,00833.91590,E,1,8,1.01,499.6,M,48.0,M,,0*5B</li><li><1>UTC时间，格式为hhmmss.sss</1></li><li><2>纬度，格式ddmm.mmmm</2></li><li><3>纬度半球，N或者S</3></li><li><4>经度，格式ddmm.mmmm</4></li><li><5>经度半球，E或W</5></li><li><6>定位质量指标，0=定位无效，1=标准定位，2=差分定位，6=估算</6></li><li><7>使用卫星数量，从00到12</7></li><li><8>水平精确度，0.5到99.9</8></li><li><9>天线离海平面的高度，-9999.9到9999.9米</9></li><li><10>高度单位，M表示单位米</10></li><li><11>大地椭球面相对海平面的高度</11></li><li><12>高度单位，M表示单位米</12></li><li><13>差分GPS数据期限（RTCM SC-104），最后设立RTCM传送的秒数量</13></li><li><14>差分参考基站标号，从0000到1023</14></li><li><15>校验和</15></li></ol></li><li>GPGSA：GPS精度指针及使用卫星<ol><li>格式：$GPGSA,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>,<13>,<14>,<15>,<16>,<17>*<18><cr><lf></lf></cr></18></17></16></15></14></13></12></11></10></9></8></7></6></5></4></3></2></1></li><li>例子：$GPGSA,A,3,23,29,07,08,09,18,26,28,,,,,1.94,1.18,1.54*0D</li><li><1>模式2：M=手动，A=自动</1></li><li><2>模式1：定位型式1=未定位，2=二维定位，3=三维定位</2></li><li><3>第1信道正在使用的卫星PRN码编号(Pseudo Random Noise，伪随机噪声吗)，01至32</3></li><li><4> 第2信道正在使用的卫星PRN码编号</4></li><li><5> 第3信道正在使用的卫星PRN码编号</5></li><li><6> 第4信道正在使用的卫星PRN码编号</6></li><li><7> 第5信道正在使用的卫星PRN码编号</7></li><li><8> 第6信道正在使用的卫星PRN码编号</8></li><li><9> 第7信道正在使用的卫星PRN码编号</9></li><li><10> 第8信道正在使用的卫星PRN码编号</10></li><li><11> 第9信道正在使用的卫星PRN码编号</11></li><li><12> 第10信道正在使用的卫星PRN码编号</12></li><li><13> 第11信道正在使用的卫星PRN码编号</13></li><li><14> 第12信道正在使用的卫星PRN码编号</14></li><li><15> PDOP综合位置精度因子（0.5 - 99.9）</15></li><li><16> HDOP水平精度因子（0.5 - 99.9）</16></li><li><17> VDOP垂直精度因子（0.5 - 99.9）</17></li><li><18> 校验和</18></li></ol></li><li>GPGSV：可视卫星状态输出语句<ol><li>格式：：$GPGSV, <1>,<2>,<3>,<4>,<5>,<6>,<7>,…,<4>,<5>,<6>,<7>*<8><cr><lf></lf></cr></8></7></6></5></4></7></6></5></4></3></2></1></li><li>例子：$GPGSV,3,1,10,23,38,230,44,29,71,156,47,07,29,116,41,08,09,081,36*7F</li><li><1> 总的GSV语句电文数</1></li><li><2> 当前GSV语句号</2></li><li><3> 可视卫星总数，00至12</3></li><li><4> 卫星编号，01至32</4></li><li><5> 卫星仰角，00至90度</5></li><li><6> 卫星方位角，000至359度。实际值</6></li><li><7> 信噪比（C/No），00至99dB；无表示未接收到讯号</7></li><li><8> 校验和。</8></li><li>每条语句最多包括四颗卫星的信息，每颗卫星的信息有四个数据项，即：卫星编号，卫星仰角，卫星方位角，信噪比</li></ol></li><li>GPRMC：推荐最小数据量的GPS信息<ol><li>格式：$GPRMC,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>*<13><cr><lf></lf></cr></13></12></11></10></9></8></7></6></5></4></3></2></1></li><li>例子：$GPRMC,083559.00,A,4717.11437,N,00833.91522,E,0.004,77.52,091202,,,A*57</li><li><1> UTC（Coordinated Universal Time）时间，hhmmss（时分秒）格式</1></li><li><2> 定位状态，A=有效定位，V=无效定位</2></li><li><3> Latitude，纬度ddmm.mmmm（度分）格式（前导位数不足则补0）</3></li><li><4> 纬度半球N（北半球）或S（南半球）</4></li><li><5> Longitude，经度dddmm.mmmm（度分）格式（前导位数不足则补0</5></li><li><6> 经度半球E（东经）或W（西经）</6></li><li><7> 地面速率（000.0~999.9节，Knot，前导位数不足则补0）</7></li><li><8> 地面航向（000.0~359.9度，以真北为参考基准，前导位数不足则补0）</8></li><li><9> UTC日期，ddmmyy（日月年）格式</9></li><li><10> Magnetic Variation，磁偏角（000.0~180.0度，前导位数不足则补0）</10></li><li><11> Declination，磁偏角方向，E（东）或W（西）</11></li><li><12> Mode Indicator，模式指示（仅NMEA0183 3.00版本输出，A=自主定位，D=差分，E=估算，N=数据无效）</12></li><li><13> 校验和。</13></li></ol></li><li>GPVTG：地面速度信息<ol><li>格式：$GPVTG,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>*<10><cr><lf></lf></cr></10></9></8></7></6></5></4></3></2></1></li><li>例子：$GPVTG,77.52,T,,M,0.004,N,0.008,K,A*06</li><li><1> 以真北为参考基准的地面航向</1></li><li><2> T，表示“真”</2></li><li><3> 以磁北为参考基准的地面航向</3></li><li><4> M，表示“磁场”</4></li><li><5> 地面速率</5></li><li><6> N，表示“节”</6></li><li><7> 地面速率</7></li><li><8> K，表示“千米/小时”</8></li><li><9> 模式指示（A=自主定位，D=差分，E=估算，N=数据无效）</9></li><li><10> 校验和</10></li></ol></li><li>GPGLL：定位地理信息<ol><li>格式：$GPGLL,<1>,<2>,<3>,<4>,<5>,<6>,<7>*<8><cr><lf></lf></cr></8></7></6></5></4></3></2></1></li><li>例子：$GPGLL,4717.11364,N,00833.91565,E,092321.00,A,A*60</li><li><1> 纬度 ddmm.mmmmm（度分）</1></li><li><2> 纬度半球 N（北半球）或 S（南半球）</2></li><li><3> 经度 dddmm.mmmmm（度分）</3></li><li><4> 经度半球 E（东经）或 W（西经）</4></li><li><5> UTC 时间：hhmmss（时分秒）</5></li><li><6> 定位状态，A=有效定位，V=无效定位</6></li><li><7> 模式指示（A=自主定位，D=差分，E=估算，N=数据无效）</7></li><li><8> 校验和</8></li></ol></li><li>GPZDA：当前时间信息<ol><li>格式：$GPZDA,<1>,<2>,<3>,<4>,<5>,<6>*<7><cr><lf></lf></cr></7></6></5></4></3></2></1></li><li>例子：$GPZDA,082710.00,16,09,2002,00,00*64</li><li><1> UTC 时间：hhmmss（时分秒，格林威治时间）</1></li><li><2> 日</2></li><li><3> 月</3></li><li><4> 年</4></li><li><5> 本地区域小时（NEO-6M 不支持，为 00）</5></li><li><6> 本地区域分钟（NEO-6M不支持，为 00）</6></li><li><7> 校验和</7></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;NEO-M8N模块&quot;&gt;&lt;a href=&quot;#NEO-M8N模块&quot; class=&quot;headerlink&quot; title=&quot;NEO-M8N模块&quot;&gt;&lt;/a&gt;NEO-M8N模块&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;内嵌USB转串口功能&lt;/li&gt;
&lt;li&gt;三维位置定位&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="GPS" scheme="https://suda-morris.github.io/tags/GPS/"/>
    
  </entry>
  
  <entry>
    <title>Micro Fabrication</title>
    <link href="https://suda-morris.github.io/2015/10/11/micro-fabrication/"/>
    <id>https://suda-morris.github.io/2015/10/11/micro-fabrication/</id>
    <published>2015-10-11T08:59:00.000Z</published>
    <updated>2018-07-05T01:38:09.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息时代"><a href="#信息时代" class="headerlink" title="信息时代"></a>信息时代</h2><ol><li>微电子产业是信息时代的基础</li><li>基于硅的晶体管是最基本的信息载体</li><li>以硅/半导体为基础的微纳加工技术是信息时代的材料技术基础</li></ol><h2 id="IC制造高度专业化"><a href="#IC制造高度专业化" class="headerlink" title="IC制造高度专业化"></a>IC制造高度专业化</h2><ul><li>设计-&gt;制造-&gt;测试-&gt;封装</li></ul><h2 id="芯片制造工艺"><a href="#芯片制造工艺" class="headerlink" title="芯片制造工艺"></a>芯片制造工艺</h2><ul><li>芯片制造工艺是指由“硅片”到“集成电路结构晶圆”之间的工艺步骤</li></ul><h2 id="二氧化硅在半导体制造中的作用以原因"><a href="#二氧化硅在半导体制造中的作用以原因" class="headerlink" title="二氧化硅在半导体制造中的作用以原因"></a>二氧化硅在半导体制造中的作用以原因</h2><ol><li>作用<ol><li>层间隔离</li><li>器件隔离</li><li>屏蔽层</li></ol></li><li>原因<ol><li>电阻率高，大于10MΩ·cm</li><li>击穿场强大，大于10MV/cm</li><li>禁带宽度较宽，越9eV</li></ol></li></ol><h2 id="微纳加工技术的使用场合"><a href="#微纳加工技术的使用场合" class="headerlink" title="微纳加工技术的使用场合"></a>微纳加工技术的使用场合</h2><ol><li>集成电路领域</li><li>MEMS传感器（如用在投影机里面的DLP芯片)</li><li>医疗微电子（如使用带摄像头的胶囊来看人体内的情况，通过一个微系统控制药释放的速度）</li><li>平板显示行业</li><li>太阳能电池行业</li></ol><h2 id="微纳加工技术的特点"><a href="#微纳加工技术的特点" class="headerlink" title="微纳加工技术的特点"></a>微纳加工技术的特点</h2><ol><li>资本密集。超净间和设备需要大量资金投入</li><li>分批工艺。单个晶元上有上亿的晶体管</li><li>杰出的可生产性。良率控制在95%以上,可靠性强（寿命要求不小于10年）</li><li>随着产品更新换代，成本更加低</li><li>技术渗透性强。集成电路，MEMS，太阳能电池，平板显示器，医疗微电子等领域都离不开微纳加工技术</li></ol><h2 id="微纳加工技术中选择Si作为常用材料的原因"><a href="#微纳加工技术中选择Si作为常用材料的原因" class="headerlink" title="微纳加工技术中选择Si作为常用材料的原因"></a>微纳加工技术中选择Si作为常用材料的原因</h2><ol><li>Si是人类能做的最纯净、没有缺陷、最完美的材料</li><li>Si资源丰富，是地壳中第二大丰富的化学元素</li><li>Si形成的SiO2界面性好，Si材料提供了可控、稳定且可重复生产的表面SiO2钝化层，从而使现代集成电路技术真正可以实现</li><li>在众多半导体中，Si是唯一能够通过氧化形成稳定绝缘层的材料</li></ol><h2 id="集成电路发展历程"><a href="#集成电路发展历程" class="headerlink" title="集成电路发展历程"></a>集成电路发展历程</h2><ol><li>历史上第一个晶体管(点接触)是1947年在美国贝尔实验室研制出来；1956年获得了诺贝尔奖，发明人是：威廉·肖克利，约翰·巴丁和沃尔特·布拉顿</li><li>1949年第一个面结型晶体管诞生</li><li>1958年第一个集成电路只有一个晶体管加3个电阻和1个电容,基片用的材质是锗；获得了2000年的诺贝尔奖；器件之间的连线就是简单的用焊接实现的</li><li>1959第一个硅基集成电路实现，也只有4个晶体管加2个电阻</li><li>1960年平面工艺技术诞生,塑造了现代IC制造的基本特征</li><li>1960年MOSFET诞生，从此MOSFET成为成为构建集成电路的主要器件。相对于BJT，MOS具有更高的集成密度，更低的功耗以及更好的电路设计灵活性</li></ol><h2 id="平面工艺"><a href="#平面工艺" class="headerlink" title="平面工艺"></a>平面工艺</h2><ol><li>定义：在Si半导体上通过氧化、光刻、扩散、离子注入等一系列流程，制作出晶体管和集成电路的工艺；器件和电路都是在芯片表面一层附近处，整个芯片基本上保持是平坦的</li><li>特征：批量生产，成本低廉</li></ol><h2 id="摩尔定律"><a href="#摩尔定律" class="headerlink" title="摩尔定律"></a>摩尔定律</h2><ol><li>当价格不变时，集成电路上晶体管的数目，约每隔18~24个月便会增加一倍，性能也将提升一倍</li><li>摩尔定律是一个<strong>经济学定律</strong></li><li>在摩尔定律下，新一代产品的的体积缩小30%(实现相同功能的前提下)，晶体管密度增加一倍，开关管开关速度增加0.5倍，功耗降低，成本降低，功能增加</li><li>More than Moore’s Law(MtM):更加注重系统集成而不是增加晶体管数量</li><li>SoC(System on Chip)片上系统;SiP(System in Package)系统级封装</li><li>特征尺寸每两年缩小0.7倍，0.7≈1/根号二</li></ol><h2 id="微电子工艺综述"><a href="#微电子工艺综述" class="headerlink" title="微电子工艺综述"></a>微电子工艺综述</h2><ol><li>微纳加工工艺技术分类：<ol><li>光刻：在硅片上图上光刻胶，然后通过曝光显影的办法把集成电路版图投影到硅片上的光刻胶上</li><li>刻蚀:除去裸露部分的硅或者介质材料，从而把光刻胶上的图形转移到硅片上，具体工艺手段分为：<ol><li>湿法腐蚀</li><li>干法刻蚀</li></ol></li><li>掺杂：分为离子注入和热扩散</li><li>热处理：包括热氧化来制备介质膜，杂质的热扩散，离子注入后的热退火以及硅化物形成过程中的热处理</li><li>介质膜的沉积：微电子器件和集成电路中需要大量的各种介质层和隔离结构，制作方法是化学气相沉积(CVD)</li><li>化学机械抛光（CMP）：这是一种平坦化的技术，在现代集成电路的布线中，也用它来做图形加工，就是所谓的大马士革工艺</li><li>金属化：形成器件的引出电极以及电路的互连线，实现手段主要是：溅射和电镀</li></ol></li><li>加工步骤：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/Frmykaj.png" alt="加工步骤" title="">                </div>                <div class="image-caption">加工步骤</div>            </figure><ul><li>通过氧化，在晶元上长一层很厚的氧化层（场氧化层），这个氧化就是得到二氧化硅材料</li><li>旋转涂胶的方法涂上一层光刻胶，光刻胶是一种有机物，起到图形转移的作用</li><li>曝光，激光通过掩膜版，将图形照到了光刻胶上</li><li>显影，将已经曝光的光刻胶移除</li><li>刻蚀，将没有光刻胶保护的二氧化硅的部分移出</li><li>将光刻胶移出</li><li>再一次进行氧化，生长出高质量的栅极介质氧化层，也是二氧化硅</li><li>沉淀一层多晶硅材料</li><li>图形化方式将栅极图形转移到删介质层的二氧化硅上面</li><li>通过离子注入的方式将掺杂给加入进去</li><li>沉积氮化硅</li><li>包含了接触口的图形化</li></ul></li><li>在集成电路工艺制备过程中，就是加材料，图形化，减材料的过程不断循环，在每一循环中，后一次的图形需要和前一次的图形对准</li></ol><h2 id="超净间简介"><a href="#超净间简介" class="headerlink" title="超净间简介"></a>超净间简介</h2><ol><li>为了保证零缺陷需要：避免引入颗粒，避免金属离子；颗粒引起成品率和可靠性问题，金属离子沾污会引起电性能和可靠性问题</li><li>超净间的净化级别：典型的IC Fab为光刻10级（每立方英尺中直径超过0.5um的颗粒不大于10个），其它工艺操作区为100级，“灰区”为1000级或者10000级</li><li>0.1~0.3um的颗粒最棘手：更大的颗粒容易沉淀，更小的颗粒容易凝结到更大的颗粒中</li><li>人员是一个重要的污染源，所以应当尽量采用SMIF(Standard Mechanical interface)和自动传输系统<ul><li>SMIF是一个具有标准接口的盒子，可以与各个工艺设备来对接</li></ul></li><li>人员需要穿戴特制的超净服，经过封磷才能进入超净间</li><li>超纯水：IC制造中用的超纯水电阻率必须超过18MΩ·cm，制备过程包括多级数值过滤以及反渗透离子过滤；超纯水的输运需要通过特殊的聚四氟管道进行</li><li>标准的硅片的清洗流程叫做RCA清洗<ol><li>浓硫酸+双氧水去除有机物，H2SO4碳化有机物，H2O2使C氧化成CO2</li><li>氢氟酸去除二氧化硅</li><li>氨水+双氧水去除可能的重金属离子沾污</li><li>盐酸去除碱金属离子沾污</li><li>超纯水漂洗</li></ol></li><li>超净间净化级别（最新的级别定义规范是Fed.Std.209E）<ol><li>英制： CLASS（X）：单位立方英尺中的空气中，直径超过0.5um的颗粒不超过X个，1英尺=12英寸=30.48厘米</li><li>公制： M(X):单位立方米的空气中，直径超过0.5um的颗粒不超过10^M个</li></ol></li><li>超净间的“无尘”的原因：<ol><li>层层筛选滤除空气中的颗粒物，大颗粒使用超细纤维过滤，小颗粒使用静电吸附</li><li>空气流动采用层流的方式</li><li>设备使用无尘的材料制造</li><li>晶元在迷你工作台之间转移使用SMIF</li></ol></li><li>超净间温度要求：20~22℃，湿度要求：40~46%RH</li><li>超净间着装要求：<ol><li>佩戴帽子，护目镜，面罩，手套，超净服和靴子</li><li>超净服由合成纤维制作，里面有一层是聚四氟乙烯材料。超净服是导电的，因此不会积累电荷产生静电发电或者吸附颗粒</li></ol></li></ol><h2 id="集成电路工艺用到的材料"><a href="#集成电路工艺用到的材料" class="headerlink" title="集成电路工艺用到的材料"></a>集成电路工艺用到的材料</h2><ol><li>单晶材料：结构晶体内部的微粒在三维空间呈有规律地，周期性的排列。整个晶体中质点在空间的排列短程有序，而且长程有序。单晶整个晶格是连续的</li><li>多晶材料：多晶是众多取向晶体的单晶的集合，短程有序，长程无序</li><li>非晶材料：短程长程均无序</li></ol><h2 id="单晶硅的特性及生长方法"><a href="#单晶硅的特性及生长方法" class="headerlink" title="单晶硅的特性及生长方法"></a>单晶硅的特性及生长方法</h2><ol><li>熔融的单质硅在凝固时，硅原子以金刚石晶格结构，排列成许多晶核，如果这些晶核长成晶面取向相同的晶粒，则这些晶粒平行结合起来便结晶成单晶硅。单晶硅具有准金属的物理特性，有较弱的导电性，其电导率随温度升高而增加</li><li>单晶硅英文：Monocrystallinesilicon/Single Crystal Silicon</li><li>制备单晶硅的原材料是高纯度的多晶硅材料</li><li>多晶硅原料的制备：<ol><li>从石英砂中提炼冶金级硅（纯度98%）</li><li>用冶金级的硅粉提炼电子级的硅（纯度9~11个“9”）</li></ol></li><li>单晶硅的生长：<ol><li>直拉法（CZ）（生长单晶硅的棒材），切克劳斯基发明，<ul><li>在一个直筒型的热系统里面，用石墨电阻加热，将装在高纯度石英坩埚中的多晶硅熔化，然后将籽晶插入熔体表面进行熔接，同时转动籽晶，再反转坩埚，籽晶缓慢向上提升，经过引晶，放大，转肩，等径生长，收尾等过程，一支单晶硅就能生长出来</li></ul></li><li>区熔法（FZ）（生长单晶硅的棒材）</li><li>外延法（生长单晶硅薄膜）</li></ol></li><li>在集成电路中主要用的是CZ的抛光片或者是外延片</li><li>直拉法生长机理：<ol><li>可生产大直径单晶，是目前IC用Si单晶的主流拉制方法</li><li>将电子级多晶硅原料在石英坩埚中加温至Si的熔点以上使其熔化，“拉制”是溶液在籽晶上冷凝并规则排布的过程，采用单晶籽晶作为起始材料，籽晶的晶向决定着所拉出单晶的晶向</li><li>核心问题是温度场的控制，拉晶速度决定了单晶棒的直径，而单晶的晶格完整性，掺杂均匀性等也主要由冷凝过程的温度分布决定</li><li>直拉法中晶体在熔体表面处生长，而不与坩埚相接触，这样能显著地减小晶体的应力，并防止锅壁的寄生成核</li><li>高温下石英晶坩埚中的O、C等杂质会进入Si溶液，如何处理这些杂质也是一个关键问题</li></ol></li><li>单晶硅棒通过切片得到硅片，硅片尺寸一般有4寸，6寸，8寸或者12寸，通过化学机械抛光磨平表面，再在化学溶液中腐蚀，获得表面非常光整的单晶硅片（厚度约0.5mm，直径约300mm）</li><li>几种常见的半导体化学性质比较<ol><li>禁带宽度：GaAs(砷化镓)&gt;Si&gt;Ge,因此Si的PN结反向电流比Ge小</li><li>禁带类型，Si和Ge都是间接带隙，GaAs是直接带隙，因此光电器件采用GaAs</li><li>电子迁移率：Si&lt;Ge&lt;GaAs,因此Si不适于在高频下工作，高频高速以及微波器件多采用GaAs</li></ol></li></ol><h2 id="集成电路和其它微结构器件中需要多种多样的薄膜"><a href="#集成电路和其它微结构器件中需要多种多样的薄膜" class="headerlink" title="集成电路和其它微结构器件中需要多种多样的薄膜"></a>集成电路和其它微结构器件中需要多种多样的薄膜</h2><ol><li>介质膜：高质量的超薄氧化层薄膜，绝缘性能好，包括MOS器件的栅氧化薄膜<ol><li>超薄，1~3nm；很低的界面态；很好的绝缘性，约9eV bandgap，击穿场强需要7~15MV/cm；能够阻止硼（B）穿过</li><li>包括高质量超薄介质层和低热预算介质薄膜 </li><li>制备技术：<ol><li>热氧化和ALD(Atomic Layer Deposition，原子级沉积)技术</li><li>CVD(Chemical Vapor Deposition)技术：在器件形成或者金属互联之后淀积介质膜，要求低的热预算（thermal budget，温度与时间的乘积），使得在淀积薄膜的工艺下，不对已经形成的器件的杂质分布或者已经形成的金属互联网络产生不好的影响</li></ol></li><li>氧化的速率受温度和氧化时间的影响很大。当氧气浓度很丰富时，二氧化硅的生长速度由硅键断裂速度决定，而此过程大部分取决于温度的高低。为了得到致密的氧化层，必须使反应炉内的温度保持恒定</li><li>二氧化硅在整个工艺流程中多次用来作为硅衬底保护层和连个电极之间的隔离层</li><li>氮化硅非常致密并且比其他材料更能抵抗杂质扩散</li></ol></li><li>金属膜<ol><li>布线层数和总长度：10层布线，最细线宽在45nm左右，而布线总长度可达到5公里量级</li><li>包括用于金属半导体接触的和用于金属互联网络的 </li><li>制备技术：<ol><li>溅射，蒸发，电镀</li></ol></li></ol></li><li>单晶态的半导体薄膜<ol><li>制备技术：外延</li></ol></li><li>为了满足不同的应用场景的要求，对薄膜的要求也是不同的，制备技术的选择和优化要针对应用的需求：应力，附着性，化学稳定性，化学腐蚀的选择性和可加工性，保角性(conformation)<ol><li>保角性：在图形的面上，沉积的速度大致相同</li></ol></li><li>二氧化硅的应用<ol><li>在MOSFET中<ol><li>栅极氧化</li><li>绝缘层</li><li>钝化层</li></ol></li><li>在IC中<ol><li>器件隔离</li><li>层间介质</li><li>掩蔽层</li></ol></li></ol></li><li>IC中使用的SiO2是非晶体，即短程无序，长程也无序。晶体二氧化硅的密度2.65g/cm3,非晶体二氧化硅的密度2.2g/cm3</li></ol><h2 id="ALD-Atomic-layer-deposition-原子层沉积"><a href="#ALD-Atomic-layer-deposition-原子层沉积" class="headerlink" title="ALD(Atomic layer deposition)原子层沉积"></a>ALD(Atomic layer deposition)原子层沉积</h2><ol><li>原子层沉积是一种可以将物质以单原子膜形式一层一层的镀在基底表面的方法</li><li>通常用来制作MOS器件的栅氧化层(又薄质量又高的氧化层)</li><li>不是靠衬底（Si）氧化，而是靠化学气相沉积，可用于制备非SiO2系列的high-k(高介电常数)介质</li></ol><h2 id="热氧化过程"><a href="#热氧化过程" class="headerlink" title="热氧化过程"></a>热氧化过程</h2><ol><li>氧化气氛<ol><li>干氧：O2;干氧能够提供更好的氧化质量和Si/SiO2界面，良好的界面性使得Si超越别的半导体材料，成为半导体工艺中最受欢迎的一种</li><li>湿氧：O2和H2O；需要注意，水汽在二氧化硅中的扩散速度远远大于氧气在二氧化硅中的扩散速度，可以形成厚的氧化层</li><li>其他添加元素：H（H2），Cl（TCA或者TCE），N（NH3或者N2O）。其中含氯氧化目的在于去除金属离子</li><li>实际生产中会采用dry-wet-dry-anneal的组合形式来进行氧化。anneal即退火，可以促进原子重排，将未反应的Si离子氧化，并减少界面缺陷</li></ol></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/oqKEncN.png" alt="热氧化过程" title="">                </div>                <div class="image-caption">热氧化过程</div>            </figure></li><li>Deal-Grove模型<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/KaExFIC.png" alt="Deal-Grove" title="">                </div>                <div class="image-caption">Deal-Grove</div>            </figure></li><li>氧化工艺中应注意的其他问题：<ol><li>Na、K等碱金属离子在SiO2中是块扩散杂质，将在SiO2中起移动电荷作用，引起MOS器件阈值电压漂移。因此要严格栅氧化前的硅片清洗和氧化环节的污染控制。氧化气氛中通少量HCl气氛也是控制金属离子沾污的一个办法</li><li>Si/SiO2界面的缺陷将成为MOS器件栅下的界面态，也会引起MOS器件阈值电压漂移。需要优化氧化前的硅片表面处理，优化氧化工艺，尽量减少Si/SiO2界面缺陷</li><li>后续的家文过程中可能会引起多晶硅删中的B参杂穿透SiO2层进入沟道（B在SiO2中是快扩散杂质），从而改变沟道内的杂质分布；应对办法：提高SiO2的致密性，如采用氧化时加少量NO，形成更致密的SiON；采用尽可能厚的栅介质；不采用参杂的多晶硅栅</li></ol></li><li>氧化层质量的影响因素：<ol><li>衬底洁净度</li><li>气体的纯净度</li><li>氧化过程</li></ol></li><li>反应扩散模型，可以有效解释氧化膜厚度大于20nm的时候，超薄氧化层不适用此模型，如栅氧<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/FAQ8O9b.png" alt="基础公式" title="">                </div>                <div class="image-caption">基础公式</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/uMbHfM7.png" alt="反应扩散模型" title="">                </div>                <div class="image-caption">反应扩散模型</div>            </figure><ol><li>氧化层很薄的时候，氧化速率由反应速率控制；氧化层很厚的时候，氧化速率由扩散速率控制</li><li>k是反应速率常数，D是扩散系数，C0是氧化剂在SiO2中的固溶度，N是单位体积二氧化硅中氧分子数，x0表示t=0时刻氧化膜厚度。其中k，D和C0均与温度有关，C0还与压强有关，可以增大压强提高C0</li></ol></li><li>影响氧化反应速率的因素：<ol><li>温度</li><li>压强</li><li>重掺杂削弱Si-Si键，提高了反应速率</li><li>含氯氧化，cl能与绝大多数金属反应，生成的氯化物易挥发，提高了反应质量。反应副产品H2O的加入加快了反应速率</li><li>不同的晶向反应速率不同，原因在于晶面之间的距离不同，111面最快，100面最慢</li></ol></li></ol><h2 id="干氧湿氧法的特点及原因"><a href="#干氧湿氧法的特点及原因" class="headerlink" title="干氧湿氧法的特点及原因"></a>干氧湿氧法的特点及原因</h2><ol><li>干氧：氧化层质量高，Si/SiO2界面特性更好，但是反应速率较慢</li><li>湿氧：氧化层较稀疏，通常适合生长较厚的氧化层，反应速率较快</li><li>原因：水分子比氧分子小，更容易在SiO2中扩散，水分子在SiO2中的溶解度大于氧分子</li></ol><h2 id="RTO（Rapid-Thermal-Oxidation）"><a href="#RTO（Rapid-Thermal-Oxidation）" class="headerlink" title="RTO（Rapid Thermal Oxidation）"></a>RTO（Rapid Thermal Oxidation）</h2><ol><li>超薄氧化膜（如栅极氧化膜）在低温或者低压下很难操控 ，不易生长</li><li>RTO技术能够生长1.8nm的氧化膜，氧化硅片的使用高功率的碘钨灯加热硅片以降低Thermal Budget，反应温度在1000℃左右，反应时间是毫秒级，更高的反应温度能够生长高质量的薄膜。RTO工艺只能单片操作，但是每一片消耗的时间很短。RTO技术的缺点在于，温度均匀性很难保证</li></ol><h2 id="Si-SiO2表面的杂质分离"><a href="#Si-SiO2表面的杂质分离" class="headerlink" title="Si/SiO2表面的杂质分离"></a>Si/SiO2表面的杂质分离</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/xYRtMeX.png" alt="分离系数" title="">                </div>                <div class="image-caption">分离系数</div>            </figure><ol><li>参杂的硅片在氧化和退火过程中，杂质会重分布，因为杂质在Si和SiO2中的平衡浓度不同</li><li>氧化过程中，新生长的SiO2会吸引受体，如硼（B），并且排斥施主，如磷（P）和砷（As）</li><li>杂质在SiO2中没有电学活性</li></ol><h2 id="热氧化前的清洗"><a href="#热氧化前的清洗" class="headerlink" title="热氧化前的清洗"></a>热氧化前的清洗</h2><ol><li>SC1标准清洗，去除有机物和金属，使用氨水，80摄氏度</li><li>SC2标准清洗，去除离子，使用盐酸，80摄氏度</li><li>自然氧化层去除，使用HF，室温，几十秒时间就完成</li><li>评估清洗干净的标准是检测清洗后的水的电阻率是否超过18MΩ·cm</li></ol><h2 id="Si-SiO2氧化层电荷"><a href="#Si-SiO2氧化层电荷" class="headerlink" title="Si/SiO2氧化层电荷"></a>Si/SiO2氧化层电荷</h2><ol><li>评价界面的好坏<ol><li>氧化层中的电荷越少越好</li><li>界面缺陷越少越好，即界面上Si的断键（悬挂键）越少越好</li></ol></li><li>可移动离子<ol><li>阳离子Na会在氧化层中移动</li><li>氧化前的清洗非常重要，可以减少离子污染</li></ol></li><li>固定氧化电荷<ol><li>在Si片表面的传输去区域由于最后停止O的输送导致Si与O没有形成完全的Si-O键（未完成的氧化反应）</li><li>可以通过后续的退火进行原子重排来减少，但是无法避免，因为与工艺相关</li></ol></li><li>氧化层内部残留电荷<ol><li>由非桥氧所致，可正可负</li></ol></li><li>表面残留电荷<ol><li>Si/SiO2表面原子级突变，形成缺陷</li><li>晶格不对齐导致的悬挂键</li><li>可以通入H2与Si形成Si-H键来降低缺陷态，但是不如Si-O稳定，在高压大电流，有应力的情况下，Si-H键容易断裂，影响器件特性</li></ol></li></ol><h2 id="LOCOS-amp-STI"><a href="#LOCOS-amp-STI" class="headerlink" title="LOCOS &amp; STI"></a>LOCOS &amp; STI</h2><ol><li>LOCOS（Local Oxidation of Silicon，局部氧化隔离）是硅的选择性氧化，SiN作为扩散掩膜层，绝大多数分子很难扩散穿过SiN。先在有源区覆盖一层SiN，接着在暴露的隔离区通过湿氧氧化生长一层较厚的氧化层，最后去除SiN层，形成有源区，在有源区中制作器件。</li><li>SiN可以防止O2或者H2O扩散至底层与Si发生氧化反应，但是SiN无法防止气体从侧面扩散，导致横向氧化，因此会形成鸟嘴（bird’s beak），鸟嘴处应力较大，易形成缺陷</li><li>STI即浅沟槽隔离，先淀积氧化硅，然后在隔离区腐蚀出一定深度的沟槽，再进行侧墙氧化，用CVD的方法在沟槽中淀积SiO2，最后通过CMP法平坦化，形成沟槽隔离区和有源区。与LOCOS相比较，更有效地隔离了器件，表面非常平坦，有利于下一代工艺的加工。但是STI工艺贵且复杂<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/kTy6eoo.png" alt="LOCOS" title="">                </div>                <div class="image-caption">LOCOS</div>            </figure></li></ol><h2 id="氧化膜厚度测量"><a href="#氧化膜厚度测量" class="headerlink" title="氧化膜厚度测量"></a>氧化膜厚度测量</h2><ol><li>椭偏仪，可以同时测量厚度与折射率，精度达到1nm，原理是光的偏振，可以测量介质膜</li><li>台阶仪，可以测量多种膜，但是需要 先刻蚀出一个台阶</li></ol><h2 id="外延"><a href="#外延" class="headerlink" title="外延"></a>外延</h2><ol><li>一种特殊的CVD过程三种外延过程，淀积产物呈单晶状态<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/Ce3SGrT.png" alt="外延技术" title="">                </div>                <div class="image-caption">外延技术</div>            </figure></li><li>为了形成单晶，外延与普通CVD有两点主要不同：<ol><li>衬底界面处理更加苛刻，需要利用衬底的晶格来引导薄膜的单晶生长</li><li>生长温度比普通CVD高很多</li></ol></li><li>典型应用：<ol><li>功率器件：功率器件中耐压较高的器件需要在高阻的半导体上制备，同时为了使整体串联电阻很小，衬底需要低阻。整个wafer的上面是低参杂，下面高参杂，而且低参杂的厚度很厚，达到几十微米</li><li>改变硅的晶格常数，制备高迁移率应变沟道</li></ol></li></ol><h2 id="溅射、蒸发和电镀（制备金属薄膜）"><a href="#溅射、蒸发和电镀（制备金属薄膜）" class="headerlink" title="溅射、蒸发和电镀（制备金属薄膜）"></a>溅射、蒸发和电镀（制备金属薄膜）</h2><ol><li>集成电路对金属化的主要要求：<ol><li>金属与半导体接触<ol><li>肖特基接触</li><li>欧姆接触<ol><li>高参杂后利用遂穿机制形成欧姆接触</li><li>硅化物的使用。在金属与半导体接触时，通常使用硅化物来作为接触层，避免金属和硅化物的共融体。主要采用钛硅化物，钴硅化物，镍硅化物</li></ol></li></ol></li><li>金属作为互连线。Al是目前集成电路工艺中最常用的金属链接材料，电阻率较低，工艺简单，易形成欧姆接触。但是铝容易形成电迁徙（高电流密度引发的电子风造成电迁徙），而且铝的RC延迟比较大。目前金属互联正从铝互联转向铜互联。但是铜的刻蚀比较困难，需要采用大马士革工艺。此外，为了简化工艺，在一些短距离的“局部互连”常使用多晶硅和硅化物。<ol><li>有良好的导电性</li><li>容易与N型、P型硅形成低阻欧姆接触</li><li>与硅和二氧化硅等有良好的粘附性</li><li>易于淀积和刻蚀，便于键合</li><li>性能稳定可靠</li><li>互连线对台阶的覆盖性要好</li></ol></li></ol></li><li>蒸发：不易制备合金的膜</li><li>溅射（PVD）：可以制备合金膜，粘附性好，但是台阶覆盖性不太好<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/yaveWue.png" alt="溅射" title="">                </div>                <div class="image-caption">溅射</div>            </figure></li><li>电镀：台阶覆盖性最好</li><li>典型的金属化应用场合总结<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/Car7nUY.png" alt="金属化" title="">                </div>                <div class="image-caption">金属化</div>            </figure></li></ol><h2 id="光刻工艺综述"><a href="#光刻工艺综述" class="headerlink" title="光刻工艺综述"></a>光刻工艺综述</h2><ol><li>光刻常用在：有源区的图形化，栅极的图形化，接触孔的图形化，金属图形化</li><li>光刻过程的信息流：设计人员CAD设计-&gt;版图转移到掩膜版上MASK-&gt;通过光刻工艺在光刻胶表面的空中形成aerial image-&gt;转移到光刻胶表面real image-&gt;在1um的光刻胶里面形成Latent image-&gt;显影后形成Resist image-&gt;在器件上形成Device Layer；Each step can lose information, distoring device pattern</li><li>典型的图形化转移步骤：<ol><li>旋转涂胶</li><li>曝光</li><li>显影</li><li>湿法刻蚀</li><li>去除光刻胶</li></ol></li></ol><h2 id="光刻工艺详解"><a href="#光刻工艺详解" class="headerlink" title="光刻工艺详解"></a>光刻工艺详解</h2><ol><li>MOS制备工艺中栅极的光刻步骤<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/2hOh06Q.png" alt="光刻步骤](http://i.imgur.com/fkNnt3m.png)![光刻步骤" title="">                </div>                <div class="image-caption">光刻步骤](http://i.imgur.com/fkNnt3m.png)![光刻步骤</div>            </figure><ol><li>硅片清洗：将表面的颗粒和污染物去除，增强光刻胶和硅表面的附着力<ol><li>化学清洗</li><li>去离子水漂净</li><li>甩干</li></ol></li><li>预烘及涂底胶<ol><li>预烘在100℃左右，目的是去除硅片表面的水汽</li><li>涂底胶一般涂一层非常薄的HMDS，能够很好地促进光刻胶和硅片表面的结合</li></ol></li><li>涂光刻胶<ol><li>光刻胶旋图的厚度影响因素：<ol><li>光刻胶的种类</li><li>光刻胶的粘度</li><li>真空吸盘的转速</li></ol></li><li>光刻胶喷嘴在喷完光刻胶之后需要suck back（回吸）的动作，目的是避免悬在喷嘴口上的光刻胶掉落在硅片上</li><li>光刻胶旋涂后不仅覆盖硅片的正表面，还会覆盖边缘和背面一部分。边缘和背面的部分光刻胶称作Edge bead，需要去除（Edge bead removal，EBR），方法有化学EBR，曝光EBR</li></ol></li><li>软烤：将光刻胶里面80%的溶剂蒸发掉，提高光刻胶和硅片的粘附性<ol><li>温度90℃~100℃ </li><li>具体温度和软烤时间需要具体设置</li><li>方法：<ol><li>烘箱退火</li><li>电炉烘烤</li></ol></li><li>过渡烘烤会降低光刻胶的光敏度</li></ol></li><li>对准：<ol><li>这一步工艺决定了整个微纳加工的最小线宽</li><li>分类：接触式，接近式，投影式</li></ol></li><li>曝光<ol><li>分为接触式，接近式和投影式</li></ol></li><li>后烤：停止光化学反应，让光刻胶的侧面光滑，提高精度，均匀驻波对光刻胶侧面带来的形貌的影响<ol><li>温度高于软烤的温度，100℃，烘烤10分钟</li></ol></li><li>显影，硬烘和检测<ol><li>在碱性溶液中显影，沉浸式或者喷雾，可以利用超声波来搅拌，让反应均匀</li><li>硬烤目的是将光刻胶中所有的溶剂都蒸发，光刻胶完成聚合化和剥离化，提供光刻胶抵抗刻蚀和注入的能力。同时在硬烤过程中，光刻胶内部的流动将内部的针孔给填满了</li></ol></li></ol></li><li>光刻机的原理：光的衍射<ol><li>光刻机就是讲掩膜版上的图形与前次工序中已刻在硅片上的图形对准后，再将硅片表面的光刻胶进行曝光实现图形复制的设备</li><li>三个主要性能指标：<ol><li>分辨率<ul><li>是可以曝光出来的最小特征尺寸</li></ul></li><li>对准和套刻精度<ul><li>是描述光刻机加工图形重复性能的一个指标，是层间套刻精度的度量，主要取决于掩膜版和硅片的支撑平台图形对准和移动控制精度性能</li></ul></li><li>产率<ul><li>每个小时可加工的硅片的数目</li></ul></li></ol></li></ol></li><li>接触式光刻：掩膜版直接与光刻胶接触<ol><li>优点：结构简单，成本低，光的衍射效应小，曝光出来的图形与掩膜版上的图形分辨率相当，设备简单</li><li>缺点：光刻胶污染掩膜版，产能低</li></ol></li><li>接近式光刻：掩膜版和光刻胶略微分开，越2~20μm<ol><li>优点：可以避免与光刻胶的直接接触而引起的掩膜版损伤</li><li>缺点：引入了衍射效应，降低了分辨率</li></ol></li><li>投影式曝光：在掩膜版和光刻胶之间使用透镜聚集光实现曝光。一般掩膜版的尺寸会以需要转移图形的4倍制作<ol><li>优点：提高了分辨率；掩膜版的制作更加容易；掩膜版上的缺陷影响减小</li><li>缺点：成本非常高，维护成本也很高</li><li>分类：<ol><li>扫描投影曝光（Scanning Project Printing）<ul><li>掩膜版1：1，全尺寸</li></ul></li><li>步进重复投影曝光<ul><li>掩膜版缩小比例（4：1），曝光区域22X22mm</li></ul></li></ol></li></ol></li><li>掩膜版由石英作为基座，表面有一层50~500nm的铬层或者乳胶层，这层是带图形的<ol><li>掩膜图形的制作方法有：镭射光刻写（不精确），电子束刻写（精确），两种方式都比较慢，需要几个小时</li></ol></li><li>光刻胶：光刻胶对光线敏感，所以需要在黄光下进行操作。光刻胶=基材+感光材料+溶剂<ol><li>正性光刻胶：曝光区域更容易在显影液中溶解（光照破坏了聚合物链式结构）</li><li>负性光刻胶：曝光区域更不容易在显影液中溶解（光照促使产生了链式结构）</li><li>对光刻胶的要求：<ol><li>旋涂方便</li><li>曝光性好</li><li>尺寸稳定</li><li>抗刻蚀</li></ol></li><li>光刻胶的清洗<ol><li>浓硫酸+双氧水去除金属</li><li>使用有机溶剂清洗，但是很难去除硬化的光刻胶</li><li>氧的等离子体，将光刻胶燃烧</li></ol></li></ol></li><li>光线通过掩膜版后进入光刻胶，在硅片表面反射，与入射的光波产生干涉，形成驻波（standing wave），驻波的强光区域在显影时候溶解更多，驻波的弱光区域在显影的时候溶解更少，从而导致形成波浪状的侧面图形。避免形成驻波的方法：<ol><li>在光刻胶里面加入吸收性更强的成分，削弱反射光</li><li>使用多层光刻胶</li><li>在硅片表面涂上一层防止反射的图层（bottom anti-reflection coating，BARC）。光刻胶不平整，底层反射会使被掩膜保护的光刻胶也得到了曝光，此时必须使用BARC材料。图形化工艺之前必须要平坦化工艺</li><li>PEB（后烤）均匀驻波对光刻胶侧面带来的形貌的影响</li></ol></li><li>多层对准（Overlay）产生的误差<ol><li>掩膜版和硅片的热膨胀系数不同导致硅片上的图形与掩膜版上面的图形有误差，称为：Thermal run-in/run-out error</li><li>往同一个方向偏移（translation error）</li><li>旋转偏移（Rotational Error）</li><li>最大允许误差不能超过特征尺寸的1/3</li></ol></li><li>采用OPC（optical proximity correction）的方法对由于光学衍射和干涉带来的图形畸变</li><li>提高光刻分辨率的若干技术<ol><li>更短波长的光源<ol><li>汞灯G线波长436nm，H线405nm，I线365nm；KrF准分子激光波长248nm；ArF准分子激光波长193nm。进一步缩小波长，一方面受到没有足够功率和稳定性激光器的限制，另一方面也受到光线大气吸收的限制</li></ol></li><li>浸润式光刻技术<ol><li>在光刻胶和投影镜头之间填充介电常数n大于1的物质，如水，等效波长就会减小为原来的1/n</li></ol></li><li>移相掩膜技术（光强不变，相位翻转，相长干涉变成相消干涉），移相子通常由透明的薄膜如SiO2来担任</li><li>DFM（Design For Manufacture）技术</li><li>EUV（Extreme Ultraviolet Lithography，极紫外光刻）使用波长非常小的紫外光来进行光刻，是一套光反射系统，波长11.2nm。目前EUV的瓶颈是光强</li><li>偏轴入射光，可以提高NA，原因是增加了高阶衍射的入射量（高阶衍射光中携带了精细图形的信息）</li></ol></li><li>光刻的非理想因素<ol><li>光刻胶有厚度，上表面的光刻胶接收的光照比下表面强，显影过后，光刻胶的横截面呈现梯形。解决办法有：使用高对比度的光刻胶</li><li>光刻胶便面不平整，导致部分图形失焦，解决方案：平坦化工艺</li></ol></li></ol><h2 id="平坦化工艺对光刻的重要意义"><a href="#平坦化工艺对光刻的重要意义" class="headerlink" title="平坦化工艺对光刻的重要意义"></a>平坦化工艺对光刻的重要意义</h2><ol><li>随着光刻工艺分辨率的提高，DOF（焦深）在下降，对焦过程中很容易失焦，平坦化工艺可以避免</li><li>在不平坦的表面，由于光刻胶厚度不均匀，导致曝光不均匀</li><li>不平坦的表面会导致光的散射，使得曝光过程不受控制</li></ol><h2 id="分辨率与焦深"><a href="#分辨率与焦深" class="headerlink" title="分辨率与焦深"></a>分辨率与焦深</h2><ol><li>最小特征尺寸：W=k1λ/NA（瑞利判据）。k1是工艺决定的参数，约0.6~0.8，λ为波长，NA为光学系统的数值孔径NA=n0*sinα，n0为中间介质的折射率，NA代表光学系统收集光的能力。</li><li>焦深（景深）DOF=k2λ/(NA)^2,k2也是工艺决定的参数。焦深越大，最小特征尺寸也越大，利用平坦化工艺可以解决焦深的问题</li></ol><h2 id="图形转移"><a href="#图形转移" class="headerlink" title="图形转移"></a>图形转移</h2><ol><li>图形转移就是利用光刻胶作为掩蔽，通过物理和化学的办法把下面的衬底或薄膜材料中没有被掩蔽的部分腐蚀掉。腐蚀的方式有：湿法腐蚀和干法刻蚀</li><li>湿法腐蚀：利用化学试剂进行腐蚀<ol><li>通常是各向同性的，垂直和侧面刻蚀速率比约为1.2：1。但是KOH对Si的腐蚀与晶向有关，100面的腐蚀速率是111的一百倍</li><li>需要控制腐蚀液的浓度和腐蚀温度</li><li>不适合在更小尺度下进行刻蚀</li><li>只用于wafer的清洗和光刻胶的去除</li><li>温度敏感，工艺不好受控</li><li>均匀性不好，反应物在硅片表面运输受限</li><li>有时候与晶向相关</li></ol></li><li>干法刻蚀：在腐蚀气体的气氛下完成腐蚀。为了增强腐蚀气体的化学活性，通常需要将腐蚀气体激发成等离子体<ol><li>为了形成等离子体，反应在低压下进行</li><li>反应生成物应该是易挥发性的</li><li>离子轰击：<ul><li>电容极板的等离子状态下，等离子体与衬底表面会产生一个鞘层，鞘层产生的自电电势会加速这个离子轰击到衬底表面，离子轰击能量达到10~700eV。离子轰击增强腐蚀效果，腐蚀速率提高几到几十倍</li><li>所以Wafer放在阴极，离子轰击的效果更明显</li><li>离子轰击将被刻蚀材料表面的原子键破坏</li><li>将再沉淀于被刻蚀表面的产物或聚合物打掉，使被刻蚀表面能再与刻蚀气体接触</li><li>化学反应生成的聚合物淀积在侧壁，起到保护侧壁的作用，是的整个反应向下进行比较快</li></ul></li><li>增强等离子体离化的手段<ol><li>用电感耦合产生高密度的等离子体。可单独调节轰击电压和等离子体密度</li><li>电子回旋共振</li><li>磁性增强RIE</li></ol></li><li>各向异性（Anisotropy）A=1-Vh/Vv,Vh表示水平刻蚀速度，Vv表示垂直刻蚀速度</li><li>选择性（Selectivity）Sab=Ea/Eb，Ea表示材料a的刻蚀速率，Eb表示材料b的刻蚀速率</li><li>影响干法刻蚀的因素：<ol><li>压强</li><li>气体流量</li><li>射频功率</li><li>温度</li><li>腔体几何形状</li></ol></li></ol></li><li>各向同性刻蚀：以光刻胶的暴露的表面为起点，向下和向两侧的腐蚀速度相同</li><li>完全各向异性刻蚀：以光刻胶的暴露的表面为起点，腐蚀的放下仅仅向下进行，不向两侧扩展</li><li>部分各向异性刻蚀：腐蚀的过程向下推进，同时也向两侧扩展，但是速率不一样</li><li>刻蚀Si和SiO2<ol><li>材料：CF4+O2，氧气是用来去除反应生成的聚合物</li><li>当氧气表较少的时候，随着氧气浓度的增加，刻蚀速率会增加；当氧气浓度高到一定程度，氧气浓度再上升，会导致刻蚀速率的下降</li><li>H2的存在会导致刻蚀速率下降，而且刻蚀Si的速度下降更快</li><li>通过通入O2和H2来调节刻蚀速度和选择比</li></ol></li><li>干法刻蚀的物理化学过程<ol><li>化学腐蚀（中兴活性反应物参与）</li><li>等离子增强的化学腐蚀</li><li>离子轰击增强刻蚀</li><li>生成物的侧壁沉积</li></ol></li><li>刻蚀过程中需要over-etch，确保刻蚀的完全性，同时也需要很高的选择比，如果选择比达不到要求，又需要over-etch，这时候需要加一层etch-stop层。<ol><li>刻蚀Si上面的氮氧化物，需要先在Si上加一层SiO2充当etch stop layer</li><li>如果etch-stop layer很薄，在工艺的最后阶段可以通过降低功率的方式来提高选择比</li></ol></li><li>湿法刻蚀机制：<ol><li>固体与流体之间存在边界层，厚度在微米量级</li><li>反应物通过扩散穿过边界层到达wafer表面</li><li>热激发化学反应</li><li>反应物通过扩散穿过边界层离开</li></ol></li><li>湿法刻蚀SiO2<ol><li>SiO2+6HF-&gt;2H2SiF6+2H2O</li><li>HF对Si，SiNx和光刻胶的选择比很高</li><li>反应生成的H2O降低了反应液的酸度，反应速率随之下降</li><li>通过加入NH4F可以保持溶液中HF浓度的稳定，因为NH4F+H2O-&gt;NH4OH+HF</li></ol></li><li>Si的氮化物湿法刻蚀<ol><li>使用热磷酸H3PO4，温度150~160℃</li><li>对Si和氧化物有着高的选择比，但是对光刻胶和金属的选择比很低</li><li>所以需要加一层硬掩膜来提高对光刻胶的选择比，解决光刻胶不耐酸的问题。（选择比在下面很低用etch-stop layer，在光刻胶部分很低用Hard Mask）</li></ol></li><li>Si/Poly-Si的湿法刻蚀<ol><li>各向同性：Si+HNO3+HF-&gt;H2SiF6+HNO2+H2+2H2O</li><li>KOH定向刻蚀Si的100面，保留111面不被刻蚀，得到原子级别的光滑面，倒金字塔形状</li></ol></li><li>Al的湿法刻蚀<ol><li>氧化掉Al，然后用H3PO4刻蚀Al2O3，反应过程中会产生H2带来气泡，需要超声波辅助</li></ol></li><li>干法刻蚀的分类：<ol><li>溅射：离子轰击靶表面，转移动量，表面几层原子的化学键断裂。溅射的各向异性好，选择性差</li><li>RIE（Reactive ion etch）：同时存在物理作用和化学反应，需要在各向异性和选择性之间权衡</li><li>化学干法刻蚀：各向异性差，更好的选择性<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/HWG5MZv.png" alt="不同材料的刻蚀" title="">                </div>                <div class="image-caption">不同材料的刻蚀</div>            </figure></li></ol></li></ol><h2 id="等离子体"><a href="#等离子体" class="headerlink" title="等离子体"></a>等离子体</h2><ol><li>自然状态下，气体中会有一小部分分子由于热激发而离化，离化后的离子在内部复合地非常快。</li><li>等离子体就是被激发的电离气体，可看作是高度离化的气体，相比分子总数量，它包含了很少的离化分子。这些例子处于热激发态，并快速重组。整体表现为近似电中性的电离气体</li><li>常见的等离子体：太阳，闪电，汞灯H线，I线就是水银的等离子体从激发态转到基态而发出的光</li><li>等离子体内部组成：电子+离子+分子+自由基+激发态（快要离化的分子）<ol><li>活化基（Radicals）：中性分子失去外围电子形成的非常有活性的化学物质，参与各向同性的化学反应，形成易挥发的物质</li><li>激发态物质：化学活性也很高</li><li>正电离子和自由电子：由被电离的物质形成，在电场作用下加速，能量高，各向异性好，参与刻蚀的物理作用：离子轰击，物理溅射</li></ol></li><li>举例：CF4<ol><li>激发态：CF4*</li><li>自由基：CF3-，CF2–，F-</li><li>离子态：CF3+</li></ol></li></ol><h2 id="Plasma-Etch与RIE"><a href="#Plasma-Etch与RIE" class="headerlink" title="Plasma Etch与RIE"></a>Plasma Etch与RIE</h2><ol><li>Plasma etch：Wafer 放在阳极（或者接地电极）一侧，属于各向同性刻蚀；避免了离子轰击，刻蚀主要依靠化学反应</li><li>RIE：Wafer放在阴极（或者功率电极）一侧，各向异性较好<ol><li>离子朝着Wafer加速，促进了更多的各向异性刻蚀</li><li>同时存在化学反应和物理作用</li><li>离子轰击增强了化学作用，并且是各向异性的</li><li>实质上，垂直的物理刻蚀是微不足道的，因为离子的动量不大（气压高意味着自由程短，加速距离短）</li></ol></li></ol><h2 id="PID（Plasma-Induced-Damage）"><a href="#PID（Plasma-Induced-Damage）" class="headerlink" title="PID（Plasma Induced Damage）"></a>PID（Plasma Induced Damage）</h2><ul><li>表面损伤，缺陷和玷污</li><li>天线效应（金属、多晶硅刻蚀）。悬浮导体收集电荷，损伤下面的介质层</li></ul><h2 id="离子轰击可能的机制"><a href="#离子轰击可能的机制" class="headerlink" title="离子轰击可能的机制"></a>离子轰击可能的机制</h2><ol><li>离子轰击给Wafer表面造成的损伤对整个化学反应起到了催化作用</li><li>离子轰击直接分裂了反应物分子</li><li>离子轰击去除了那些抑制反应继续进行的不易挥发的物质</li></ol><h2 id="干法刻蚀与湿法刻蚀的比较"><a href="#干法刻蚀与湿法刻蚀的比较" class="headerlink" title="干法刻蚀与湿法刻蚀的比较"></a>干法刻蚀与湿法刻蚀的比较</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/HkoqZ3w.png" alt="干湿法刻蚀的比较" title="">                </div>                <div class="image-caption">干湿法刻蚀的比较</div>            </figure><h2 id="刻蚀的评价指标"><a href="#刻蚀的评价指标" class="headerlink" title="刻蚀的评价指标"></a>刻蚀的评价指标</h2><ol><li>选择比（有两个，膜与光刻胶，膜与下方一层的介质）</li><li>各向异性</li><li>均匀性</li></ol><h2 id="刻蚀中三个最重要的考虑要素"><a href="#刻蚀中三个最重要的考虑要素" class="headerlink" title="刻蚀中三个最重要的考虑要素"></a>刻蚀中三个最重要的考虑要素</h2><ol><li>刻蚀的选择比</li><li>各向异性</li><li>离子轰击损伤</li></ol><h2 id="等离子体刻蚀的试剂中加入C、H、O的原因"><a href="#等离子体刻蚀的试剂中加入C、H、O的原因" class="headerlink" title="等离子体刻蚀的试剂中加入C、H、O的原因"></a>等离子体刻蚀的试剂中加入C、H、O的原因</h2><ul><li>C、H、O的有意引入目的在于使反应生成聚合物保护侧壁不被刻蚀，加强了各向异性的刻蚀</li></ul><h2 id="刻蚀的终点控制"><a href="#刻蚀的终点控制" class="headerlink" title="刻蚀的终点控制"></a>刻蚀的终点控制</h2><ol><li>干涉法，检测薄膜厚度</li><li>根据光发射谱，检测反应物浓度（最常用）</li><li>质谱法（最准确，最贵）</li></ol><h2 id="刻蚀中的若干问题"><a href="#刻蚀中的若干问题" class="headerlink" title="刻蚀中的若干问题"></a>刻蚀中的若干问题</h2><ol><li>掩膜损失<ol><li>刻蚀过程中光刻胶也会有所损失，使得光刻胶定义的窗口展宽，不利于定向腐蚀</li><li>解决办法：使用硬掩膜</li></ol></li><li>侧壁沉积物的控制<ol><li>反应生成有机物在侧壁的沉积过多会使得光刻胶定义的窗口缩小</li><li>通过反应气氛中接入小量的O2去除适当的侧壁生成物，使之不产生大量的堆积</li></ol></li><li>侧壁堆积的聚合物对电路可靠性产生不利影响<ol><li>刻蚀完成后需要加入阳等离子体的处理，去除侧壁聚合物，提高电路的可靠性</li></ol></li><li>负载效应（Loading effect）<ol><li>刻蚀速率与被刻蚀材料的暴露表面积相关，表面积越大，刻蚀速率越慢，使得刻蚀均匀性受很大影响</li><li>解决方法：在图形稀疏区域加一些dummy pattern（加图形），使各个区域的图形密度大致相当</li></ol></li><li>天线效应<ol><li>离子轰击是带电荷的，在对金属引线或者多晶硅的刻蚀过程中，金属对于器件来说相当于天线，收集了大量的电荷，这些电荷产生的电场有可能会击穿介质层</li><li>解决方法：工艺与设计相结合，设计时候避免较大较长的金属引线的刻蚀</li></ol></li></ol><h2 id="刻蚀过程中，由于几何表面不平整带来的影响（有好有坏）"><a href="#刻蚀过程中，由于几何表面不平整带来的影响（有好有坏）" class="headerlink" title="刻蚀过程中，由于几何表面不平整带来的影响（有好有坏）"></a>刻蚀过程中，由于几何表面不平整带来的影响（有好有坏）</h2><ol><li>光刻胶的重淀积，一方面保护了侧壁，另一方面会影响器件的性能</li><li>纵梁（stringer）效应：台阶处的薄膜厚度各不相同，各向异性刻蚀会在台阶侧壁形成一道“纵梁”，需要大量的over-etch才能消除纵梁效应</li></ol><h2 id="Blanket-Metal-Etch-back"><a href="#Blanket-Metal-Etch-back" class="headerlink" title="Blanket Metal Etch-back"></a>Blanket Metal Etch-back</h2><ul><li>填充连接孔（contact hole）–钨塞：首先用LPCVD 的方式淀积金属W，然后用RIE的方式刻蚀掉表面多余的W，只留下连接孔里面的金属W</li><li>回刻是不需要掩膜的</li></ul><h2 id="Lift-Off-工艺（剥离工艺）"><a href="#Lift-Off-工艺（剥离工艺）" class="headerlink" title="Lift-Off 工艺（剥离工艺）"></a>Lift-Off 工艺（剥离工艺）</h2><ul><li>如果薄膜在等离子体中刻蚀不能生成易挥发的化合物，比如刻蚀铜Cu，可以采用Lift-Off的方法<ul><li>使用图形化的工艺淀积一层牺牲层（一般是光刻胶），只留下需要的图形没有淀积上光刻胶</li><li>淀积需要的金属铜Cu，此时没有覆盖光刻胶的部分就会淀积上一层Cu</li><li>使用简单的湿法刻蚀，去除掉光刻胶，最后剩下的就是需要的金属铜构成的图形</li></ul></li><li>低产量，低均匀性，不适用于量产</li></ul><h2 id="MOSFET多晶硅删的刻蚀"><a href="#MOSFET多晶硅删的刻蚀" class="headerlink" title="MOSFET多晶硅删的刻蚀"></a>MOSFET多晶硅删的刻蚀</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/fHsTbdE.png" alt="MOSFET多晶硅删的刻蚀" title="">                </div>                <div class="image-caption">MOSFET多晶硅删的刻蚀</div>            </figure><h2 id="TSV（through-silicon-via）刻蚀"><a href="#TSV（through-silicon-via）刻蚀" class="headerlink" title="TSV（through silicon via）刻蚀"></a>TSV（through silicon via）刻蚀</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/7CFMDkg.png" alt="TSV刻蚀" title="">                </div>                <div class="image-caption">TSV刻蚀</div>            </figure><h2 id="掺杂"><a href="#掺杂" class="headerlink" title="掺杂"></a>掺杂</h2><ol><li>掺杂是将掺杂物替位式地引入半导体材料的晶体结构中以改变其电学特性</li><li>分类：<ol><li>离子注入</li><li>热扩散</li><li>原位掺杂，用在单晶硅生长或者薄膜生长的过程中，例如拉单晶时候对硅进行磷或硼掺杂</li></ol></li><li>想要在掺杂区域获得良好的掺杂分布图需要对深度（depth）和浓度（concentration）有好的控制能力。离子注入方式在这方面做得比较好</li><li>参杂的来源可以是固体，气体，液体（BBr3，AsCl3，POCl3，在高温熔炉里此时都已称为蒸汽）和沉积源（如SOG，方法是让包含杂质的玻璃溶解）</li><li>固溶度（Solid solubility limit）：能够被热扩散进入Si的最大剂量。离子注入不受固溶度的限制</li><li>在氧化过程中将杂质引入，热扩散过程中伴随着Si的氧化<ol><li>掺杂过程中有意引入氧气</li><li>掺杂B使用B2O3</li><li>掺杂P使用P2O5</li><li>掺杂As使用As2O3</li></ol></li><li>H,Li,Na,K,Ar等I，VIII族元素在Si的扩散属于<strong>间隙扩散</strong>，间隙扩散适用于原子半径小的元素。</li><li>替位扩散是一种空位扩散，依赖两种情况：<ol><li>相邻位置有空位</li><li>杂质原子有足够的能量克服势垒</li></ol></li><li>替位式掺杂才有电学活性</li><li>间隙式扩散的激活能远远小于替位式扩散的激活能</li></ol><h2 id="扩散工艺综述"><a href="#扩散工艺综述" class="headerlink" title="扩散工艺综述"></a>扩散工艺综述</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/g7IMqR7.png" alt="扩散工艺介绍" title="">                </div>                <div class="image-caption">扩散工艺介绍</div>            </figure><ol><li>杂质在纵向扩散的同时，也进行横向扩散。一般横向扩散长度为纵向扩散深度的0.75~0.85，横向扩散是“设计规则”要考虑的重要因素，影响IC的集成度，也影响PN结电容</li><li><p>扩散系数D表征杂质在硅的晶体里面扩散的运动速率，不同的杂质在不同温度下有不同的扩散系数。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/jcwfNB7.png" alt="扩散系数" title="">                </div>                <div class="image-caption">扩散系数</div>            </figure></li><li><p>Ea是原子扩散的激活能</p></li><li>在Si中，B和P的扩散属于替位式原子扩散，这种扩散需要通过晶体的热缺陷的产生和运动来实现，因此需要较高的温度</li><li>对于半径很小的原子，比如金原子，它在硅中是通过晶格间隙来扩散的，扩散温度比较低。</li><li>扩散中的掩膜使用SiO2，Si3N4这些耐高温的材质</li></ol><h2 id="两步扩散工艺"><a href="#两步扩散工艺" class="headerlink" title="两步扩散工艺"></a>两步扩散工艺</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/VI5ZUab.png" alt="两步扩散工艺" title="">                </div>                <div class="image-caption">两步扩散工艺</div>            </figure><ol><li>预淀积（Predeposition），确定总体的掺杂数目，有两个影响因素：<ol><li>杂质的扩散率</li><li>杂质的最大固溶度</li></ol></li><li>推进（Drive-in ），确定杂质的分布</li><li>为什么要分成两步？<ul><li>因为需要控制浓度（剂量）和结深，很难在一步之内同时控制这两个参数</li></ul></li><li>使用SiO2扩散掩膜来实现选择性杂质扩散，SiO2膜需要一定的厚度以保证高的选择比</li><li>多晶硅中的热扩散有一种效应叫做：晶界效应。即在晶粒内部的杂质扩散类似于单晶硅，但是在晶粒边界由于晶格缺陷造成大量空位，杂质的扩散速度大大加快</li></ol><h2 id="菲克定律"><a href="#菲克定律" class="headerlink" title="菲克定律"></a>菲克定律</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/9763hv6.png" alt="菲克定律" title="">                </div>                <div class="image-caption">菲克定律</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/ACDN0b2.png" alt="菲克定律公式" title="">                </div>                <div class="image-caption">菲克定律公式</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/CXbDq7g.png" alt="扩散过程计算" title="">                </div>                <div class="image-caption">扩散过程计算</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/EPygnPf.png" alt="预淀积过程扩散浓度计算" title="">                </div>                <div class="image-caption">预淀积过程扩散浓度计算</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/OHhOG0Q.png" alt="推进过程的扩散浓度计算" title="">                </div>                <div class="image-caption">推进过程的扩散浓度计算</div>            </figure><ol><li>预淀积阶段，杂质分布服从余误差函数，扩散总量Q(t)=2Cs<em>sqrt(D</em>t)/sqrt(π)≈1.13<em>Cs</em>sqrt(D*t)</li><li>热扩散的推进阶段，杂质分布服从半高斯分布，理论上中心点在0处；离子注入的杂质分布也服从高斯分布，中心在Rp（投影射程）处</li></ol><h2 id="离子注入工艺"><a href="#离子注入工艺" class="headerlink" title="离子注入工艺"></a>离子注入工艺</h2><ol><li>热扩散方法的缺陷<ol><li>表面浓度和扩散深度相关</li><li>基本上只能获得高斯或余误差分布</li><li>受上述各种增强扩散因素的影响，实际上很难精确控制杂质浓度和深度</li></ol></li><li>离职注入可以精确地控制杂质数量和灵活的调节其分布，代价是晶格损伤。晶格损伤可以通过退火工艺来消除</li><li>离子注入设备<ol><li>离子源：气态源或者固态源BF3，AsH3，PH3</li><li>放电室：低气压、分解离化气体，如BF3-&gt;B,B+,BF2+,F+等</li><li>引出狭缝：负电位，吸引出离子<ol><li>离子束流量（最大mA量级）</li><li>吸极电压约为15~30KV,决定引出离子的能量</li></ol></li><li>质谱仪：选择注入所需的杂质成分<ol><li>分析磁铁：磁场方向垂直于离子束的速度方向</li><li>出口狭缝：只允许一种(m/q)的离子离开分析仪</li></ol></li><li>加速管：加速离子，获得所需能量；高真空。最终获得动能和电压差，离子所带的电荷数有关</li><li>终端台：控制离子束扫描和剂量<ol><li>法拉第杯：捕获进入的电荷，测量离子流</li></ol></li></ol></li><li>离子注入的优势<ol><li>对剂量和杂质分布的精确控制，不受固溶度极限的限制</li><li>低温工艺，可以使用光刻胶作掩膜</li><li>更多的对掩膜材料的选择（如PR，SiO2，多晶硅，金属）</li><li>对表面清洁度不敏感</li><li>杂质有很少的横向扩散</li><li>可以穿过顶层对下层的材料进行掺杂</li><li>介质分布可以通过多次不同投影射程的离子注入来实现（如为了形成矩形分布）</li><li>杂质纯度非常高（因为使用了质谱仪将需要的杂质分离出来）</li></ol></li><li>离子注入关键的参数：<ol><li>剂量（dose）：硅片上单位面积注入的离子数量，用法拉第杯测量注入的离子数量来控制束流大小</li><li>投影射程（project range）：指深度方向的延伸的距离。注入能量是决定注入深度的关键因素</li></ol></li><li>离子注入的局限性<ol><li>难以得到B的浅结，或者As的深结，原因在于投影距离受到离子入射能量的限制（能量太高太低都不好做到）</li><li>离子注入损伤是无法避免的（部分Si晶格遭破坏，表面非晶化），需要后续高温热退火修复并且激活杂质</li><li>通常需要一层氧化层充当牺牲层，来保护衬底</li><li>有沟道效应<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/vw1Vg6s.png" alt="入射离子的分布" title="">                </div>                <div class="image-caption">入射离子的分布</div>            </figure></li></ol></li></ol><h2 id="溅射，散射与注入"><a href="#溅射，散射与注入" class="headerlink" title="溅射，散射与注入"></a>溅射，散射与注入</h2><ol><li>当真空中有一束离子束摄像一块固体材料，离子束把固体材料的原子或者分子撞出固体材料的表面，这种现象叫做溅射</li><li>当离子束从固体表面反弹回来或者穿出固体材料而去，这种现象叫做散射</li><li>当离子束射到固体材料以后，受到固体材料的抵抗，速度慢慢降低，最终停留在固体材料中，这种现象叫做离子注入</li></ol><h2 id="影响离子注入的因数"><a href="#影响离子注入的因数" class="headerlink" title="影响离子注入的因数"></a>影响离子注入的因数</h2><ol><li>横向偏差：入射离子的分布大于光刻胶开孔的区域</li><li>MASK的材料，很多情况下是图形化后的光刻胶，光刻胶的厚度要根据实际情况定</li><li>现代工艺需要浅结，一味降低加速电压会导致离子束流不稳定，为了实现离子的低能注入，可以采用分子注入的方法。如注入B+可以使用BF2+，B+的注入动能会降低为20%</li><li>沟道效应：一束准直带电粒子通单晶相互作用，当入射方向接近某一主晶轴方向，粒子射程明显增加。沟道效应会使注入注入分布产生很长的拖尾。解决方法是偏离轴注入，或者衬底表面非晶化处理。</li><li>注入损伤和退火。<ol><li>注入损伤的形成：高能入射离子与靶原子核发生碰撞时，使靶原子离开初始晶格位置，并引发连续碰撞，引起大量靶原子跑哪里晶格位置，产生空位和填隙原子等晶格损伤。</li><li>注入损伤阈值剂量：超过某一剂量注入后，形成完全损伤，晶体的长程有序被破坏。离子越轻，阈值计量越高。温度越高，阈值计量越高。</li></ol></li></ol><h2 id="IC工艺中的热预算"><a href="#IC工艺中的热预算" class="headerlink" title="IC工艺中的热预算"></a>IC工艺中的热预算</h2><ol><li>IC制造过程中经过每一步高温工艺，都会对最终的杂质分布产生影响–杂质再分布</li><li>随着IC器件中尺寸的不断缩小，要求杂质的再分布要尽可能小，因此“Thermal Budget”称为工艺集成中要考虑的一个非常重要的概念，尽量减少采用高温工艺，采用RTA等</li><li>Rapid Thermal Process（RTP）和Rapid Thermal Annealing（RTA）成为常用工艺手段</li><li>RTA用来激活杂质，修复缺陷，并且能够防止杂质扩散，具有较低的热预算，在“浅结”器件的制作中不可缺少</li></ol><h2 id="浅结的制作"><a href="#浅结的制作" class="headerlink" title="浅结的制作"></a>浅结的制作</h2><ol><li>低能离子注入</li><li>分子注入代替离子注入</li><li>快速热退火RTA</li><li>表面非晶化</li><li>偏轴方向注入杂质</li></ol><h2 id="薄膜的分类"><a href="#薄膜的分类" class="headerlink" title="薄膜的分类"></a>薄膜的分类</h2><ol><li>根据电学性质分类：<ol><li>半导体薄膜，如Si，SiGe，SiC</li><li>绝缘体薄膜，如SiO2，PSG，low-k，high-k介质</li><li>金属薄膜，如互联使用的W，Al，Cu，金属硅化物TiSi2，NiSi2，和阻挡金属层，如TiN，TaN</li></ol></li><li>根据微结构分类：<ol><li>单晶材料，如单晶硅</li><li>多晶材料，如多晶硅，大多数的金属</li><li>非晶材料，如SiO2，SiNx</li></ol></li></ol><h2 id="PVD与CVD比较"><a href="#PVD与CVD比较" class="headerlink" title="PVD与CVD比较"></a>PVD与CVD比较</h2><ol><li>PVD直接将原子淀积到衬底表面，而CVD通过表面化学反应生成薄膜</li><li>PVD主要用来淀积金属膜，CVD主要用来淀积介质薄膜</li><li>CVD比PVD有更好的均匀性和保形性（或者叫台阶覆盖性）</li><li>外延生长可以通过CVD实现，但是PVD不能够实现外延生长</li></ol><h2 id="CVD工艺特点"><a href="#CVD工艺特点" class="headerlink" title="CVD工艺特点"></a>CVD工艺特点</h2><ol><li>气相反应物淀积成膜</li><li>高温和低压是最常见的反应条件，但也不总是需要</li><li>所有的CVD方法都需要某种能量源来将反应气体分解反应活性物质（自由基）</li><li>整个CVD过程要么是化学反应控制，要么是质量传输控制</li><li>分类：APCVD，LPCVD，PECVD，MOCVD，MBE（分子束外延），ALD（原子层淀积）</li></ol><h2 id="薄膜淀积过程（以多晶硅为例）"><a href="#薄膜淀积过程（以多晶硅为例）" class="headerlink" title="薄膜淀积过程（以多晶硅为例）"></a>薄膜淀积过程（以多晶硅为例）</h2><ol><li>混合气体进入反应室，反应室尺寸远大于气体分子自由程，所以气流是粘滞流，主气流是层流，在硅片表面形成“边界层”</li><li>硅烷（SiH4）从主气流区以扩散方式穿过边界层到达衬底表面</li><li>在硅片表面硅烷及其分解的气态含硅原子团被吸附在硅片的表面，成为吸附分子</li><li>发生表面反应，生成的硅原子在硅片上聚集，连接成片，成膜；</li><li>H2从衬底表面解吸，被排出反应室</li></ol><h2 id="外延-1"><a href="#外延-1" class="headerlink" title="外延"></a>外延</h2><ol><li>外延工艺，指在晶体上用化学或者物理的方法规则地再排列所需晶体材料</li><li>外延层和衬底晶向相同，但掺杂类型、电阻率、材料可以不同</li><li>外延按工艺方法划分：    <ol><li>气相外延（VPE）：最为成熟，在单晶硅上用CVD方式将气态反应物淀积到表面，能够生长出晶格匹配的单晶硅层</li><li>液相外延（LVP）：拉单晶过程</li><li>固相外延（SPE）：使用单晶硅仔晶使无定型的硅结晶，通常用来修复离子注入损伤</li><li>分子束外延（MBE）：分子束注入到衬底表面，外延生长一层单晶层。技术先进，通常用来制备GaAs和其他混合半导体薄膜。能够精确控制单原子层生长。</li></ol></li><li>外延按照材料划分：<ol><li>同质外延，又称均匀外延</li><li>异质外延，又称非均匀外延<ol><li>外延层要与衬底相容，包括：<ul><li>两者在外延温度不发生化学反应，不互溶</li><li>两者热力学匹配</li><li>两者晶格匹配</li></ul></li></ol></li></ol></li></ol><h2 id="CVD技术（主要用来淀积介质薄膜，如多晶硅，SiO2和氮化硅）"><a href="#CVD技术（主要用来淀积介质薄膜，如多晶硅，SiO2和氮化硅）" class="headerlink" title="CVD技术（主要用来淀积介质薄膜，如多晶硅，SiO2和氮化硅）"></a>CVD技术（主要用来淀积介质薄膜，如多晶硅，SiO2和氮化硅）</h2><ol><li>过程：气态反应物在沉底反应生成固态的薄膜，例如siH4(g)+O2(g)-&gt;SiO2(g)+2H2(g)[400℃],3SiH4(g)+4NH3(g)-&gt;Si3N4(s)+12H2(g)[750℃],其中SiH4称为硅烷,SiH4(g)-&gt;Si(s)+2H2(650℃),WF6(g)+3H2(g)-&gt;W(s)+6HF(g)</li><li>工艺步骤：<ol><li>反应物运输到淀积区域</li><li>反应物从主气流穿过边界层运输到晶片表面</li><li>反应物吸附在晶片表面</li><li>表面作用，包括化学分解或反应，在表面迁移向吸附位置（表面迁移可以消除几何因素，降低台阶效应，反应更加彻底，生成的薄膜更加致密）</li><li>副产物的吸解</li><li>副产物穿过边界层回到主气流中</li><li>副产物离开淀积区域排走</li></ol></li><li>CVD技术分类及设备简介<ol><li>常压化学气相沉积（APCVD），激励源：温度；特点：产能(throughput)大,但是台阶覆盖性和均匀性不好。设备结构简单，淀积速率较快。但容易发生气相反应、产生微粒污染。<ul><li>常压指的是亚大气压（约0.1个大气压）</li><li>反应速率快，气相质量运输成为瓶颈</li><li>优势：<ul><li>反应设备简单，淀积速率快</li></ul></li><li>缺点<ul><li>污染，气相反映产生了颗粒（因为APCVD的浓度高，反应可以不用借助表面）</li><li>均匀性差，因为是气相质量运输限制</li><li>台阶覆盖性差，因为衬底温度低</li></ul></li><li>应用<ul><li>低温氧化，亚大气压下的气相外延</li></ul></li><li>将工艺温度控制在气相质量输运限制区，薄膜淀积速率对反应剂浓度敏感，而对衬底温度波动不敏感</li><li>在工艺过程中要精确控制反应剂成分、剂量以及分布的均匀性</li><li>衬底温度远高于气流温度，气流的变化会引起衬底温度略有起伏，但是对淀积速率影响不大</li></ul></li><li>低压化学气相沉积（LPCVD），激励源：温度；特点：气体稀薄，自由程大，硅片可以紧密排列，可以批量加工，并且保角性比较好，但是工艺温度比较高，石英管壁上的沉积物成为后续工艺中的颗粒；有气缺现象。<ol><li>与APCVD相比增加了真空系统，是淀积多晶硅、氮化硅、二氧化硅、PSG、BPSG、W的常用方法</li><li>气缺效应：指一段进气，沿气流方向反应剂不断消耗，淀积膜厚不均现象</li><li>工艺控制<ul><li>主要是工艺温度，气体总压，个反应剂分压，气流速度及分布均匀性。另外，工艺卫生也很重要，如淀积之前应清理反应室颗粒物</li><li>LPCVD通常将温度控制在表面化学反应控制区，薄膜淀积速率对温度波动非常敏感，而对反应剂浓度及分布均匀性不太敏感</li><li>气缺效应可通过沿气流方向逐步提高加热器温度，加快反应速度，从而提高淀积速率来消除。</li><li>优势<ul><li>较少的污染</li><li>均匀性好（因为热墙式反应器的温度控制精确，Wafer受热更均匀）</li><li>一致性好（台阶覆盖性好）</li></ul></li><li>缺点<ul><li>淀积速率较慢</li><li>提高反应速率需要更高的温度</li></ul></li><li>应用广泛<ul><li>低温氧化（LTO），氮化物，多晶硅，W和WSi2</li></ul></li></ul></li></ol></li><li>等离子体增强化学气相沉积（PECVD），激励源：等离子体，温度<ol><li>工艺温度较低，淀积速率是表面反应控制，影响淀积速率与质量的因素除了温度之外，还有反应器结构，射频功率强度和频率，反应剂与稀释剂气体剂量，抽气速率</li><li>薄膜均匀性较好，台阶覆盖性和粘附性都好于APCVD和LPCVD。</li><li>薄膜较疏松，密度较低，含有较高浓度的氢，有时还含水、氮，成分不是理想的化学配比</li><li>PECVD是当前制备SiO2，Si3N4采用较多的CVD方法，所制备的薄膜适合作为集成电路或者分立器件芯片的钝化膜和保护膜</li><li>优点<ul><li>温度低，淀积速率快，台阶覆盖性较好（需要离子轰击的辅助才能改善台阶覆盖性）</li></ul></li><li>缺点<ul><li>反应内壁也有淀积，存在污染</li></ul></li><li>应用<ul><li>金属绝缘层，钝化层，在低温材料的淀积（比如塑料）</li></ul></li></ol></li></ol></li><li>几种最常见的CVD实例<ol><li>W plug（钨塞），用于集成电路互联线层间连通金属，需要优化CVD工艺，提高保角性</li></ol></li><li>ClusterTools设备使得硅片在不同的反应腔中传输时不出真空环境，大大减少了环境影响因素，提高了工艺成品率</li><li>对下层非平面形貌的覆盖，包括台阶覆盖和孔的填充问题，通过控制反应气体理化特性和各种工艺条件，达到：<ol><li>适当的粘附系数</li><li>主要由反应控制决定薄膜生长有利于台阶覆盖</li></ol></li></ol><h2 id="CVD-SiO2"><a href="#CVD-SiO2" class="headerlink" title="CVD-SiO2"></a>CVD-SiO2</h2><ol><li>与热氧化SiO2的理化性质相比略有差异，随着工艺温度降低，密度下降，耐腐蚀性下降，成分偏离化学配比。</li><li>TEOS为硅源淀积的SiO2台阶覆盖性好于以硅烷为硅源的反应剂系统</li><li>SiO2薄膜用途不同要求不同<ol><li>作为多层布线中金属层之间的绝缘性，应有较好的台阶覆盖性，具备较高介质击穿电压</li><li>作为防止杂质外扩的覆盖层、掩膜以及钝化层：针孔密度低，薄膜致密</li></ol></li><li>PSG（磷硅玻璃）、BPSG（硼磷硅玻璃）<ol><li>SiO2中掺P或B后软化温度下降，通过退火回流，可降低硅片表面台阶，实现平整化，掺杂剂：PH3、B2H4、TMB、TMP（高温下，膜软化，有一定的流动性，改善了台阶覆盖性）</li><li>PSG薄膜应力小，台阶覆盖性较好，P一般控制在6~8wt%</li><li>BPSG是三元氧化膜体系，软化温度低于PSG，回流温度在850℃，B控制在5wt%一下</li><li>高温退火可以使生成的薄膜致密</li></ol></li></ol><h2 id="APCVD-SiO2"><a href="#APCVD-SiO2" class="headerlink" title="APCVD-SiO2"></a>APCVD-SiO2</h2><ol><li>SiH4/O2为源<ol><li>工艺：通常淀积USG，温度450~500℃，用N2稀释SH4与过量O2的混合气体</li><li>特点：工艺成熟，孔隙填充和台阶覆盖性差</li><li>用途：作为多层金属铝布线中铝层之间的绝缘层（记为ILD）</li></ol></li><li>TEOS/O3为源<ol><li>工艺：温度400℃，TEOS为液态，沸点168.1℃，用源瓶在其携带，温控流量；O3约1~2%。加入PH3、B2H4来淀积PSG、BPSG</li><li>特点：在SiO2薄膜中会含有水汽，针孔密度较高，通常需要高温退火去除潮气，提高薄膜致密度；良好的台阶覆盖性，填充空隙能力较强</li><li>用途：多用于淀积多层布线金属层之间的绝缘层。</li></ol></li><li>实际工艺中常将SiH4/O2和TEOS/O3两种系统连用，也可APCVD和其它方法结合起来使用</li></ol><h2 id="LPCVD-SiO2"><a href="#LPCVD-SiO2" class="headerlink" title="LPCVD-SiO2"></a>LPCVD-SiO2</h2><ol><li>TEOS或TEOS/O2为源<ol><li>工艺：制备USG、PSG、BPSG，温度：680~750℃</li><li>特点：致密性、台阶覆盖性等好于同类低温工艺；O2的加入能改变薄膜的内应力</li><li>用途：USG用于金属层之间的绝缘层，PSG、BPSG作为制备金属化系统之前的绝缘层</li></ol></li><li>SiH2Cl2/N2O为源<ol><li>工艺：淀积USG和PSG、BPSG，温度约900℃</li><li>特点：是高温工艺，薄膜的均匀性和台阶覆盖能力都好，HF的腐蚀速率、密度，以及电学性质和光学性质也都与热生长的氧化层接近。含有氯</li><li>用途：作为掩蔽膜</li></ol></li></ol><h2 id="PECVD-SiO2"><a href="#PECVD-SiO2" class="headerlink" title="PECVD-SiO2"></a>PECVD-SiO2</h2><ol><li>源：SiH4/N2O、O2</li><li>工艺：200~400℃，10~100Pa</li><li>特点：薄膜含H、N，与LPCVD、APCVD相比薄膜应力小、不易开裂、保形性好，离子对衬底有轰击</li><li>用途：可作为保护膜、钝化膜</li></ol><h2 id="氮化硅薄膜淀积"><a href="#氮化硅薄膜淀积" class="headerlink" title="氮化硅薄膜淀积"></a>氮化硅薄膜淀积</h2><ol><li>氮化硅薄膜性质与用途<ol><li>氮化硅薄膜与二氧化硅薄膜比较：<ol><li>抗钠能力强，硬度大，针孔少，更致密，化学稳定性好，作为钝化膜、保护膜有优势</li><li>掩蔽能力强，SiO2对B、P、As、Sb有掩蔽作用，Si3N4还可以掩蔽Ga、In、ZnO。能作为多种杂质的掩蔽膜</li><li>介电常数大，导热性好，作为电容的介质层</li><li>与硅失配率大，与Si3N4接触的Si界面缺陷大，称为载流子陷阱，或者复合中心，影响硅的载流子迁移率。因此需要在Si和Si3N4之间生长一层薄的氧化层</li></ol></li><li>用途<ol><li>MOS器件场区氧化使用Si3N4作为选择性氧化的掩膜(LPCVD)</li><li>刻蚀氧化层使用Si3N4作为自停止层(LPCVD)</li><li>使用Si3N4作为CMOS电路的保护膜(PECVD)</li></ol></li><li>分类<ol><li>LPCVD-Si3N4：薄膜密度大，硬度高，耐腐蚀性强，又被称为硬质氮化硅<ol><li>反应剂：SiCl2H2/NH3</li><li>工艺：硅烷应稀释，NH3要充足</li><li>速率影响因素：工艺温度，总气压，各气体分压及比例等</li><li>特点：台阶覆盖性好，也有粒子污染。薄膜的内应力大，超过200nm的厚度时可发生龟裂，耐HF、KOH等腐蚀</li></ol></li><li>PECVD-SixNy：工艺温度低，薄膜通常含有相当数量的H，密度、硬度、耐腐蚀性都不如LPCVD-Si3N4，又被称为软质氮化硅<ol><li>反应剂：SiH4/NH3、N2</li><li>工艺：温度在200~400℃；压力10~100Pa，以N2为反应剂应比NH3要更充足</li><li>特点：薄膜中氢含量高；用N2代替NH3含氯明显下降，淀积速率也降低</li><li>用途：作为芯片的保护膜和钝化膜，但有些场合低温淀积薄膜质量的下降，也限制了它的应用</li></ol></li></ol></li></ol></li></ol><h2 id="Low-k材料"><a href="#Low-k材料" class="headerlink" title="Low-k材料"></a>Low-k材料</h2><ol><li>随着器件特征尺寸减小，栅极延迟和互连层延迟越来越突出，主要是RC delay</li><li>R的减小可通过将Al替换成Cu，但是Cu很容易扩散到绝缘材料中，造成沾污</li><li>C的减小可以将SiO2转换成low-k材料，二氧化硅的介电常数是3.9，low-k材料的介电常数在1~3之间。典型的有：<ol><li>SiOF</li><li>多孔介质</li><li>有机low-k材料（SiLK，含Si的有机材料）</li><li>空气</li></ol></li><li>low-k材料的优点<ol><li>缩短了信号传播延时</li><li>降低了线路串扰</li></ol></li><li>需要开发介电常数在2甚至2以下的介质材料<ol><li>有稳定的理化特性，保证电路的长期应用可靠性</li><li>与金属布线有很好的粘附性</li><li>便于RIE等加工</li></ol></li></ol><h2 id="high-k栅介质与金属栅"><a href="#high-k栅介质与金属栅" class="headerlink" title="high-k栅介质与金属栅"></a>high-k栅介质与金属栅</h2><ol><li>随着器件特征尺寸减小，栅氧厚度越来越小，随之带来的漏电流也增大，增加了耗电量</li><li>使用high-k材料作为栅极电介质，可以在减小等效栅氧厚度的同时不减小栅极电介质厚度</li><li>通常使用MOCVD或者ALD方法淀积high-k材料</li><li>有前景的high-k材料<ol><li>HfO2，HfNO，Al2O3</li><li>目前HfO2是最常用的，但是HfO2与Si的界面不好，需要加入SiO2过渡层</li></ol></li><li>随着MOS栅长的缩短，为了保持栅控能力，抑制短沟道效应，必须加大单位面积的栅电容Cox。</li><li>一方面可以减小栅介质的厚度。栅长缩短到45nm，对应的SiO2栅厚度需要降低到接近1nm，这么薄的栅介质将引起两方面的问题：<ol><li>1nm的势垒宽度已接近产生明显量子遂穿的宽度</li><li>1nm的栅介质很难阻止掺杂多晶硅中的掺杂原子向沟道内的扩散，尤其是B原子</li></ol></li><li>另一方面可以增大栅介质的介电常数。使得较大物理厚度的High-k栅介质与较薄的SiO2有相同的等效电容</li><li>多晶硅栅带来的问题<ol><li>对于22nm技术时代，其EOT为0.5nm，对应的HfO2栅介质2nm，不足以阻挡多晶硅栅中的杂质（尤其是B）向沟道内扩散</li><li>参杂多晶硅是半导体，在一定的偏压下会出现界面载流子耗尽，额外引进一个等效厚度0.1~0.5nm的空间电离层，增大栅介质的等效厚度</li></ol></li><li>22nm一下技术代通常采用金属或金属硅化物，取代参杂多晶硅，作为栅极材料。</li><li>金属栅的优点：<ol><li>无耗尽层的问题</li><li>无B穿通的问题</li><li>更低的串联电阻</li><li>抑制短沟道效应</li></ol></li><li>金属栅的缺点<ol><li>NMOS和PMOS器件采用相同材料的金属栅，则器件的Vth（开启电压）不可能做小；</li><li>NMOS和PMOS器件采用不同材料的金属栅，则制造工艺复杂</li></ol></li></ol><h2 id="多晶硅薄膜的淀积"><a href="#多晶硅薄膜的淀积" class="headerlink" title="多晶硅薄膜的淀积"></a>多晶硅薄膜的淀积</h2><ol><li>多晶硅薄膜的性质与用途<ol><li>多晶硅薄膜是由无数微小晶粒组成的薄膜，晶粒大小与制备工艺有关，在晶粒与晶粒之间是晶界。晶界原子排列无序，含大量悬挂键以及高密度缺陷。硅多晶的结构特点造成它有一些与单晶不同的特性</li><li>杂质扩散系数大：晶界处&gt;&gt;晶粒内部</li><li>杂质在晶粒内部与晶界处分凝，分凝系数小于1，且随温度而变化，高温时晶粒内杂质在低温时运动到晶界处，而高温时又返回晶粒内部</li><li>特点：多晶硅有良好的高温工艺兼容性，与热生长SiO2有很好的接触性能，保形性良好，应力小</li><li>用途<ol><li>MOS器件的栅电极及多层互连布线</li><li>自对准工艺中的硅删</li><li>在SRAM中用于制作高值负载电阻</li><li>MEMS器件中，制作压学传感器的应变电阻</li></ol></li></ol></li><li>LPCVD-Poly Si<ol><li>源：硅烷</li><li>质量：淀积温度，淀积速率，总压力，硅烷分压，以及随后的热处理过程</li><li>可以在多晶硅生长同时进行原位掺杂</li></ol></li></ol><h2 id="CVD金属"><a href="#CVD金属" class="headerlink" title="CVD金属"></a>CVD金属</h2><ol><li>钨机器化学气相淀积<ol><li>用途：作导电填充物–插塞（plug）</li><li>作局部互连材料–W的导电率低，只用作短程互连线</li><li>特性：体电阻较小，热稳定性较高，但是超过400℃时，钨膜会被空气中的氧所氧化，较低的应力，良好的抗电迁移能力和抗腐蚀性</li></ol></li><li>LPCVD-W工艺<ol><li>源：WF6</li></ol></li></ol><h2 id="金属化合物CVD"><a href="#金属化合物CVD" class="headerlink" title="金属化合物CVD"></a>金属化合物CVD</h2><ol><li>LPCVD-WSix<ol><li>用途：在多晶硅/难熔金属硅化物的存储器芯片中被用作字线和位线，WSix也可作为覆盖式钨的附着层</li></ol></li><li>CVD-TiN<ol><li>源：TiCl4</li><li>特性：TiN热稳定性好，基面结合强度高，导电性能好，杂质在TiN中的扩散激活能很高</li><li>用途：在多层互联系统中作为扩散阻挡层和（或）附着层使用</li></ol></li></ol><h2 id="MOCVD"><a href="#MOCVD" class="headerlink" title="MOCVD"></a>MOCVD</h2><p>MOCVD常用来淀积三五族和二六族化合物薄膜</p><h2 id="能够生长单原子层的工艺"><a href="#能够生长单原子层的工艺" class="headerlink" title="能够生长单原子层的工艺"></a>能够生长单原子层的工艺</h2><p>MBE和ALD</p><h2 id="物理气相淀积PVD"><a href="#物理气相淀积PVD" class="headerlink" title="物理气相淀积PVD"></a>物理气相淀积PVD</h2><ol><li>PVD是利用某种物理过程实现物质转移，将原子或分子由源（或者靶）气相转移到硅衬底表面形成薄膜的过程</li><li>工艺特点：相对于CVD而言，工艺温度低，衬底在室温~几百℃；工艺原理简单，能用于制备各种薄膜。但是，所制备薄膜的台阶覆盖特性，附着性，致密性都不如CVD薄膜</li><li>用途：主要用于金属类薄膜，以及其他用CVD工艺难以淀积薄膜的制备。如金属电极，互联系统中的附着层、阻挡层合金以及金属硅化物薄膜的制备</li><li>分类：<ol><li>真空蒸镀：在高真空室内加热原材料使之气化，源气相转移到达衬底，在产地表面凝结形成薄膜。有电阻蒸镀，电子束蒸镀，激光蒸镀</li><li>溅射：在一定真空度下，使气体等离子化，其中的离子轰击靶阴极，移出靶原子等粒子气相转移到达衬底，在衬底表面淀积成膜。有直流溅射、射频溅射、磁控溅射等</li></ol></li></ol><h2 id="真空蒸镀（普适性更好，无论什么材料都能用蒸镀工艺制备）"><a href="#真空蒸镀（普适性更好，无论什么材料都能用蒸镀工艺制备）" class="headerlink" title="真空蒸镀（普适性更好，无论什么材料都能用蒸镀工艺制备）"></a>真空蒸镀（普适性更好，无论什么材料都能用蒸镀工艺制备）</h2><ol><li>蒸镀指在高真空度下，加热源使其蒸发，蒸汽分子流射到衬底表面，凝结形成薄膜的工艺。可以将蒸镀分解为三个过程：<ol><li>蒸发过程</li><li>气相质量输运过程</li><li>淀积成膜过程：吸附-&gt;成核-&gt;连片-&gt;生长</li></ol></li><li>台阶覆盖特性的改善方法<ol><li>衬底加热，温度应依据所淀积薄膜的材料特性来综合考虑</li><li>衬底旋转，除了可以改善因到达角不同带来的台阶阴影区的薄膜覆盖问题之外，还可以改善淀积薄膜厚度的均匀性</li></ol></li><li>蒸发速率的控制<ol><li>提高蒸发速率，能提高所淀积薄膜的纯度和与衬底的结合力，以及表面质量。蒸发速率过快，蒸汽原子碰撞会加剧，动能降低，甚至会引起蒸汽原子结团后再淀积，这将导致出现薄膜表面不平坦等质量问题</li></ol></li><li>蒸镀工艺，要求蒸镀室为高中空度的原因：<ol><li>为了满足蒸发分子或原子平均自由程大于放源坩埚到衬底的距离</li><li>为了薄膜纯净（避免被泄露的O2，H2O污染）</li><li>为了避免蒸发分子或原子在气相被氧化</li></ol></li><li>气相金属源的获得<ol><li>对于易熔金属，采用热蒸发</li><li>对于难熔金属，采用电子束</li></ol></li><li>膜厚较难控制，因为气体压强受温度影响很敏感</li><li>阴影效应，由于蒸发出的原子投影距离远，在衬底表面没有迁移或者反映</li></ol><h2 id="溅射"><a href="#溅射" class="headerlink" title="溅射"></a>溅射</h2><ol><li>溅射工艺是利用等离子体中的离子对阴极靶轰击，导致靶原子等颗粒物飞溅，落到衬底表面淀积成膜的一种薄膜制备工艺</li><li>离子对靶的轰击<ol><li>离子对处于负电位的靶轰击，使靶材料原子或者分子及其原子团从靶表面飞溅出来的过程。</li><li>能量在10eV~10KeV时，有中性离子逸出，不同材料的靶，溅射阈值能量不同</li></ol></li><li>靶原子气相运输<ol><li>较低真空度下，靶原子在到达衬底表面前会与其他离子发生多次散射，衬底表面某点所到达的靶原子数与改点的到达角有关。高真空度下，气相运输轨迹是直线，衬底表面某点所到达的靶原子数是受遮蔽效应限制</li></ol></li><li>淀积成膜<ol><li>到达衬底的靶原子在衬底表面先成核再成膜的过程</li><li>溅射离子与靶原子间有较大的能量传递，逸出原子携带的动量较高，在10~50eV之间。因此，原子在衬底的迁移能力、再发射能力都强，成膜的台阶覆盖性和附着力都较好</li></ol></li><li>溅射薄膜的质量及改善方法<ol><li>薄膜的保形性覆盖特性较好</li><li>薄膜附着性较好</li><li>薄膜致密性较好，针孔少</li><li>淀积速率较慢，膜厚可控性和重复性较好</li><li>薄膜纯度较高，不存在蒸镀时无法避免的坩埚污染现象</li><li>淀积过程中对衬底辐射造成的缺陷远少于电子束蒸镀</li><li>在制备特殊材质薄膜上电子束蒸镀更有优势</li></ol></li><li>保形覆盖特性的改善<ol><li>尽量提高衬底温度：以增强衬底所吸附的溅射粒子表面扩散迁移率，同时也要考虑温升后多晶态晶粒也随之长大，使得薄膜表面变粗糙</li><li>在衬底上加射频偏压：这使得衬底被高能离子轰击，有助于溅射粒子的再发射淀积，可在一定程度上改善保形覆盖特性</li><li>准直溅射技术：在衬底正上方插入准直器，只有速度方向接近于垂直衬底表面的溅射原子才能通过准直器上的孔，到达衬底表面，淀积在接触孔的底部</li></ol></li><li>特点：<ol><li>常使用惰性气体的等离子体来轰击靶原子</li><li>靶源的面积大于衬底的面积能够改善均匀性和台阶覆盖性</li><li>靶和衬底之间的距离只有几个厘米</li><li>低的真空度，因为需要等离子体气体的存在</li><li>溅射到衬底的原子有足够的能量能够在产地表面迁移，改善台阶覆盖特性</li><li>便于控制薄膜厚度</li><li>成本较蒸发高</li></ol></li></ol><h2 id="PVD金属及化合物薄膜"><a href="#PVD金属及化合物薄膜" class="headerlink" title="PVD金属及化合物薄膜"></a>PVD金属及化合物薄膜</h2><ol><li>铝及铝合金薄膜淀积<ol><li>1um厚铝膜的电阻率约为3uΩ·cm，被用于器件内电极和互连布线的导电层</li><li>作内电极时，为与衬底硅形成良好的欧姆接触，通常淀积后在500℃左右退火，退火过程中有“尖楔”现象出现（界面中的Si向铝中扩散，而留下的位置又被铝填充），尖楔现象会引起pn结的穿通。可以用含硅1%的硅铝合金作为内电极</li><li>铝膜的抗电迁移特性差，在铝硅中再掺入2%左右的铜可以改善</li><li>制备：<ol><li>真空镀铝<ol><li>钨丝电阻加热器或石墨坩埚装铝电子束加热</li><li>方法简单，但钨丝加热器会引入杂质，衬底附着和台阶覆盖特性也较差</li></ol></li><li>磁控溅射铝及铝合金<ol><li>薄膜附着力、台阶覆盖特性，以及膜厚可控性较好</li></ol></li></ol></li></ol></li><li>铜及其阻挡层薄膜的淀积<ol><li>Cu电阻率只有Al的40%~45%，抗电迁移性比铝能高两个数量级。早起IC不用铜作互连布线的原因：<ol><li>中毒现象：Cu在Si和SiO2中都是快扩散杂质，在较低温度就能扩散进Si，会改变硅衬底的电学特性</li><li>工艺性差：Cu与Si、SiO2粘附性不好，图形刻蚀难<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/olKx6jF.png" alt="铜互连技术" title="">                </div>                <div class="image-caption">铜互连技术</div>            </figure></li></ol></li></ol></li></ol><h2 id="化学气相淀积与外延"><a href="#化学气相淀积与外延" class="headerlink" title="化学气相淀积与外延"></a>化学气相淀积与外延</h2><ol><li>化学气相淀积（CVD）是把构成薄膜物质的气态反应剂或液态反应剂的蒸汽以合理的流速引入反应室，在衬底表面发生化学反应，淀积成膜的工艺方法</li><li>淀积薄膜是非晶或多晶态，衬底不要求是单晶，只要是具有一定平整度，能经受淀积温度即可</li><li>CVD工艺主要用于制备SiO2，Si2N4等介质薄膜，poly-Si等半导体薄膜，另外，也用于制备金属化系统中常用的钨、金属硅化物等薄膜</li><li>CVD工艺制备的薄膜具有较好的性质，如附着性好，保形覆盖能力较高</li><li>不同CVD方法制备的薄膜，性质不同，用途也不同：<ol><li>低温工艺制备的薄膜质地较疏松、密度低，抗腐蚀性较差，如低温SixNy用作保护膜</li><li>中温工艺薄膜密度高，抗腐蚀性好。如中温Si3N4用作腐蚀掩膜</li></ol></li><li>CVD与VPE相似，也可分为气相质量输运和表面化学反应两过程</li><li>CVD工艺衬底温度较外延工艺低、淀积速率快，而且衬底表面可以不是单晶；表面反应生成的薄膜原子在衬底上聚集成核，再连接成片、被覆盖成膜，没有外延的规则排列过程或排列不完全，所以，淀积薄膜是非晶或多晶态</li></ol><h2 id="CVD工艺反应剂气体分子到达衬底表面特殊位置的机制有："><a href="#CVD工艺反应剂气体分子到达衬底表面特殊位置的机制有：" class="headerlink" title="CVD工艺反应剂气体分子到达衬底表面特殊位置的机制有："></a>CVD工艺反应剂气体分子到达衬底表面特殊位置的机制有：</h2><p><strong>扩散，再发射，表面迁移</strong></p><h2 id="金属化"><a href="#金属化" class="headerlink" title="金属化"></a>金属化</h2><ol><li>多层金属化的数量达到10层</li><li>传统上金属互联电流密度达到10^5A/cm2</li><li>金属互联引入了寄生电阻和电容，造成了RC delay，制约芯片的速度</li></ol><h2 id="金属膜的用途"><a href="#金属膜的用途" class="headerlink" title="金属膜的用途"></a>金属膜的用途</h2><ol><li>互连金属：W、Al、Cu，W通常用作第一层金属，因为W耐高温，可以PVD</li><li>硅化物：TiSi2，CoSi2，NiSi，电导率没有金属好，在器件内部作为删极材料以降低电阻率</li><li>阻挡层：TiN，TaN</li></ol><h2 id="金属膜淀积方法"><a href="#金属膜淀积方法" class="headerlink" title="金属膜淀积方法"></a>金属膜淀积方法</h2><ol><li>蒸发，台阶覆盖性差，间隙填充不好，膜厚难以控制</li><li>溅射，淀积Al非常常用，是个物理过程</li><li>金属氧化物CVD（MoCVD），台阶覆盖性好，最常用来淀积钨塞，现在也用来淀积Cu的仔层</li><li>铜的电镀，在大马士革工艺中淀积金属铜，衬底作为负极放入电解液中，铜作为阳极</li></ol><h2 id="金属铝的特性"><a href="#金属铝的特性" class="headerlink" title="金属铝的特性"></a>金属铝的特性</h2><ol><li>优点：<ol><li>低电阻率</li><li>易于淀积和刻蚀</li><li>与Si/SiO2的粘附性较好</li><li>与Si工艺兼容性好，价格便宜</li><li>与p+Si，n+Si或者Ploy-Si能形成欧姆接触</li></ol></li><li>缺点<ol><li>抗电迁移性差</li><li>有尖楔现象</li><li>台阶覆盖性较差</li><li>耐腐蚀、稳定性较差</li></ol></li><li>Al/Si接触<ol><li>只有跟重掺杂的n或者p型Si才能形成欧姆接触</li><li>为了形成好的接触，需要合金化</li><li>通常在400~450℃，在合成气体（H2/N2）中退火</li><li>在界面处消耗SiO2形成合金</li></ol></li><li>工艺<ol><li>电子书蒸镀，磁控溅射，退火来提高粘附性和减小与SI的接触电阻</li></ol></li></ol><h2 id="Al金属化过程中的尖楔现象"><a href="#Al金属化过程中的尖楔现象" class="headerlink" title="Al金属化过程中的尖楔现象"></a>Al金属化过程中的尖楔现象</h2><ol><li>硅在Al中有一定的固溶度，如果Si与Al接触，Si在界面处缓慢溶解到Al中，Al然后回填形成了Al的尖刺</li><li>解决方法：<ol><li>在Al中掺入2%的Si形成Al/Si合金</li><li>使用金属阻挡层（TiN，TaN）</li><li>VLSI中需要金属阻挡层的保护，从而减少电子迁移率和应力迁移</li></ol></li></ol><h2 id="电迁移（不是电子的迁移，而是原子的迁移）"><a href="#电迁移（不是电子的迁移，而是原子的迁移）" class="headerlink" title="电迁移（不是电子的迁移，而是原子的迁移）"></a>电迁移（不是电子的迁移，而是原子的迁移）</h2><ol><li>在大电流密度作用下，导电电子碰撞原子，动量转移，金属离子获得能量而迁移，引起金属线的空洞和小丘</li><li>当处于大电流密度以及高温时，电迁移更显著</li><li>解决方法：    <ol><li>在Al中掺入1~2%的Si和4%Cu，这些杂质在铝中的晶粒间界分凝，可降低铝原子在晶粒简介的扩散系数，来减少电迁移</li><li>用金属阻挡层包围Al线</li><li>采用电子束蒸镀比磁控溅射更能提高抗电迁移能力</li></ol></li></ol><h2 id="多层金属互联"><a href="#多层金属互联" class="headerlink" title="多层金属互联"></a>多层金属互联</h2><ol><li>大约需要10层金属互联</li><li>每一层都需要做平坦化工艺</li><li>需要刻蚀过孔，淀积金属塞</li><li>需要淀积金属层间介质（ILD），最常用的方法就是PECVD TEOS氧化膜</li><li>淀积low-k介质可以降低层间的电容</li></ol><h2 id="平坦化"><a href="#平坦化" class="headerlink" title="平坦化"></a>平坦化</h2><ol><li>局部平坦化使用回刻，比如金属钨塞</li><li>全局平坦化使用化学机械抛光CMP，其中使用的研磨液包括刻蚀的化学剂和粗糙的SiO2颗粒,刻蚀速率取决于旋转速度和施加的压力</li></ol><h2 id="金属钨塞的制备"><a href="#金属钨塞的制备" class="headerlink" title="金属钨塞的制备"></a>金属钨塞的制备</h2><ol><li>LPCVD W</li><li>RIE的方式回刻，不需要掩膜</li></ol><h2 id="铜互联"><a href="#铜互联" class="headerlink" title="铜互联"></a>铜互联</h2><ol><li>铜的优点：<ol><li>低电阻率</li><li>能抵抗电迁移</li><li>成本低</li></ol></li><li>铜互联的挑战:<ol><li>其卤化物不易挥发，难以干法刻蚀，因此采用CMP来替代</li><li>和金属层间介质有粘附性问题，需要粘接层</li><li>在Si和介质中容易扩散造成污染，需要阻挡层</li><li>Cu的淀积很困难</li><li>双大马士革工艺制备Cu/low-k工艺</li></ol></li><li>对于Al/SiO2体系，0.25微米及以下技术代互联延迟已经超过门延迟，因此需要引入比Al电阻率更低的金属\比SiO2介电常数低的层间材料</li><li>对于Cu/low-k系统，0.13微米及以下技术代互联延迟也超过了门延迟，使得互联延迟成为了现代集成电路速度的“瓶颈”</li><li>铜互联的布局：下面几层的互联用很细的线条，上面几层的互联尽可能用比较宽的线条，比较厚的金属，以减小RC延迟</li></ol><h2 id="大马士革工艺（Damascene）"><a href="#大马士革工艺（Damascene）" class="headerlink" title="大马士革工艺（Damascene）"></a>大马士革工艺（Damascene）</h2><ol><li>为什么需要用大马士革工艺<ol><li>Al方便使用干法刻蚀加工，Cu无法干法刻蚀</li></ol></li><li>工艺流程<ol><li>PECVD 层间介质（做通孔用）+氮化硅(etch stop layer)+层间介质（刻槽使用）</li><li>根据铜走线刻槽</li><li>利用氮化硅作掩蔽，刻相应的孔</li><li>溅射金属阻挡层（TaN），阻挡Cu扩散</li><li>电镀金属Cu</li><li>CMP抛光<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/DQA98JU.png" alt="大马士革工艺" title="">                </div>                <div class="image-caption">大马士革工艺</div>            </figure></li></ol></li></ol><h2 id="高深宽比的通孔的金属淀积"><a href="#高深宽比的通孔的金属淀积" class="headerlink" title="高深宽比的通孔的金属淀积"></a>高深宽比的通孔的金属淀积</h2><ol><li>IMP（Ionized metel plasma）淀积，将溅射的原子离化后引导入深孔中</li><li>CVD的方式淀积金属，因为CVD有更好的保形性，比如金属W的回刻</li></ol><h2 id="刻蚀小的通孔"><a href="#刻蚀小的通孔" class="headerlink" title="刻蚀小的通孔"></a>刻蚀小的通孔</h2><ol><li>刻蚀速率需要特殊校准</li><li>刻蚀终点很难检测，因此要求大的over etch</li><li>选择比要高</li></ol><h2 id="硅化物"><a href="#硅化物" class="headerlink" title="硅化物"></a>硅化物</h2><ol><li>Si和金属会结合形成具有金属和半导体特征的混合物，如硅化物，TiSi2，WSi2</li><li>硅化物的电阻率相对较低，但比金属高，可以降低源漏端浅结的串联电阻，降低内部互连的多晶硅的电阻</li><li>硅化物的形成：在高温下，金属和硅的固相化学反应</li></ol><h2 id="自对准硅化物（Salicide）"><a href="#自对准硅化物（Salicide）" class="headerlink" title="自对准硅化物（Salicide）"></a>自对准硅化物（Salicide）</h2><ol><li>理想的MOS器件应具备哪些结构和电学参数要求<ol><li>源-栅，漏-栅之间的距离很近，减小沟道串联电阻</li><li>源-栅，漏-栅之间需要一个隔离层</li><li>源漏需要有良好的欧姆接触（硅化物），栅上需要低的串联电阻</li><li>漏端需要合理的参杂分布以舒缓漏端电场</li></ol></li><li>为了优化器件的漏端串联电阻，需要一个与栅自对准的复杂的参杂分布</li><li>为了优化器件的漏端电场分布，也需要一个与栅自对准的复杂的参杂分布</li><li>过程：<ol><li>源漏离子注入后，淀积一层SiO2</li><li>RIE刻蚀，栅极形成侧墙（Stringer效应）</li><li>淀积金属，高温热退火</li><li>选择性地刻蚀金属材料，源漏栅都留下了一层硅化物薄膜</li></ol></li><li>自对准硅化物工艺中，源漏和栅极同时生长出一层硅化物薄膜，以一种自对准的方式</li><li>热退火的要求非常苛刻，会消耗一定的Si</li><li>栅极两侧的侧墙保证了源漏的化学反应的独自进行，并保证了源漏的深掺杂远离栅极</li><li>两方面的自对准<ol><li>掺杂与栅</li><li>硅化物在源、漏、栅上，STI和spacer上没有</li></ol></li><li>为什么要用栅自对准结构？<ol><li>漏端串联电阻优化</li><li>漏端电场优化</li></ol></li><li>栅掩蔽注入掺杂实现自对准的作用<ol><li>掺杂分布与栅的位置自然对准，不存在套版偏差</li></ol></li><li>硅化物自对准的作用<ol><li>减小源漏接触电阻</li><li>减小栅极串联电阻<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/avHEO8z.png" alt="Salicide后的CMOS器件" title="">                </div>                <div class="image-caption">Salicide后的CMOS器件</div>            </figure></li></ol></li></ol><h2 id="金属阻挡层材料"><a href="#金属阻挡层材料" class="headerlink" title="金属阻挡层材料"></a>金属阻挡层材料</h2><ol><li>Al：Ti，TiN，淀积方法：IMP</li><li>Cu：Ta，TaN，淀积方法：IMP</li></ol><h2 id="金属化材料分类"><a href="#金属化材料分类" class="headerlink" title="金属化材料分类"></a>金属化材料分类</h2><ol><li>互连材料：指将同一芯片内的各个独立的元器件连接成为具有一定功能的电路模块</li><li>接触材料：指直接与半导体材料接触的材料以及提供与外部相连的连接点</li><li>MOSFET栅电极材料：作为MOSFET器件的一个组成部分，对器件的性能起着重要作用</li></ol><h2 id="集成电路对互联布线有以下要求"><a href="#集成电路对互联布线有以下要求" class="headerlink" title="集成电路对互联布线有以下要求"></a>集成电路对互联布线有以下要求</h2><ol><li>布线材料有低的电阻率和良好的稳定性</li><li>布线应具有强的抗电迁移能力</li><li>布线材料可被精细刻蚀，并具有抗环境侵蚀的能力</li><li>布线材料易于淀积成膜，粘附性要好，台阶覆盖性要好，并有良好的可焊性</li></ol><h2 id="PN结隔离特点、用途"><a href="#PN结隔离特点、用途" class="headerlink" title="PN结隔离特点、用途"></a>PN结隔离特点、用途</h2><ol><li>工艺成熟，方法简单，成品率高，实现了平面隔离</li><li>PN结有反向漏电流现象，反向漏电受温度、辐射等外部环境影响大</li><li>密度低，有寄生电容，器件速度做不快</li><li>当隔离很深的器件时，需要深的PN结，因此掺杂的时候需要很长的推进时间 </li><li>横向扩散严重，降低了器件密度</li><li>用途<ol><li>BJT器件的PN结隔离<ol><li>会带来寄生的MOSFET（金属上的电压使得npn反型，形成了MOSFET）</li><li>反向电压增大导致耗尽区长大，本体穿通。为了避免耗尽区的靠近相连，使用guard ring保护</li></ol></li><li>Well-in CMOS<ol><li>寄生的NPNP结构（由NMOS的有源区、P衬底、N阱、PMOS的有源区构成）会带来闩锁效应（当其中一个三极管正偏时，就会构成正反馈形成闩锁），在闩锁情况下，器件在电源和地之间形成短路，造成大电流</li></ol></li></ol></li><li>注意事项<ol><li>避免反向电压击穿，和严重的漏电流</li><li>避免反型带来的寄生MOSFET</li><li>避免闩锁效应</li></ol></li></ol><h2 id="浅槽隔离"><a href="#浅槽隔离" class="headerlink" title="浅槽隔离"></a>浅槽隔离</h2><ol><li>LOCOS的问题<ol><li>鸟嘴问题：氧化时的横向扩展；氧化层的厚度500nm左右，扩展的尺寸也是这个量级，但目前22nmCMOS器件整个有源区的尺寸也仅仅在100nm量级。鸟嘴属于无用的过渡区，对提高集成电路的集成度极其不利</li><li>不平坦的问题：有250nm左右的隆起</li><li>应力的问题，鸟嘴处的应力过大</li><li>对刻蚀要求高<ol><li>侧壁光滑</li><li>夹角不大于85℃</li></ol></li><li>沟道处的杂质在氧化过程中重分布</li><li>器件边缘会有寄生晶体管</li></ol></li><li>回刻LOCOS工艺，方法简单，通过回刻除去部分场氧化层，使表面平坦并恢复部分被鸟嘴占去的有源区。有源区的边缘应力过于集中，造成晶格缺陷，进一步在边缘区产生大的漏电流</li><li>STI（Shallow Trench Insulation with CMP）<ol><li>在硅片上淀积一层pad oxide（垫氧层），用来舒缓应力</li><li>淀积氮化硅层，作为硬掩膜</li><li>光刻定义需要隔离的区域</li><li>利用硬掩膜刻蚀底下硅的浅槽</li><li>离子注入，做STI隔离的高参杂层（Channel stop implant）</li><li>热氧化的方法在槽的底部生长一层很薄的氧化层，光滑且阻挡效果好</li><li>用PECVD TEOS淀积比较厚的介质</li><li>用CMP的方法把多余的介质去除掉（此时氮化硅作为CMP的截止层）</li><li>湿法刻蚀（热磷酸）去除氮化硅</li></ol></li><li>STI的优点<ol><li>有效的隔离，并且很紧凑</li></ol></li><li>STI注意事项<ol><li>氧化物回填的过程中需要避免中间形成空洞，常使用高密度的等离子体CVD工艺</li><li>沟槽侧壁因为干法刻蚀而粗糙，需要先使用liner oxidation来光滑</li><li>沟槽底部拐角处的介质很容易被击穿，造成大的漏电流，因此需要对拐角处做圆角处理 </li></ol></li><li>CMOS器件为什么还需要隔离：第一层布线的时候可能会引起下面半导体表面反型，从而使得器件和相邻器件之间的井有可能穿通</li></ol><h2 id="器件隔离的要求"><a href="#器件隔离的要求" class="headerlink" title="器件隔离的要求"></a>器件隔离的要求</h2><ol><li>工艺简单，成本低，良率高</li><li>占用面积小，从而提高器件密度</li><li>不影响表面形貌，台阶覆盖性要求好</li><li>有效并且可靠，相邻器件必须被有效隔离，并且能够承受较高的击穿电压，带来更少的寄生电容（寄生电容影响器件速度）</li></ol><h2 id="常用的隔离方案：PN结，LOCOS，STI，SOI"><a href="#常用的隔离方案：PN结，LOCOS，STI，SOI" class="headerlink" title="常用的隔离方案：PN结，LOCOS，STI，SOI"></a>常用的隔离方案：PN结，LOCOS，STI，SOI</h2><h2 id="Channel-stop-implant作用"><a href="#Channel-stop-implant作用" class="headerlink" title="Channel stop implant作用"></a>Channel stop implant作用</h2><blockquote><p>提高场区寄生MOSFET的阈值电压</p></blockquote><h2 id="SOI"><a href="#SOI" class="headerlink" title="SOI"></a>SOI</h2><ol><li>是一种特殊的衬底，在氧化硅上有一层薄的单晶硅</li><li>将不需要的Si刻蚀就能实现完美的隔离效果，寄生电容小，器件密度可以做的非常高，消除了闩锁效应</li><li>价格昂贵</li><li>器件特性会有轻微差异，原因是浮体效应</li><li>制备SOI的技术<ol><li>SIMOX（通过离子注入氧离子来分离）<ol><li>超高剂量的氧离子被注入到衬底</li><li>高温热退火修复上层硅片的损伤</li><li>未被破坏的表面单晶硅层作为仔层外延生长一层单晶硅</li><li>缺点：会破坏上层单晶硅</li></ol></li><li>Smart Cut<ol><li>需要两个单晶硅衬底A和B，A衬底叫做seed wafer，B衬底叫做handle wafer</li><li>将A衬底氧化，形成BOX（buried oxide）</li><li>离子注入H+离子到氧化后的A衬底中</li><li>A衬底翻过来和B衬底粘合在一起（A的氧化层和B的Si粘合起来）</li><li>高温热退火，由于SiO2中的H+的存在使得A衬底部分松动脱落</li><li>CMP平坦化，减小上层硅的厚度</li><li>缺点：上层硅的厚度难以控制</li></ol></li></ol></li></ol><h2 id="典型的CMOS制造工艺流程"><a href="#典型的CMOS制造工艺流程" class="headerlink" title="典型的CMOS制造工艺流程"></a>典型的CMOS制造工艺流程</h2><ol><li>Front-end process，用来制造CMOS器件</li><li>Back-end process，用来制造器件之间的互连线</li></ol><h2 id="工艺集成中的一些原则"><a href="#工艺集成中的一些原则" class="headerlink" title="工艺集成中的一些原则"></a>工艺集成中的一些原则</h2><ol><li>后续工艺不能影响已形成材料和掺杂结构的稳定，所以原则上讲后续工艺的温度要低于前面工艺</li><li>前面工艺的掺杂要尽可能采用扩散系数小的参杂元素</li><li>前面工艺要尽可能采用稳定的材料结构</li><li>要注意控制整个工艺集成过程的thermal budget，对于前歩工艺形成的掺杂结构，要把后步工艺对其杂质再分布的影响也考虑在内</li><li>要避免引入Na/K/Pt/Au等快扩散元素和重金属元素，实在不可避免时候（例如Cu作为互连材料），要注意设置阻挡层</li></ol><h2 id="CMOS集成电路的工艺集成"><a href="#CMOS集成电路的工艺集成" class="headerlink" title="CMOS集成电路的工艺集成"></a>CMOS集成电路的工艺集成</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/swGgvvs.png" alt="CMOS集成电路工艺集成" title="">                </div>                <div class="image-caption">CMOS集成电路工艺集成</div>            </figure><ol><li>CMOS IC的基本工艺模块<ol><li>阱，在衬底上形成的、参杂类型与硅衬底相反的区域</li><li>栅电极，双掺杂多晶硅栅工艺保持对称性</li><li>源漏结构，轻掺杂（LDD：Low Doping Drain）；源漏扩展结构（S/D Extension）；晕环（Halo）或袋状（Pocket）结构</li><li>自对准和接触，自对准指利用单一掩膜版在硅片上形成多层自对准结构；利用硅化物（TiSi2，CoSi2，NiSi2，WSi2）形成良好的欧姆接触，以减少串联电阻</li></ol></li><li>一般CMOS工艺采用100晶向的硅<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/IBB3aJj.png" alt="CMOS加工步骤" title="">                </div>                <div class="image-caption">CMOS加工步骤</div>            </figure></li><li>CMOS加工步骤<ol><li>加工器件之间隔离所需要的STI（Shallow Trench Lsolation），目的是定义有源区（MOS器件工作的区域）</li><li>利用高能离子注入，分别为PMOS和NMOS器件制造p阱和n阱（Twin-well Implants），目的是使器件具有预期的阈值电压，同时抑制可能的穿通效应。做完N阱和P阱之后，需要对沟道进行掺杂，掺杂元素能够与需要的器件的阈值电压相匹配，同时整个沟道尽量不向下扩展（否则容易引起器件的穿通）。因此沟道掺杂包括：防穿通注入，调整阈值电压注入</li><li>制备超薄栅介质和光刻刻蚀多晶硅栅电极，工艺要求最高（光刻时候线条非常细，如22纳米工艺的栅宽只有22纳米，栅的厚度有几百个纳米，而且将来需要很陡直的刻蚀，并且能够停在几纳米的栅介质上）</li><li>利用栅掩蔽形成自对准的源漏轻掺杂区（LDD Implants），也叫源漏延伸（extension）区。为了进一步优化栅下沟道区的杂质分布，分别用光刻胶保护住PMOS区域和NMOS区域，采用大角度倾斜注入的办法分别对PMOS和NMOS栅的侧下方进行N型杂质和P型杂质的补充掺杂，目的是优化器件的串联电阻和防穿通性能</li><li>形成栅两侧的Si3N4 spacer层（Sidewall Spacer），首先淀积各向同性的氮化硅，然后RIE各向异性刻蚀，把栅和源漏表面的氮化硅刻蚀掉，保留栅侧面的氮化硅。Spacer层起到栅和源漏接触之间的绝缘</li><li>利用带Spacer层的栅作为掩蔽，来注入形成自对准的源漏接触掺杂区（S/D Implants）</li><li>制备自对准硅化物（如TiSi2），形成欧姆接触（Contact Formation）</li><li>形成多层金属互联</li><li>制作钝化层</li><li>I/O引出Pad<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/7HcTYkt.png" alt="Halo注入" title="">                </div>                <div class="image-caption">Halo注入</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/62NsBsK.png" alt="形成多层金属互联" title="">                </div>                <div class="image-caption">形成多层金属互联</div>            </figure></li></ol></li></ol><h2 id="双极性集成电路的工艺集成"><a href="#双极性集成电路的工艺集成" class="headerlink" title="双极性集成电路的工艺集成"></a>双极性集成电路的工艺集成</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/P2fWqyU.png" alt="双极集成电路" title="">                </div>                <div class="image-caption">双极集成电路</div>            </figure><ol><li>优势：高速，驱动能力强</li><li>缺点：功耗大，集成度差</li><li>工艺<ol><li>制作埋层</li><li>生长n型外延层</li><li>形成横向氧化物隔离区</li><li>形成基区</li><li>形成接触孔</li><li>形成发射区</li><li>金属化</li><li>合金化</li><li>形成钝化层</li></ol></li></ol><h2 id="CMOS-scaling中的若干问题"><a href="#CMOS-scaling中的若干问题" class="headerlink" title="CMOS scaling中的若干问题"></a>CMOS scaling中的若干问题</h2><ol><li>特征尺寸不断缩小的背后，伴随着新材料、新结构、新工艺不断的引入。<ol><li>180nm：Saclicide中硅化物材料用CoSi2替代TiSi2</li><li>130nm：采用Cu布线替代Al布线</li><li>90nm：引入应变Si沟道；更多的采用NiSi；在Cu布线中引入Low-k介质</li><li>45nm：引入High-k栅介质；光刻版引入DFM（Design for manufacture）</li><li>32nm：引入浸润式光刻（Immersion）</li><li>22nm：光刻采用双曝光技术（DPT）；金属栅</li><li>14-16nm：放弃一直沿用的“平面器件结构”，引入FinFET（multi-gate）结构器件</li></ol></li><li>Gate-last技术：为了避免源漏自对准注入之后的高温退火对金属栅和high-k介质的影响，采用先制备一个替代栅用于形成自对准源漏，之后再填充介质、CMP露出替代栅，腐蚀掉替代栅，并替换成金属栅<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/z313zxt.png" alt="FinFET器件结构" title="">                </div>                <div class="image-caption">FinFET器件结构</div>            </figure></li><li>平面结构MOS器件，栅控是在沟道一侧完成的，而FinFET的栅控是两侧同时进行的，这样在同样Cox下，它的栅控能力得到很大的改进</li><li>为什么14-16nm工艺代需要采用FinFET器件结构<ol><li>对于20-22nm技术代，栅介质的EOT要降到0.4nm左右，即使采用HfO2高k介质，其物理厚度也仅1.6nm，已经接近了量子遂穿的极限，栅介质EOT的压力使得16nm以后需采用FinFET（multi-gate）器件结构</li></ol></li><li>进一步Scaling Down的主要挑战<ol><li>目前无法批量实现亚14nm的光刻分辨率：电子束光刻的速度太慢，无法满足量产，EUV光刻技术迟迟不能取得突破</li><li>随着尺寸缩小，沟道迁移率急剧下降，需要引进新的高迁移率沟道材料：在Si衬底上外延新材料已经相应的栅和源漏优化都是繁重的工作</li><li>需要采用更新的器件结构，一方面适应进一步提高器件栅控能力的要求，另一方面适应进一步降低器件电路工作电压的要求</li></ol></li><li>可能的新沟道材料<ol><li>NMOS器件沟道用化合物材料，如InAs</li><li>PMOS器件沟道用Ge材料</li></ol></li></ol><h2 id="基本的CMOS工艺"><a href="#基本的CMOS工艺" class="headerlink" title="基本的CMOS工艺"></a>基本的CMOS工艺</h2><ol><li>N阱离子注入</li><li>同时进行推进和氧化</li><li>去除氮化硅保护膜</li><li>制作AA区和LOCOS隔离</li><li>针对阈值电压调节的离子注入</li><li>栅极氧化以多晶硅栅制备</li><li>源漏分别做离子注入</li><li>ILD淀积保护膜，打通孔</li><li>布第一层金属，钝化膜</li></ol><h2 id="闩锁效应"><a href="#闩锁效应" class="headerlink" title="闩锁效应"></a>闩锁效应</h2><ol><li>闩锁效应是由NMOS的有源区、P衬底、N阱、PMOS的有源区构成的n-p-n-p结构产生的，当其中一个三极管正偏时，就会构成正反馈形成闩锁。</li><li>MOS工艺含有寄生的双极型晶体管。在CMOS工艺下，阱与衬底结合会导致寄生的n-p-n-p结构。这些结构会导致VDD和VSS线的短路，从而通常会破坏芯片，或者引起系统错误。</li><li>避免闩锁的方法就是要减小衬底和N阱的寄生电阻，使寄生的三极管不会处于正偏状态</li><li>防御措施：<ol><li>在输入端和输出端加钳位电路，使输入和输出不超过不超过规定电压</li><li>芯片的电源输入端加去耦电路，防止VDD端出现瞬间的高压</li><li>在VDD和外电源之间加限流电阻，即使有大的电流也不让它进去</li></ol></li></ol><h2 id="双阱工艺（Twin-Well）"><a href="#双阱工艺（Twin-Well）" class="headerlink" title="双阱工艺（Twin-Well）"></a>双阱工艺（Twin-Well）</h2><ol><li>传统的单阱工艺，器件部分需要8~10个Mask</li><li>现代的双阱工艺，器件部分需要9~10个Mask<ol><li>N阱掩膜</li><li>P阱掩膜</li><li>有源区掩膜</li><li>p场注入掩膜</li><li>耗尽型n管掩膜</li><li>多晶硅栅掩膜</li><li>n+源漏注入掩膜</li><li>p+源漏注入掩膜</li><li>接触孔掩膜</li></ol></li><li>双阱cmos工艺采用p型硅晶圆片作为衬底，在衬底上做出N阱，用于制作PMOS晶体管，在衬底上做出p阱，用于制作nMOS晶体管。 </li><li>相比单阱工艺，双阱工艺的优势：NMOS和PMOS能够单独做优化。但是双阱工艺占用面积更大，工艺更复杂</li></ol><h2 id="传统NPN-BJT工艺流程（6-7个Mask）"><a href="#传统NPN-BJT工艺流程（6-7个Mask）" class="headerlink" title="传统NPN BJT工艺流程（6~7个Mask）"></a>传统NPN BJT工艺流程（6~7个Mask）</h2><ol><li>埋层注入（n+），需要掩膜</li><li>n-Si外延层生长</li><li>氧化与guard ring隔离，需要掩膜</li><li>基区离子注入，需要掩膜</li><li>发射极和集电极离子注入，需要掩膜</li><li>形成基区，发射区，集电区的接触孔，金属的图形转移，需要掩膜</li><li>制作钝化层，需要掩膜</li><li>金属化，需要掩膜</li></ol><h2 id="自对准BJT工艺"><a href="#自对准BJT工艺" class="headerlink" title="自对准BJT工艺"></a>自对准BJT工艺</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/ua0pGfz.png" alt="高性能BJT结构" title="">                </div>                <div class="image-caption">高性能BJT结构</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/rG85e9z.png" alt="自对准BJT工艺" title="">                </div>                <div class="image-caption">自对准BJT工艺</div>            </figure><ol><li>特点：<ol><li>利用多晶硅做发射极，提高了器件性能</li><li>埋层集电极</li><li>自对准多晶硅基极</li><li>STI/LOCOS隔离</li><li>需要10~11层的Mask</li><li>器件密度不如CMOS，成本比CMOS高</li></ol></li><li>主要用途：<ol><li>射频器件，工作频率可以做到10~30GHz</li><li>大驱动能力的模拟器件</li></ol></li><li>工艺<ol><li>P-硅衬底上制作埋层集电极</li><li>n-Si外延层生长</li><li>LOCOS隔离</li><li>生长一层薄的氧化层，有源区图形化</li><li>淀积P+多晶硅，然后在上面淀积一层LTO</li><li>刻蚀，暴露有源区</li><li>制作侧墙spacer（先LTO在回刻）</li><li>淀积n+多晶硅，图形化后作为发射极</li><li>热退火，将重掺杂的n多晶硅和p多晶硅中的杂质扩散到衬底中形成发射区与基区</li></ol></li></ol><h2 id="BiCMOS工艺（BJT-CMOS）"><a href="#BiCMOS工艺（BJT-CMOS）" class="headerlink" title="BiCMOS工艺（BJT+CMOS）"></a>BiCMOS工艺（BJT+CMOS）</h2><ol><li>最复杂的工艺技术，不是市场主流，制约该工艺的瓶颈是BJT</li><li>需要约15层的Mask来制作器件</li><li>集成了CMOS低功耗的特点与BJT高速的特点</li><li>随着CMOS器件尺寸逐步减小，BiCMOS工艺的优势越来越弱</li></ol><h2 id="Device-Scaling要求"><a href="#Device-Scaling要求" class="headerlink" title="Device Scaling要求"></a>Device Scaling要求</h2><ol><li>沟道表面有一定的势垒，减小漏电流</li><li>更好的栅控能力（比如使用Multi-gate工艺）</li><li>方案：<ol><li>增加Cox（降低tox或者使用high-k介质材料）</li><li>浅结（降低源漏对沟道的影响，增加栅对沟道的影响）</li><li>增加沟道参杂</li></ol></li><li>问题<ol><li>沟道的载流子散射增加了，降低了迁移率</li><li>可靠性降低了，器件变小，电场增加了，更容易击穿，可以通过降低电压来维持稳定性</li><li>浅结带来的源漏的寄生电阻的增加</li></ol></li></ol><h2 id="短沟道器件结构"><a href="#短沟道器件结构" class="headerlink" title="短沟道器件结构"></a>短沟道器件结构</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/7aAjDdU.png" alt="短沟道器件结构" title="">                </div>                <div class="image-caption">短沟道器件结构</div>            </figure><ol><li>为了抑制段沟道效应，采用了很多手段来优化栅极，源漏以及沟道的组成<ol><li>栅极材料的选择</li><li>沟道掺杂表面浓度低，底下浓度高</li><li>halo-implant来避免沟道底部的本体穿通（阻挡S/D对沟道的影响，通过大角度的围绕着沟道的离子注入）</li><li>浅的源漏延伸<ol><li>浅结</li><li>掺杂浓度低</li><li>降低了S/D串联电阻</li><li>LDD降低了耗尽区的电场强度，减少了热载流子影响，优化了源漏电场分布</li></ol></li></ol></li></ol><h2 id="倒退阱（Retro-grade-Well）"><a href="#倒退阱（Retro-grade-Well）" class="headerlink" title="倒退阱（Retro-grade Well）"></a>倒退阱（Retro-grade Well）</h2><ol><li>一般的，沟道表面参杂浓度会更高，但是在倒退阱中，表面掺杂浓度低于沟道参杂浓度</li><li>这样会提高载流子迁移率，增加对闩锁效应和本体穿通的体抗力</li><li>制备手段<ol><li>高能量的深离子注入</li><li>epi-wafer上的外延生长</li></ol></li></ol><h2 id="栅介质材料"><a href="#栅介质材料" class="headerlink" title="栅介质材料"></a>栅介质材料</h2><ol><li>high-k介质材料通常使用的淀积工艺：ALD和MOCVD</li><li>通常high-k材料与Si的界面接触特性不好</li><li>High-k与金属的兼容性不好</li><li>High-k的热稳定性不好</li><li>要求high-k介质薄膜很薄</li></ol><h2 id="N-多晶硅栅与N-P-多晶硅栅"><a href="#N-多晶硅栅与N-P-多晶硅栅" class="headerlink" title="N+多晶硅栅与N+/P+多晶硅栅"></a>N+多晶硅栅与N+/P+多晶硅栅</h2><ol><li>N+多晶硅栅<ol><li>使用广泛，因为工艺简单</li><li>在淀积多晶硅栅的同时原位重掺杂P元素</li><li>PMOSFETs需要阈值电压调节注入</li><li>问题（主要原因在于n+与n和n+与p的功函数差很大）：<ol><li>大的漏电流</li><li>严重的本体穿通问题</li></ol></li></ol></li><li>P+/N+多晶硅栅<ol><li>NMOS用N+多晶硅，PMOS用P+多晶硅</li><li>降低了漏电流和本体穿通的几率</li><li>对短沟道器件很有必要</li><li>源漏离子注入的同时可以进行多晶硅参杂，可以实现对称的沟道表面</li><li>问题<ol><li>硼渗透问题，解决方法：多晶硅分层，SiO2中掺N</li></ol></li></ol></li></ol><h2 id="金属栅与High-k"><a href="#金属栅与High-k" class="headerlink" title="金属栅与High-k"></a>金属栅与High-k</h2><ol><li>多晶硅与high-k介质兼容性不好的原因：<ol><li>多晶硅栅的电势降落导致EOT增大</li><li>多晶硅与high-k界面的不稳定性</li></ol></li><li>双金属栅工艺<ol><li>为了NMOS与PMOS的阈值电压对称，需要使用不同功函数的金属</li><li>MOS晶体管自对准工艺需要改进，变成：Gate-last 工艺</li></ol></li><li>金属栅工艺流程<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/1cYBrSt.png" alt="金属栅制备流程1" title="">                </div>                <div class="image-caption">金属栅制备流程1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/h0K4joj.png" alt="金属栅制备流程2" title="">                </div>                <div class="image-caption">金属栅制备流程2</div>            </figure><ol><li>标准的STI隔离，双阱和沟道的掺杂</li><li>ALD一层high-k介质膜</li><li>LPCVD多晶硅牺牲层，并在两侧形成侧墙</li><li>源漏掺杂，并未PMOS的源漏外延生长SiGe层（给Si沟道引入压应力，空穴迁移率增加）<ol><li>用应力的方式增强沟道迁移率，提高驱动电流，降低漏电流</li><li>SiGe外延属于异质外延，造成晶格错位</li><li>另外一种引入应力的方式是在NMOS外面包一层Si3N4，给沟道带来张应力，电子迁移率增加</li></ol></li><li>CVD淀积氧化层，接着CMP平坦化</li><li>将多晶硅牺牲层刻蚀掉</li><li>选择性淀积PMOS的第一层金属（与P-si有小的功函数差）</li><li>淀积NMOS的第一层金属（与N-si有小的功函数差）</li><li>填充Al，然后平坦化</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;信息时代&quot;&gt;&lt;a href=&quot;#信息时代&quot; class=&quot;headerlink&quot; title=&quot;信息时代&quot;&gt;&lt;/a&gt;信息时代&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;微电子产业是信息时代的基础&lt;/li&gt;
&lt;li&gt;基于硅的晶体管是最基本的信息载体&lt;/li&gt;
&lt;li&gt;以硅/半导体为
      
    
    </summary>
    
      <category term="Microelectronics" scheme="https://suda-morris.github.io/categories/Microelectronics/"/>
    
    
      <category term="Micromaching" scheme="https://suda-morris.github.io/tags/Micromaching/"/>
    
  </entry>
  
  <entry>
    <title>Coetex-M0 Introduction</title>
    <link href="https://suda-morris.github.io/2015/10/06/cortex-m0-introduction/"/>
    <id>https://suda-morris.github.io/2015/10/06/cortex-m0-introduction/</id>
    <published>2015-10-06T04:23:50.000Z</published>
    <updated>2018-07-05T01:38:09.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ARM体系变种"><a href="#ARM体系变种" class="headerlink" title="ARM体系变种"></a>ARM体系变种</h2><ol><li>M变种：<ol><li>长乘法操作：32位整数乘以32位整数，生成64位整数</li><li>长乘加操作：32位整数乘以32位整数，加上32位整数，生成64位整数</li></ol></li><li>T变种：<ol><li>Thumb指令集是ARM指令集的一个子集重新编码而成的，它使ARM更加高效地进行运作</li></ol></li><li>E变种：<ol><li>增加了新的16位数据乘法与乘加操作指令</li><li>实现饱和的带符号数的加减法操作指令</li><li>进行双字数据操作的指令，包含LDRD、STDR、MCRR\MRRC</li><li>cache预取指令PLD</li></ol></li><li>J变种：<ol><li>Jazelle技术：将Java代码运行速度提高了8倍，功耗降低了80%</li></ol></li><li>SIMD变种：<ol><li>可同时进行两个16位操作数或者4个8位操作数的运算</li><li>用户可以定义饱和运算模式</li><li>32位乘以32位的小数MAC</li><li>音频\视频处理性能提高了4倍</li><li>提供小数算数运算</li><li>两套16位操作数的乘加\乘减运算</li></ol></li></ol><h2 id="ARM处理器系列"><a href="#ARM处理器系列" class="headerlink" title="ARM处理器系列"></a>ARM处理器系列</h2><ol><li>ARM7系列<ol><li>小型、快速、低能耗、集成式的RISC芯片</li><li>冯诺依曼体系结构</li><li>三级流水线制</li><li>优秀的调试机制</li></ol></li><li>ARM9、ARM9E系列<ol><li>哈佛体系结构：这种体系结构是一种将程序指令存储和数据存储分开的存储器结构，是一种并行体系结构</li><li>支持32位的ARM指令和16位Thumb指令</li><li>支持一般的操作系统</li><li>五级流水处理及分离的Cache结构</li><li>ARM9E内核在ARM9内核的基础上增加了紧密耦合存储器的TCM及DSP部分</li></ol></li><li>ARM10E系列<ol><li>支持AMBA总线接口（包含AHB，ASB总线）</li><li>六级流水线制</li><li>包含DSP指令集</li><li>可选浮点协处理器</li><li>统一的数据cache和指令cache</li><li>能够支持多种商用操作系统</li></ol></li><li>ARM11系列(ARM V6结构)<ol><li>针对媒体处理的SIMD</li><li>用以提高安全性能的TrustZone技术</li><li>智能能源管理IEM</li><li>系统多处理技术</li></ol></li><li>SecurCore系列<ol><li>采用软内核技术</li><li>提供面前智能卡和低成本的存储保护单元</li><li>可集成用户自己的安全特性和其他处理器</li><li>极具安全性</li></ol></li><li>Cortex系列处理器<ol><li>ARM公司在经典处理器ARM11以后的产品改用Cortex命名，并分成A、R和M三类，旨在为各种不同的市场提供服务</li><li>A系列面向尖端的基于虚拟内存的操作系统和用户应用</li><li>R系列针对实时系统</li><li>M系列针对成本和功耗敏感的MCU和终端应用</li></ol></li></ol><h2 id="Cortex-M0-M0"><a href="#Cortex-M0-M0" class="headerlink" title="Cortex-M0/M0+"></a>Cortex-M0/M0+</h2><ol><li>CortexM0/M0+均是ARMv6M架构,均支持Thumb指令集，支持NVIC和WIC，但不支持Thumb2指令集，其中M0是三级流水线架构，M0+是二级流水线架构</li><li>CortexM3，CortexM4均是ARMv7M架构，均支持Thumb，Thumb2指令集，支持NVIC和WIC；CortexA5，CortexA8，CortexA9均是ARMv7A架构</li><li>存储器模型：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/KKgz65f.png" alt="ARM CortexM存储器模型" title="">                </div>                <div class="image-caption">ARM CortexM存储器模型</div>            </figure><ol><li>4GB可寻址线性空间</li><li>标准实现，适用于所有Cortex-M系列</li><li>无须paging和banking</li><li>软件访问可访问性</li></ol></li><li>两种工作模式<ol><li>Thread模式</li><li>Handler模式</li></ol></li><li>异常模型<ol><li>异常发生-&gt;加载向量列表-&gt;异常处理-&gt;返回</li></ol></li></ol><h2 id="ARM-Cortex-M0-寄存器"><a href="#ARM-Cortex-M0-寄存器" class="headerlink" title="ARM Cortex-M0+寄存器"></a>ARM Cortex-M0+寄存器</h2><ol><li>32位位宽寄存器：<ol><li>13个通用寄存器：<ol><li>R0-R7（Low registers）</li><li>R8-R12(High registers)</li></ol></li><li>3个特殊用处寄存器<ol><li>SP-R13，初始值：0x00000000</li><li>LR-R14</li><li>PC-R15，初始值0x00000004,Bit[0]为1，表示当前为Thumb代码</li></ol></li><li>特殊寄存器<ol><li>PSR（Program Status Register）</li><li>PRIMASK（Interrupt mask register），仅有Bit[0],值为1表示关闭所有中断，只有NMI和硬件错误才能被响应，缺省值为0</li><li>CONTROL（control register），只有Bit[0]（定义权限级别，0表示特权级线程模式，1表示普通线程模式，所有的Handler模式都是特权级模式）和Bit[1]（选择当前使用哪个栈指针，0表示选择主栈指针MSP，1表示选择进程栈指针PSP）</li></ol></li></ol></li><li>寄存器使用方法<ol><li>R0-R3：传递函数参数，返回函数结果，因此也称为a1-a4；也可用于程序内部保存临时变量</li><li>R4-R11：保存程序内部的变量值，因此又称为v1-v8，其中r9是个平台相关的寄存器，需要半导体厂商自己定义</li><li>R12-R15：专门用途寄存器，R12-IP</li></ol></li><li>程序状态寄存器PSR<ol><li>APSR(Application Program Status Register)，包括Negative，Zero，Carry和Overflow的标志位</li><li>IPSR(Interrupt Program Status Register)，包括Exception number(前6位)</li><li>EPSR(Execution Program Status Register)，包括Thumb code is executed的指示位</li><li>程序状态寄存器的访问指令：MSR和MRS</li></ol></li></ol><h2 id="ARM-Cortex-M0-指令集"><a href="#ARM-Cortex-M0-指令集" class="headerlink" title="ARM Cortex-M0+指令集"></a>ARM Cortex-M0+指令集</h2><ol><li>每条Thumb指令有相同处理器模型所对应的32位ARM指令，比如可以将Thumb指令ADD Rd，#immed_8转换为ARM指令ADD Rd，Rd，#immed_8</li><li>Thumb的56条指令分类：<ol><li>存储器访问指令<ol><li>ADR:Generate PC-relative address</li><li>LDM:Load Multiple registers</li><li>LDR{type}:Load Register using immediate offset</li><li>LDR{type}:Load Register using register offset</li><li>LDR:Load Register from PC-relative address</li><li>POP:Pop register from stack</li><li>PUSH:Push registers onto stack</li><li>STM:Store Multiple registers</li><li>STR{type}:Store Register using immediate offset</li><li>STR{type}:Store Register using register offset</li></ol></li><li>数据处理指令</li><li>分支和控制指令<ol><li>B{cc}:Branch {conditionally},如果使用了条件执行，那么跳转范围在-256~254字节内；如果没有使用条件执行，那么跳转范围在±1M内</li><li>BL:Branch with Link,跳转范围±16MB</li><li>BLX:Branch indirect with Link</li><li>BX:Branch indirect</li></ol></li><li>杂项指令<ol><li>MRS:Move from special register to register</li><li>MSR:Move from register to special register</li><li>CPSID:Change Processor State,Disable Interrupts,C语言操作函数:void __disable_irq(void);</li><li>CPSIE:Change Processor State,Enable Interrupts,C语言操作函数：void __enable_irq(void);</li><li>WFE:Wait For Event,C语言操作函数：void __WFE(void);</li><li>WFI:Wait For Interrupt,C语言操作函数：void __WFI(void);</li><li>NOP:No Operation,C语言操作函数：void __NOP(void);</li><li>SVC:Supervisor Call</li></ol></li></ol></li></ol><h2 id="ARM-Cortex-M0-外设"><a href="#ARM-Cortex-M0-外设" class="headerlink" title="ARM Cortex-M0+外设"></a>ARM Cortex-M0+外设</h2><ol><li>外设的映射<ol><li>Private Peripheral Bus（PPB）的映射(0xE0000000-0xE00FFFFF)</li><li>SysTick:24位计数器，扩展的NVIC特性</li><li>NVIC：中断设置与配置</li><li>SCB:提供系统实现和系统控制；包括配置、控制和上报系统异常</li><li>MPU（Memory Protection Unit）</li></ol></li><li>NVIC接口API：<ol><li>void NVIC_EnableIRQ(IRQn_t IRQn);</li><li>void NVIC_DisableIRQ(IRQn_t IRQn);</li><li>uint32_t NVIC_GetPendingIRQ(IRQn_t IRQn);</li><li>void NVIC_SetPendingIRQ(IRQn_t IRQn);</li><li>void NVIC_ClearPendingIRQ(IRQn_t IRQn);</li><li>void NVIC_SetPriority(IRQn_t IRQn,uint32_t priority);</li><li>uint32_t NVIC_GetPriority(IRQn_t IRQn);</li><li>void NVIC_SystemReset(void);请求一次系统复位</li></ol></li></ol><h2 id="ARM-Cortex-M0-可执行镜像"><a href="#ARM-Cortex-M0-可执行镜像" class="headerlink" title="ARM Cortex-M0+可执行镜像"></a>ARM Cortex-M0+可执行镜像</h2><ol><li>ELF：定义了对象文件的内容和格式</li><li>BIN：直接的内存镜像</li><li>HEX：包含了目标程序镜像的存储地址</li><li>AXF：ARM工具链产生，BIN文件内容+调试信息</li></ol><h2 id="WEAK和alias属性"><a href="#WEAK和alias属性" class="headerlink" title="WEAK和alias属性"></a>WEAK和alias属性</h2><ol><li>当两个或者两个以上行数具有相同的名字，并其中之一声明为weak属性时，则不会引发重定义错误。连接器会忽略弱属性的函数，而使用普通的函数来解析所有对这些符号的引用</li><li>如果普通的函数不可用时，连接器会使用weak属性的函数</li><li>alias属性：声明别名，当weak和alias属性连用时，可以声明弱别</li></ol><h2 id="错误异常"><a href="#错误异常" class="headerlink" title="错误异常"></a>错误异常</h2><ol><li>优先级仅次于复位和NMI</li><li>引起错误异常的来源：<ol><li>Memory访问异常</li><li>程序异常</li></ol></li><li>错误异常分析：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/DrQtd2F.png" alt="错误异常分析" title="">                </div>                <div class="image-caption">错误异常分析</div>            </figure><ol><li>当异常发生时，处理器首先会保护现场，因此可以得到当前寄存器的值，以及异常发生前被压栈的寄存器的值</li><li>判断PC的返回值是否合法，存储器的访问地址是否正确，栈地址是否正确以及是否出现了溢出</li><li>访问PSR寄存器来获取当前处理器的状态信息</li></ol></li></ol><h2 id="锁定"><a href="#锁定" class="headerlink" title="锁定"></a>锁定</h2><ol><li>锁定（Lockup）的发生：<ol><li>在处理NMI或者HardFault时产生错误异常</li><li>异常处理返回，当PSP出栈时，系统总线错误</li></ol></li><li>锁定的退出：<ol><li>复位</li><li>Debugger</li></ol></li><li>锁定的预防：<ol><li>尽量缩短NMI和HardFault异常的处理时间</li><li>在进入HardFault异常处理前，添加汇编代码，检查SP指针</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ARM体系变种&quot;&gt;&lt;a href=&quot;#ARM体系变种&quot; class=&quot;headerlink&quot; title=&quot;ARM体系变种&quot;&gt;&lt;/a&gt;ARM体系变种&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;M变种：&lt;ol&gt;
&lt;li&gt;长乘法操作：32位整数乘以32位整数，生成64位整数&lt;/li&gt;
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="ARM" scheme="https://suda-morris.github.io/tags/ARM/"/>
    
  </entry>
  
  <entry>
    <title>W7500 Introduction</title>
    <link href="https://suda-morris.github.io/2015/10/04/w7500/"/>
    <id>https://suda-morris.github.io/2015/10/04/w7500/</id>
    <published>2015-10-04T14:51:33.000Z</published>
    <updated>2018-07-05T01:38:09.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WIZwiki-W7500平台介绍"><a href="#WIZwiki-W7500平台介绍" class="headerlink" title="WIZwiki-W7500平台介绍"></a>WIZwiki-W7500平台介绍</h2><ol><li>W7500单芯片解决方案：ARM Cortex-M0，48MHz，128KB Flash，16KB RAM，硬件TCP/IP内核，32KB TCP/IP专属RAM，MII接口，8个socket</li><li>程序下载方法：<ol><li>CMSIS-DAP USB下载</li><li>利用串口的ISP固件下载方式(按住boot键不放，按一下sw键进入boot模式)</li></ol></li><li>SWD(Serial Wire Debug)调试</li><li>2路SPI接口，2路I2C接口，3路UART接口，8路ADC(12bit，1Msps)，6路DMA控制器，1个32位的RNG（随机数生成器）</li><li>外部PHY芯片：IP101GA<ol><li>支持自动MDI / MDIX功能以简化网络的安装以及降低系统维护成本，即自动识别交叉线与直连线 </li><li>提供媒体独立接口（MII）或简化媒体独立接口（RMII）与不同类型的10/100Mbps的媒体访问控制器（MAC）连接</li><li>支持MDC和MDIO与MAC沟通 </li></ol></li><li>CMSIS-DAP实现芯片：LPC11U35FHI33/501<ol><li>CMSIS-DAP功能：<ol><li>通过USB烧写固件到W7500</li><li>利用W7500的UART1，通过USB接口与外界进行串口通讯（PC端需要安装驱动，驱动安装成功后会虚拟出串口名如：mbed Seral Port(COMn)）</li></ol></li></ol></li><li>开发板框图：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/YbsZrdE.png" alt="板子框图" title="">                </div>                <div class="image-caption">板子框图</div>            </figure></li><li>W7500芯片框图：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/pLcN78g.png" alt="W7500芯片框图" title="">                </div>                <div class="image-caption">W7500芯片框图</div>            </figure></li></ol><h2 id="MII"><a href="#MII" class="headerlink" title="MII"></a>MII</h2><ol><li>MII即媒体独立接口，也叫介质无关接口，它是IEEE-802.3定义的以太网行业标准，它包括一个数据接口，以及一个MAC和PHY之间的管理接口,MAC与PHY间的管理接口一般是MDIO</li><li>数据接口包括分别用于发送器和接收器的两条独立信道，每条信道都有自己的数据、时钟和控制信号。</li><li>管理接口是个双信号接口：一个是时钟信号，另一个是数据信号。通过管理接口，上层能监视和控制PHY</li><li>MII数据接口总共需要16个信号：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/WkMJaE8.jpg" alt="MII接口" title="">                </div>                <div class="image-caption">MII接口</div>            </figure><ol><li>Tx_CLK/Rx_CLK：分别是Tx和Rx的时钟信号。均由PHY驱动</li><li>TxD[0···3]/RxD[0···3]：分别是Tx和Rx的数据传输线。TxD是控制器驱动，RxD是PHY驱动</li><li>Tx_EN/Rx_DV：分别是Tx和Rx的开关。这两根线都是PHY驱动。只有在Tx_EN有效时，TxD才会被PHY接收；只有在Rx_DV有效时，RxD才会被控制器接收</li><li>Tx_ER/Rx_ER：分别是Tx和Rx的报错线。这两根线都是PHY驱动。即使是在Tx_EN或Rx_DV期间，只要此两根线有效，则出错的那个周期所传数据无效。10Mb以太网传输时，ER信号不影响正常传输，若不使用ER线，需将其接地</li><li>CRS/COL：监听介质是否空闲/监听是否有冲突发生。这两根线都是由PHY驱动，并且只在半双工模式下有效</li></ol></li><li>MII控制接口：MDC和MDIO。通过它，控制芯片可以访问PHY的寄存器(100M物理层芯片中介绍的寄存器组，但不仅限于100M物理层芯片，10M物理层芯片也可以拥有这些寄存器)，并通过这些寄存器来对物理层芯片进行控制和管理<ol><li>MDC：管理接口时钟。它是由控制器驱动，与TX_CLK和RX_CLK无任何关系</li><li>MDIO：用来传送MAC层的控制信息和物理层的状态信息。它是一根双向的数据线。因MDIO在某个时钟周期内会空闲，呈高阻状态，故使用时须将其<strong>上拉</strong></li></ol></li><li>事实上，一个控制器，可以通过Management Interface来管理32个PHY。即，MDC和MDIO是可以复用的。</li><li>MAC主要是通过MDIO（以MDC为时钟）来读写PHY的寄存器，MDIO上数据帧的格式如下：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/BTLzrtr.jpg" alt="MDIO上数据帧的格式" title="">                </div>                <div class="image-caption">MDIO上数据帧的格式</div>            </figure></li><li>数据开始前，会发32个1，然后数据开始时先发送一个0，然后恢复到1；接下来两位，10表示读，01表示写；紧接着的5为是PHY地址；下面5位是寄存器地址；接下来两位表示状态转换域，若为读操作，则第一比特时MDIO为高阻态，第二比特时由物理层芯片使MDIO置“0”。若为写操作，则MDIO仍由MAC层芯片控制，其连续输出“10”两个比特。;接下来是16位的数据；空闲时线上为高阻</li><li>以前的10M的MAC层芯片和物理层芯片之间传送数据是通过一根数据线来进行的，其时钟是10M，在100M中，如果也用一根数据线来传送的话，时钟需要100M，这会带来一些问题，所以定义了MII接口，它是用4根数据线来传送数据的，这样在传送100M数据时，时钟就会由100M降低为25M，而在传送10M数据时，时钟会降低到2.5M，这样就实现了10M和100M的兼容。</li><li>MII接口的MAC模式定义：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/e0vGKku.gif" alt="MII接口MAC模式" title="">                </div>                <div class="image-caption">MII接口MAC模式</div>            </figure></li><li>MII接口PHY模式定义：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/wB70rjr.gif" alt="MII接口PHY模式" title="">                </div>                <div class="image-caption">MII接口PHY模式</div>            </figure></li><li>在MII接口的连线中，如果TX_ER信号线没有用到，必须将它下拉接地。</li><li>RXD_DV同步于RX_CLK，被PHY驱动，它的作用如同于发送通道中的TX_EN，不同的是在时序上稍有一点差别：为了让数据能够成功被RS接收，要求RXD_DV有效的时间必须覆盖整个FRAME的过程</li><li>MDC：管理接口的时钟，它是一个非周期信号，信号的最小周期（实际是正电平时间和负电平时间之和）为400ns，最小正电平时间和负电平时间为160ns，最大的正负电平时间无限制。它与TX_CLK和RX_CLK无任何关系。</li><li>MDIO是一根双向的数据线。用来传送MAC层的控制信息和物理层的状态信息。MDIO数据与MDC时钟同步，在MDC上升沿有效。</li><li>MDIO数据帧的时序关系：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/S4p240T.gif" alt="MDIO数据帧的时序关系" title="">                </div>                <div class="image-caption">MDIO数据帧的时序关系</div>            </figure></li><li>MII接口也有一些不足之处，主要是其接口信号线很多，发送和接收和指示接口有14根数据线(不包括MDIO接口的信号线，因为其被所有MII接口所共享)，当交换芯片的端口数据较多时，会造成芯片的管脚数目很多的问题，这给芯片的设计和单板的设计都带来了一定的问题。为了解决这些问题，人们设计了两种新的MII接口，它们是RMII接口(Reduced MII接口)和SMII接口(StreamMII接口)。这两种接口都减少了MII接口的数据线，不过它们一般只用在以太网交换机的交换MAC芯片和多口物理层芯片中，而很少用于单口的MAC层芯片和物理层芯片中。RMII接口和SMII接口都可以用于10M以太网和100M以太网，但不可能用于1000M以太网，因为此时时钟频率太高，不可能实现。</li></ol><h2 id="中断和事件"><a href="#中断和事件" class="headerlink" title="中断和事件"></a>中断和事件</h2><ol><li>W7500包含26路中断请求IRQ，一个非屏蔽中断NMI，一个事件信号</li><li>W7500可以处理内部事件以唤醒内核（WFE），唤醒事件可以通过如下方式产生：<ol><li>DMA进程完成之后</li></ol></li></ol><h2 id="供电"><a href="#供电" class="headerlink" title="供电"></a>供电</h2><ol><li>W7500内部嵌入一个稳压器来提供内部1.5V的电压，稳压器没有掉电模式或者休眠模式</li><li>ADC参考电压和VDD相同</li><li>W7500在系统或电源复位后会处于工作模式，当CPU停止工作时可以采用两种低功耗模式(W7500没有掉电模式)：休眠模式(Sleep)和深度休眠(Deep Sleep)</li><li>休眠模式仅仅关闭了CPU时钟，总线时钟依旧开启，深度休眠模式中总线时钟和存储器时钟都被关闭</li></ol><h2 id="TOE"><a href="#TOE" class="headerlink" title="TOE"></a>TOE</h2><ol><li>TCP/IP卸载引擎(TOE)是一个嵌入式全硬件TCP/IP以太网控制器，它可以提供更简洁的嵌入式网络接入方案。TOE提供WOL(网络唤醒)功能可以大大降低系统功耗</li><li>TOE框图：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/Mvcx1hV.png" alt="TOE区域框图" title="">                </div>                <div class="image-caption">TOE区域框图</div>            </figure></li><li>NCONFLR（网络配置锁存寄存器）用来锁定和解锁对网络配置寄存器(SIR,SUBR,GAR和SHAR)的访问。当LOCK处于ON，受保护的寄存器无法进行配置，在这种情况下，写入NCONFLR寄存器的值是0x01ACCE55，当LOCK处于OFF，受保护的寄存器可以进行配置，这是该寄存器的值为非0x01ACCE55的其他任意值。</li><li>TCKCNTR(Ticker计数寄存器)，用于向TOE内部定时器提供100us的Ticker计数。Ticker计数器单元是HCLK</li></ol><h2 id="启动顺序"><a href="#启动顺序" class="headerlink" title="启动顺序"></a>启动顺序</h2><ol><li>W7500有三种不同的启动模式，可以通过BOOT引脚和TEST引脚选定。TEST=0，BOOT=0，在主Flash存储器中执行用户代码；TEST=0，BOOT=1，W7500支持ISP功能以便于用串口控制flash</li></ol><h2 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h2><ol><li>Flash存储器由长度为32为宽的存储单元构成，可以用于存储代码或者数据</li><li>存储器的构成基于一个主Flash存储器块，包含256字节的512扇区，或者4KB的32个块。块和扇区停工读/写保护</li></ol><h2 id="时钟复位发生器CRG"><a href="#时钟复位发生器CRG" class="headerlink" title="时钟复位发生器CRG"></a>时钟复位发生器CRG</h2><ol><li>CRG包括PLL和POR</li><li>三种类型的复位：<ol><li>外部复位，上电复位，系统复位</li><li>系统复位是当下面的情况发生时产生复位：<ol><li>看门狗事件</li><li>重映射之后</li><li>软件复位(在Cortex-M0的SYSRESETREQ为)</li></ol></li></ol></li><li>两种时钟源可以用来驱动系统时钟：<ol><li>外部振荡器时钟(8MHz~24MHz)(OCLK)</li><li>内部8MHz RC振荡器(RCLK)</li></ol></li><li>RNGCLK只有一个源(pll输出)并且没有预分频器</li><li>CRG框图：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/xZTW330.png" alt="CRG框图" title="">                </div>                <div class="image-caption">CRG框图</div>            </figure></li><li>监视时钟源：    <ol><li>监视引脚：PA_02</li><li>配置寄存器：MONCLK_SSR</li></ol></li></ol><h2 id="随机数发生器RNG"><a href="#随机数发生器RNG" class="headerlink" title="随机数发生器RNG"></a>随机数发生器RNG</h2><ol><li>RNG是一个32位随机数发生器，当上电复位时，RNG会产生一个上电随机数，RNG可以通过软件来运行/停止。RNG的初始值和多项式值可以通过软件来更新</li></ol><h2 id="外部中断"><a href="#外部中断" class="headerlink" title="外部中断"></a>外部中断</h2><ol><li>不管任何功能引脚功能设置，功能引脚都可以被用作一个外部中断源</li><li>外部中断控制器的中断极性分为上升沿和下降沿</li></ol><h2 id="Pad控制器"><a href="#Pad控制器" class="headerlink" title="Pad控制器"></a>Pad控制器</h2><ol><li>W7500具有数字I/O功能引脚和数字/模拟多路复用I/O功能引脚，功能引脚的可控性特性包括上拉，下拉，驱动强度，输入开启和CMOS/Schmitt触发输入缓存</li></ol><h2 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h2><ol><li>屏蔽寄存器可将端口位视为整体而其他位不变</li><li>访问屏蔽功能允许一位或者多位在单向传输过程中读或写，这避免了基于软件的读-修改-写操作的非线程安全问题。有了访问屏蔽操作，16-bit I/O被分成两半，低字节和高字节，这个位被定义为两个数组，每一个包含256字节</li></ol><h2 id="UART"><a href="#UART" class="headerlink" title="UART"></a>UART</h2><ol><li>发送的数据存储在一个32字节的FIFO中，将需要发送的数据写入发送FIFO中，如果UART被启用，它会按照UARTxLCR_H只是的参数开始发送数据帧。数据会持续发送，直到发送FIFO为空。当有数据被写入发送FIFO或当前处于发送的过程中时，UARTxFR的BUSY位会保持为“1”，表示FIFO中有数据。</li><li>接收的数据存储在一个32字节的FIFO里面。当接收到一个起始位，它开始运行，并对UART模式中计数器的第8个周期进行采样。如果UARTRXD为“1”，证实接收到了有效的停止位。当一个完整的字符数据被接收到，数据会被存储在接收FIFO中。错误位会被存储在UARTxCR的【10：8】位置，溢出的被存储在UARTxCR的【11】位</li><li>更改UART控制寄存器的步骤：<ol><li>禁用UART</li><li>等待接收到或者发送完最后的字符</li><li>设置行控制寄存器中FEN位为0，从而刷新发送FIFO</li><li>更改UARTCR寄存器</li><li>使能UART</li></ol></li><li>W7500有个Simple Uart，其实就是UART2，用来ISP烧写程序的，一般用户不直接拿来使用</li></ol><h2 id="uDMAC"><a href="#uDMAC" class="headerlink" title="uDMAC"></a>uDMAC</h2><ol><li>共6个通道，每个通道用于管理来自某个或者多个外设的内存访问请求</li><li>不要给一个第优先级的 通道分配大不要给一个低优先级的通道分配大的R_power值，因为直到重仲裁之前来自控制器高优先级的请求都会被阻止</li><li>当N&gt;2^R，并且不是2^R的整数倍时，控制器总是会执行2^R的传输序列，直到N&lt;2^R时再传输，控制器会在DMA周期的末尾，再执行剩余N次传输</li><li>DMA周期类型：<ol><li>Invalid</li><li>Basic</li><li>Auto-request</li><li>ping-pong</li></ol></li><li>Ping-pong cycle<ol><li>DMA控制器轮流切换主、副两个数据通道，直到接收到一个无效的数据结构或者是circle_type被设置成了basic模式，或者是控制器停止了该通道的工作</li><li>当DMA使用其中一个通道进行数据传输时候，处理器可以重新配置另外一个通道的参数</li></ol></li></ol><h2 id="SSP"><a href="#SSP" class="headerlink" title="SSP"></a>SSP</h2><ol><li>SSP接口可以同具有以下接口的主句或者从机进行通讯<ol><li>摩托罗拉SPI接口</li><li>TI的同步串行接口</li><li>国家半导体的Microware接口</li></ol></li><li>SSP接口可作为主机或者从机接口，支持2MHz甚至更高的位速率</li><li>PrimeCell SSP复位之后默认是禁用状态，需要按照以下步骤进行配置：<ol><li>更改SSP控制器SSPCR0和SSPCR1来配置SSP接口外设的主从工作模式以及工作的协议标准：Motorola SPI，Texas Instruments SSP，National Semiconductor</li><li>通过更改时钟预分频寄存器SSPCRSR来将外部SSPCLK时钟进行分频，从而可以更改位速率</li></ol></li><li>有两种方法可以启动PrimeCell SSP：<ol><li>激活发送FIFO：Prime Cell SSP禁用时，可以通过写入8个16位值发送FIFO</li><li>通过发送FIFO服务请求到CPU中断</li></ol></li><li>在从机模式的操作中，为了确保正确的操作，SSPCLK必须必预期的SSPCLKIN最快频率快12倍；在主机模式的操作中，为了确保正确的操作，SSPCLK必须为预期的SSPCLKOUT最快频率的2倍。</li><li>SSPCLK的最低频率可以通过下列公式计算，两个条件必须同时被满足：<ol><li>FSSPCLK(min) &gt;= 2 x FSSPCLKOUT(max), for master mode</li><li>FSSPCLK(min) &gt;= 12 x FSSPCLKIN(max), for slave mode.</li></ol></li><li>SSPCLK的最高频率可以通过下列公式计算，两个条件必须被同时满足：<ol><li>FSSPCLK(max) &lt;= 254 x 256 x FSSPCLKOUT(min), for master mode</li><li>FSSPCLK(max) &lt;= 254 x 256 x FSSPCLKIN(min), for slave mode.</li></ol></li><li>SSPCR0寄存器被用来：<ol><li>编写穿行时钟速率</li><li>在三个协议模式中进行选择</li><li>选择合适的数据长度</li></ol></li><li>SSPCR1寄存器被用来：<ol><li>选择主/从模式</li><li>启用loopback回环测试功能</li><li>启用PrimeCell SSP外设</li></ol></li><li>位速率的产生<ol><li>串行位速率通过将输入时钟SSPCLK分频获得。首先，使用范围在2~254的偶数分频值CPSDVSR对输入时钟进行分频，CPSDVSR的值在SSPCPSR寄存器中设置。然后再使用1~256的其中一个值（即1+SCR）对时钟进一步分频T，此处SCR在SSI控制SSPCR0寄存器中设置。</li></ol></li><li>帧格式：根据所设置的数据大小，每个数据帧的长度均在4~16位之间，并且从最高有效位MSB开始发送。<ol><li>德州仪器（TI）同步串行的帧格式<ol><li>在该模式中，任何时候当SSP空闲时，SSPCLKOUT和SSPFSSOUT被强制为低电平，发送数据线SSPTx为三态。一旦发送FIFO的底部入口包含数据，SSPFSSOUT就会变为高电平并持续一个SSPCLKOUT周期。要发送的值也从发送FIFO传输到发送逻辑的穿行移位寄存器中</li></ol></li><li>Motorola SPI的帧格式<ol><li>4线接口，其中SSPFSSOUT信号用作从机选择。Motorola SPI格式的主要特性为：SSPCLKOUT信号的不活动状态和相位均通过SSPSCR0控制寄存器中的SPO和SPH来设置。</li><li>SPO，时钟极性位。当SPO时钟极性控制位为低时，它在SSPCLKOUT管脚上产生稳定的低电平值。如果SPO位为高，则在没有进行数据传输的情况下，在SSPCLKPUT管脚上产生一个稳定的高电平值。</li><li>SPH，相位控制位。SPH相位控制位用来选择捕获数据的时钟边沿并允许边沿改变状态。SPH在第一个传输位上的影响最大，因为它可以在第一个数据捕获边沿之前允许或不允许一次时钟转换。当SPH相位控制位为低时，在第一个时钟边沿转换时捕获数据。如果SPH位为高，则在第二个时钟边沿转换时捕获数据</li></ol></li><li>National Semiconductor帧格式<ol><li>National Semiconductor格式与SPI格式非常相似，不同的是其采用的是使用主-从消息传递技术的半双工模式而非全双工模式。</li><li>此穿行传输都由PrimeCell SSP向片外从器件发送8位控制字开始。在此传输过程中，PrimeCell SSP不会接收到输入的数据，在消息发送完毕后，片外从机对消息进行译码，并在PrimeCell SSP将8位控制消息的最后一位发送完成之后等待一个串行时钟周期，之后从机以请求的数据来响应。</li></ol></li></ol></li></ol><h2 id="I2C"><a href="#I2C" class="headerlink" title="I2C"></a>I2C</h2><ol><li>支持标准模式100Kbps和高速模式400Kbps</li><li>SDA是双向的串行数据线，SCL是双向的串行时钟线。总线空闲时，这两根线都为高。每次操作都是9位，包括8个数据位和1个应答位，并且发送数据前必须先传输MSB</li><li>数据有效性：在时钟的高电平周期期间，SDA线上的数据必须保持稳定，SDA线上的数据仅可在时钟SCL为低电平时改变。</li><li>所有总线传输都带有所需的应答时钟周期，该时钟周期由主机产生。在相应周期内，发送器不能执行下一操作</li><li>I2C开始条件和结束条件<ol><li>当SCL为高电平时，SDA线上由高到低的跳变被定义为开始条件，由低到高的跳变被定义为结束条件</li><li>开始条件和结束条件总是由主机产生</li><li>I2C总线在结束条件之后一段时间重新被释放。如果使用重新开始条件替代结束条件的话，I2C将会保持占用状态</li></ol></li><li>放到SDA线上的每个数据字节应该都是8位，每个字节之后跟随一个应答位。</li><li>7位地址之后的第8位是数据方向位（R/W）,0代表写操作，1代表读操作</li><li>每个字节之后都有一个应答位，应答位可以使接收者在成功接收到本字节之后，告诉发送者此数据已经被成功接收，可以发送下个字节。主机产生所有的时钟脉冲，包括应答位(第9位)的时钟脉冲</li></ol><h2 id="W7500P芯片介绍"><a href="#W7500P芯片介绍" class="headerlink" title="W7500P芯片介绍"></a>W7500P芯片介绍</h2><ol><li>IOP4IoT（Internet Offload Processor for Internet of Things）芯片，集成ARM Cortex-M0，128KB Flash，硬件TCP/IP内核，10/100M 以太网MAC与PHY，PHY符合IEEE802.3u标准，硬件TCP/IP核支持TCP、UDP、IPv4、ICMP、ARP、IGMP和PPPoE</li><li>CPU最大支持48MHz的工作频率</li><li>硬件TCP/IP核支持8个套接字，总共可以使用32KB的专用内存，物理层与数据链路层的通信接口符合MII</li><li>PHY实际上是内嵌了IC+（IP101G）芯片</li><li>除了32KB的Socket专用内存外，还有16KB的通用内存</li><li>有6KB的ROM存放boot代码</li><li>内部8MHz的RC振荡器</li><li>8路12位的ADC，采样速率1Msps</li><li>6通道DMA控制器</li><li>1路看门狗（32位的向下计数器），4路定时器（32位或者16位的下降计数器），8路PWM控制器（32位计数器，其中6位为可编程的预分频器）</li><li>3路串口（其中两路带有FIFO与流控，另一个是简单串口），2路SPI，2路I2C（主从模式均可，最大支持400Kbps）</li><li>1个伪随机数产生器</li><li>程序内存，数据内存，寄存器和IO口统一被组织在4G的线型地址空间中，所有字节按照小端格式编写</li><li>当上电时BOOT引脚和TEST引脚都为低电平时，系统进入正常工作模式；当BOOT引脚为高电平，TEST引脚为低电平，系统进入Boot模式（ISP下载）</li><li>支持25路中断请求，1路非屏蔽中断，一路内部事件信号请求（当DMA传输结束后会触发）</li><li>VDD电压范围：2.7V~5.5V，ADC的参考电压同VDD</li><li>W7500P没有power-off模式，但是有Sleep和Deep Sleep模式,Sleep模式仅停止PCU工作，Deep Sleep模式还会切断所有外设的时钟<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wizwiki.net/wiki/lib/exe/fetch.php?media=products:w7500:overview:w7500_memory_map.png" alt="W7500P内存映射图" title="">                </div>                <div class="image-caption">W7500P内存映射图</div>            </figure></li></ol><h2 id="SYSCFG-System-Configuration-Controller-的主要功能"><a href="#SYSCFG-System-Configuration-Controller-的主要功能" class="headerlink" title="SYSCFG(System Configuration Controller)的主要功能"></a>SYSCFG(System Configuration Controller)的主要功能</h2><ol><li>控制内存重映射</li><li>可以使能系统锁死后自动复位</li><li>保存着最近一次系统复位的原因信息</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" title="">                </div>                <div class="image-caption">suda-morris</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WIZwiki-W7500平台介绍&quot;&gt;&lt;a href=&quot;#WIZwiki-W7500平台介绍&quot; class=&quot;headerlink&quot; title=&quot;WIZwiki-W7500平台介绍&quot;&gt;&lt;/a&gt;WIZwiki-W7500平台介绍&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;W750
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="W7500" scheme="https://suda-morris.github.io/tags/W7500/"/>
    
  </entry>
  
  <entry>
    <title>Javascript Basic</title>
    <link href="https://suda-morris.github.io/2015/09/28/javascript/"/>
    <id>https://suda-morris.github.io/2015/09/28/javascript/</id>
    <published>2015-09-28T04:20:50.000Z</published>
    <updated>2018-07-05T01:38:09.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="与-的区别"><a href="#与-的区别" class="headerlink" title="==与===的区别"></a>==与===的区别</h2><ol><li>对于string,number等基础类型，==和===是有区别的<ol><li>不同类型间比较，==之比较“转化成同一类型后的值”看“值”是否相等，===如果类型不同，其结果就是不等</li><li>同类型比较，直接进行“值”比较，两者结果一样</li></ol></li><li>对于Array,Object等高级类型，==和===是没有区别的<ul><li>进行“指针地址”比较</li></ul></li><li>基础类型与高级类型，==和===是有区别的<ol><li>对于==，将高级转化为基础类型，进行“值”比较</li><li>因为类型不同，===结果为false</li></ol></li></ol><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ol><li>常用事件<ul><li>onClick单击事件</li><li>onMouseOver鼠标经过事件</li><li>onMouseOut鼠标移出事件</li><li>onChange文本内容改变事件</li><li>onSelect文本框选中事件</li><li>onFocus光标聚集事件</li><li>onBlur移开光标事件</li><li>onLoad网页加载事件</li><li>onUnload关闭网页事件</li></ul></li><li>事件冒泡<ul><li>由最具体的元素接收，然后逐级向上传播至最不具体的元素的节点(文档)</li></ul></li><li>事件捕获<ul><li>最不具体的节点先接收事件，而最具体的节点应该是最后接收事件</li></ul></li><li>事件处理<ol><li>HTML事件处理<ul><li>直接添加到HTML结构中</li></ul></li><li>DOM0级事件处理<ul><li>把一个函数赋值给一个事件处理程序</li><li>同一个元素多个事件会被覆盖，只有最后一个事件起作用</li></ul></li><li>DOM2级事件处理<ul><li>addEventListener(“事件名”，“事件处理函数”，“布尔值”)；</li><li>true：事件捕获</li><li>false：事件冒泡</li><li>removeEventListen();</li></ul></li><li>IE事件处理程序(IE8及以下)<ul><li>attachEvent</li><li>detachEvent</li></ul></li></ol></li><li>事件对象<ol><li>在触发DOM事件的时候都会产生一个对象</li><li>事件对象event<ol><li>type：获取事件类型</li><li>target：获取事件目标</li><li>stopPropagation()；阻止事件冒泡</li><li>preventDefault()；阻止事件默认行为(比如超链接)</li></ol></li></ol></li></ol><h2 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h2><ol><li>当网页被加载时，浏览器会创建页面的文档对象模型(Document Object Model)<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/EwSndVS.png" alt="DOM对象模型" title="">                </div>                <div class="image-caption">DOM对象模型</div>            </figure></li><li>DOM操作HTML<ol><li>改变HTML输出流：<ul><li>注意，绝对不要在文档加载完成后使用document.write(),这会覆盖该文档</li></ul></li><li>寻找元素：<ul><li>通过id找到HTML元素,document.getElementById();</li><li>通过标签名找到HTML元素,document.getElementByTagName();</li></ul></li><li>改变HTML内容<ul><li>使用属性：innerHTML</li></ul></li><li>改变HTML属性<ul><li>使用属性：attribute，例如：<code>document.getElementById(&quot;aid&quot;).href=&quot;http://www.baid.com&quot;;</code></li></ul></li><li>常用方法：<ol><li>getElementsByName();获取name</li><li>getElementsByTagName();获取元素</li><li>getAttribute();获取元素属性</li><li>setAttribute();设置元素属性</li><li>childNodes();访问子节点</li><li>parentNode();访问父节点</li><li>createElement();创建元素节点</li><li>createTextNode();创建文本节点</li><li>insertBefore();插入节点</li><li>removeChild();删除节点</li><li>offsetHeight;网页尺寸,例如：<code>var width=document.body.offsetWidth;</code></li><li>crollHeight;网页尺寸</li></ol></li><li>创建节点示例<br> <code>var body=document.body;var input=document.creatElement(&quot;input&quot;);input.type=&quot;button&quot;;input.value=&quot;按钮&quot;；body.appendChild(input);</code></li></ol></li><li>DOM操作CSS<ol><li>基本语法：<code>document.getElementById(id).style.property=new style;</code></li></ol></li><li>DOM操作事件句柄<ol><li>addEventListener();向指定元素添加事件句柄</li><li>removeEventListener();移出方法添加的事件句柄</li></ol></li></ol><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><ol><li>String对象<ol><li>字符串可以使用使用单引号或者双引号</li><li>获取字符串长度：length属性</li><li>在字符串中查找字符串的方法：indexOf(),成功返回位置，失败返回-1</li><li>内容匹配的方法：match(),成功返回匹配成功的字符串，失败返回空</li><li>替换内容的方法：replace()</li><li>字符串大小写转换：toUpperCase()/toLowerCase()</li><li>字符串转为数组：split</li></ol></li><li>Date对象<ol><li>常用方法：<ol><li>getFullYear():获取年份</li><li>getTime():获取毫秒</li><li>setFullYear():设置具体的日期</li><li>getDay():获取星期</li></ol></li></ol></li><li>Array数组对象<ol><li>数组的创建<ul><li><code>var myArray=[&quot;Hello&quot;,&quot;iwen&quot;,&quot;ime&quot;];</code></li></ul></li><li>数组的访问<ul><li>通过指定数组名以及索引号码(下标从0开始)，可以访问某个特定的元素</li></ul></li><li>常用方法<ul><li>concat();合并数组</li><li>sort();排序</li><li>push();末尾追加元素</li><li>reverse();数组元素翻转</li></ul></li></ol></li><li>Math对象<ol><li>常用方法<ul><li>round():四舍五入;例如Math.round(2.5)等于3</li><li>random();返回0~1之间的随机数;例如parseInt(Math.random()*10);</li><li>max();返回最高值</li><li>min();返回最低值</li><li>abs();返回绝对值</li></ul></li></ol></li></ol><h2 id="浏览器对象"><a href="#浏览器对象" class="headerlink" title="浏览器对象"></a>浏览器对象</h2><ol><li>Window对象<ul><li>window对象时BOM的核心，window对象指当前的浏览器窗口。所有JavaScript全局对象，函数以及变量均自动成为window对象的成员；全局变量是window对象的属性，全局函数是window对象的方法，甚至HTML DOM的document也是window对象的属性之一</li><li>window.innerHeight:浏览器窗口的内部高度</li><li>window.innerWidth:浏览器窗口的内部宽度</li><li>window.open(“url”，“windowname”，“style”):打开新的网页</li></ul></li><li>计时器<ol><li>方法<ol><li>setInterval();间隔指定的好描述不同的执行指定的代码</li><li>clearInterval();停止setInterval()方法执行的函数代码</li><li>setTimeout();暂停指定的毫秒数后执行指定的代码</li><li>clearTimeout();停止之慈宁宫setTimeout()方法的函数代码</li></ol></li></ol></li><li>History对象<ol><li>history.back()与在浏览器中点击后退按钮相同</li><li>history.forward()与在浏览器中点击向前按钮相同</li><li>history.go()进入历史中的某个页面</li></ol></li><li>Location对象<ol><li>location对象用于获得当前页面的地址(URL)，并把浏览器重定向到新的页面</li><li>属性与方法<ol><li>location.hostname返回web主机的域名</li><li>location.pathname返回当前页面的路径和文件名</li><li>location.port返回web主机的端口</li><li>location.protocol返回所使用的web协议(http://或https://)</li><li>location.href返回当前页面的URL</li><li>location.assign()加载新的文档</li></ol></li></ol></li><li>Screen对象<ol><li>属性<ol><li>screen.availWidth可用的屏幕宽度</li><li>screen.availHeight可用的屏幕高度</li><li>screen.Height屏幕高度</li><li>screen.Width屏幕宽度</li></ol></li></ol></li></ol><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><figure class="highlight js"><figcaption><span>使用闭包以及function来模拟类</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    People.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"People:Hello "</span> + <span class="keyword">this</span>._name + <span class="string">","</span> + <span class="keyword">this</span>._age + <span class="string">" years old"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.People = People;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, grade</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._grade = grade;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Student.prototype = <span class="keyword">new</span> People(<span class="keyword">this</span>._name,<span class="keyword">this</span>._age);</span><br><span class="line">    <span class="keyword">var</span> superSay = Student.prototype.say;</span><br><span class="line">    Student.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        superSay.call(<span class="keyword">this</span>);</span><br><span class="line">        alert(<span class="string">"Student:Hello "</span> + <span class="keyword">this</span>._name + <span class="string">","</span> + <span class="keyword">this</span>._age + <span class="string">" years old"</span> + <span class="string">",Grade: "</span> + <span class="keyword">this</span>._grade);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.Student = Student;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> Student(<span class="string">"morris"</span>,<span class="number">20</span>,<span class="string">"one"</span>);</span><br><span class="line">stu.say();</span><br></pre></td></tr></table></figure><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><ol><li>AJAX(Asynchronous Javascript And XML)</li><li>编程模板<ol><li>创建XMLHttpRequest对象</li><li>open操作初始化请求信息</li><li>监听事件处理响应结果</li><li>send操作发出请求</li></ol></li><li><p>创建各浏览器兼容的XMLHttpRequest对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml2.XMLHTTP'</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>发送请求信息</p><ol><li>get方法<ul><li><code>xhr.open(&quot;GET&quot;,&quot;http://test/keyword/hit?keyword=c&quot;,true);</code></li><li><code>xhr.send();</code></li></ul></li><li>post方法<ul><li><code>xhr.open(&quot;POST&quot;,&quot;http://test/keyword/hit&quot;,true);</code></li><li><code>xhr.send(&quot;keyword=c&quot;)</code>;</li></ul></li></ol></li><li>设置请求头信息<ol><li><code>xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;application/json&quot;);</code></li><li><code>xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;);</code></li></ol></li><li><p>响应的接收与请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(xhr.readyState ==<span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line"><span class="built_in">console</span>.log(xhr.responseXML);</span><br><span class="line"><span class="built_in">console</span>.log(xhr.getAllResponseHeaders());</span><br><span class="line"><span class="built_in">console</span>.log(xhr.getResponseHeader(<span class="string">"Content-Type"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(xhr.status);</span><br><span class="line"><span class="built_in">console</span>.log(xhr.statusText);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将Json字符串转换成Json对象：</p><ol><li>JSON.parse(xhr.responseText);</li><li>eval(xhr.responseText);</li></ol></li></ol><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ol><li>设计原则<ol><li>开闭原则：对扩展开放，对修改关闭</li><li>里氏转换原则：子类继承父类，单独调用完全可以运行</li><li>依赖倒转原则：引用一个对象，如果这个对象有底层类型，直接饮用底层</li><li>接口隔离原则：每一个接口应该是一种角色</li><li>合成/聚合复用原则：新的对象应使用一些已有的对象，使之成为新对象的一部分</li><li>迪米特原则：一个对象应对其他对象有尽可能少的了解</li></ol></li><li>单例模式</li></ol><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><ol><li>jQuery库可以通过一行简单的标记被添加到网页中</li><li>jQuery是一个JavaScript函数库</li><li>jQuery库包含的功能:<ol><li>HTML元素选取</li><li>HTML元素操作</li><li>CSS操作</li><li>HTML事件函数</li><li>JavaScript特效和动画</li><li>HTML DOM遍历和修改</li><li>AJAX</li><li>Utilities</li></ol></li><li>从CDN中载入jQuery，例如：<a href="http://libs.baidu.com/jquery/1.10.1/jquery.min.js" target="_blank" rel="noopener">http://libs.baidu.com/jquery/1.10.1/jquery.min.js</a></li><li>基础语法：<ol><li>$(selector).action()<ul><li>美元符号定义jQuery</li><li>选择符selector“查询”和“查找”HTML元素</li><li>jQuery的action()执行对元素的操作</li><li>例如：<ul><li>$(this).hide()隐藏当前元素</li></ul></li></ul></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;与-的区别&quot;&gt;&lt;a href=&quot;#与-的区别&quot; class=&quot;headerlink&quot; title=&quot;==与===的区别&quot;&gt;&lt;/a&gt;==与===的区别&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;对于string,number等基础类型，==和===是有区别的&lt;ol&gt;
&lt;li&gt;不同类
      
    
    </summary>
    
      <category term="Web" scheme="https://suda-morris.github.io/categories/Web/"/>
    
    
      <category term="Javascript" scheme="https://suda-morris.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>CSS Basic</title>
    <link href="https://suda-morris.github.io/2015/09/27/css/"/>
    <id>https://suda-morris.github.io/2015/09/27/css/</id>
    <published>2015-09-27T02:51:00.000Z</published>
    <updated>2018-07-05T01:38:09.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><blockquote><p>selector{<br>property:value<br>}<br>其中selector有派生选择器，id选择器，类选择器，属性选择器</p></blockquote><h2 id="头部声明"><a href="#头部声明" class="headerlink" title="头部声明"></a>头部声明</h2><p><code>&lt;link href=&quot;MyCSS.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;</code></p><h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><ol><li>id选择器可以为标有id的HTML元素指定特定的样式</li><li>id选择器以“#”来定义</li></ol><h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><ol><li>类选择器以一个点来定义</li></ol><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><ol><li><code>&lt;style type=&quot;text/css&quot;&gt; [title=te]{color:blue}&lt;/style&gt;</code></li><li><code>&lt;p title=&quot;te&quot;&gt;属性选择器&lt;/p&gt;</code></li></ol><h2 id="CSS背景"><a href="#CSS背景" class="headerlink" title="CSS背景"></a>CSS背景</h2><ul><li>background-attachment:背景图像是否固定或者随着页面的其余部分滚动</li><li>background-color:设置元素的背景颜色</li><li>background-image:把图片设置为背景，url(“bg.jpg”)</li><li>background-position:设置背景图片的起始位置</li><li>background-repeat:设置背景图片是否及如何重复</li><li>background-size:规定背景图片的尺寸</li><li>background-origin:规定背景图片的定位区域</li><li>background-clip:规定背景的绘制区域 </li></ul><h2 id="CSS文本"><a href="#CSS文本" class="headerlink" title="CSS文本"></a>CSS文本</h2><ul><li>color：文本颜色</li><li>direction：文本方向</li><li>line-height：行高</li><li>letter-spacing：字符间距</li><li>text-align：对齐元素中的文本</li><li>text-decoration：向文本中添加修饰</li><li>text-indent：缩进元素中文本的首行</li><li>text-transform：元素中的字母</li><li>unicode-bidi：设置文本方向</li><li>white-space：元素中空白的处理方式</li><li>word-spacing：字间距</li><li>text-shadow:文本阴影</li><li>word-wrap:规定文本的换行规则</li></ul><h2 id="CSS字体"><a href="#CSS字体" class="headerlink" title="CSS字体"></a>CSS字体</h2><ul><li>font-family:设置字体系列</li><li>font-size:设置字体的尺寸</li><li>font-style:设置字体风格</li><li>font-variant:以小型大写字体或正常字体显示文本</li><li>font-weight:设置字体的粗细</li></ul><h2 id="CSS链接"><a href="#CSS链接" class="headerlink" title="CSS链接"></a>CSS链接</h2><ol><li>CSS链接的四种状态：<ul><li>a:link 普通的、未被访问的链接</li><li>a:visited 用户已经访问的链接</li><li>a:hover 鼠标指针位于链接的上方</li><li>a:active 链接被点击的时刻</li></ul></li><li>常见的链接样式：<ul><li>text-decoration属于大多用于去掉链接中的下划线</li></ul></li></ol><h2 id="CSS列表"><a href="#CSS列表" class="headerlink" title="CSS列表"></a>CSS列表</h2><ul><li>list-style简写列表项</li><li>list-style-image列表项图像</li><li>list-style-position列表标志位置</li><li>list-style-type列表类型</li></ul><h2 id="CSS表格"><a href="#CSS表格" class="headerlink" title="CSS表格"></a>CSS表格</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#tb</span>&#123;</span><br><span class="line"><span class="attribute">border-collapse</span>:collapse;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#tb</span> <span class="selector-tag">td</span>,<span class="selector-id">#tb</span> <span class="selector-tag">th</span>&#123;</span><br><span class="line"><span class="attribute">border</span>:<span class="number">1px</span> solid bisque;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#tb</span> <span class="selector-tag">th</span>&#123;</span><br><span class="line"><span class="attribute">text-align</span>:right;</span><br><span class="line"><span class="attribute">background-color</span>:aqua;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#FFFFFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#tb</span> <span class="selector-tag">tr</span><span class="selector-class">.alt</span> <span class="selector-tag">td</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:black;</span><br><span class="line"><span class="attribute">background-color</span>:aquamarine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS轮廓"><a href="#CSS轮廓" class="headerlink" title="CSS轮廓"></a>CSS轮廓</h2><ul><li>outline设置轮廓属性</li><li>outline-color设置轮廓的颜色</li><li>outline-style设置轮廓的样式</li><li>outline-width设置轮廓的宽度</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;selector{&lt;br&gt;property:value&lt;br&gt;}&lt;br&gt;其中selector有派生
      
    
    </summary>
    
      <category term="Web" scheme="https://suda-morris.github.io/categories/Web/"/>
    
    
      <category term="CSS" scheme="https://suda-morris.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 Basic</title>
    <link href="https://suda-morris.github.io/2015/09/25/html5/"/>
    <id>https://suda-morris.github.io/2015/09/25/html5/</id>
    <published>2015-09-25T14:26:00.000Z</published>
    <updated>2018-07-05T01:38:09.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol><li>声明：&lt;!DOCTYPE&gt;<ul><li>HTML有多个不同版本，只有完全明白页面中使用的确切的HTML版本，浏览器才能完全正确地显示出HTML页面</li><li>HTML5：<ul><li>&lt;!DOCTYPE html&gt;</li></ul></li></ul></li><li>元素：指的是从开始标签到结束标签的所有代码<ul><li><code>&lt;p&gt; this is my web page &lt;/p&gt;</code>中的<code>this is my web page</code>就是元素内容</li><li><code>&lt;br/&gt;</code>表示不含任何元素的空标签，即换行</li><li>空元素在开始标签中进行关闭</li><li>大多数的HTML元素可拥有属性</li></ul></li><li>属性<ul><li>属性以键值对的形式出现</li><li>常用标签属性<ul><li><code>&lt;h1&gt;:align对齐方式</code></li><li><code>&lt;body&gt;:bgcolor背景颜色</code></li><li><code>&lt;a&gt;:target规定在何处打开连接</code></li></ul></li><li>通用属性<ul><li><code>class：规定元素的类名</code></li><li><code>id：规定元素唯一ID</code></li><li><code>style：规定元素的样式</code></li><li><code>title：规定元素的额外信息</code></li></ul></li></ul></li><li>格式化<ul><li><code>&lt;b&gt;定义粗体文字</code></li><li><code>&lt;big&gt;定义大号文字</code></li><li><code>&lt;em&gt;定义着重文字</code></li><li><code>&lt;i&gt;定义斜体文字</code></li><li><code>&lt;small&gt;定义小号文字</code></li><li><code>&lt;strong&gt;定义加重语气</code></li><li><code>&lt;sub&gt;定义下标文字</code></li><li><code>&lt;sup&gt;定义上标文字</code></li><li><code>&lt;ins&gt;定义插入字</code></li><li><code>&lt;del&gt;定义删除字</code></li></ul></li><li>样式<ol><li>标签<ul><li><code>&lt;style&gt;:样式定义</code></li><li><code>&lt;link&gt;:资源引用</code></li></ul></li><li>属性<ul><li><code>rel=&quot;stylesheet&quot;：外部样式表</code></li><li><code>type=&quot;text/css&quot;:引入文档的类型</code></li><li><code>margin-left:边距</code></li></ul></li><li>三种样式表插入方法：<ol><li>外部样式表：<code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;</code></li><li>内部样式表：<code>&lt;style type=&quot;text/css&quot;&gt;body{background-color:red} p{margin-left:20px}&lt;/style&gt;</code></li><li>内联样式表：<code>&lt;p style=&quot;color:red&quot;&gt;</code></li></ol></li></ol></li><li>链接<ol><li>标签：<a></a></li><li>连接数据：文本链接，图片链接</li><li>属性：<ol><li>href属性：指向另一个文档的链接</li><li>name属性：创建文档内的链接<ul><li><code>&lt;a name=&quot;tips&quot;&gt;hello&lt;/a&gt;</code></li><li><code>&lt;a href=&quot;#tips&quot;&gt;跳转&lt;/a&gt;</code></li></ul></li></ol></li><li>img标签属性<ol><li>alt：替换文本属性</li><li>width：宽</li><li>height：高</li></ol></li></ol></li><li>表格<ol><li>标签<ul><li><code>&lt;table&gt;：定义表格</code>,属性border定义边框大小，属性cellpadding定义单元格边距，属性cellspacing定义单元格间距，属性bgcolor定义表格背景色，属性background定义表格图片</li><li><code>&lt;caption&gt;：定义表格标题</code></li><li><code>&lt;th&gt;：定义表格表头</code></li><li><code>&lt;tr&gt;：定义表格的行</code></li><li><code>&lt;td&gt;：定义表格的单元</code>,属性colspan的值定义了要合并的单元格数目</li><li><code>&lt;thead&gt;：定义表格的页眉</code></li><li><code>&lt;tbody&gt;：定义表格的主题</code></li><li><code>&lt;tfoot&gt;：定义表格的页脚</code></li><li><code>&lt;col&gt;：定义表格的列属性</code></li></ul></li></ol></li><li>列表<ol><li>标签<ul><li><code>&lt;ol&gt;：有序列表</code>，type属性值A,a,I ,i,start</li><li><code>&lt;ul&gt;：无序列表</code>，type属性值disc,circle,square</li><li><code>&lt;li&gt;：列表项</code></li><li><code>&lt;dl&gt;：自定义列表</code></li><li><code>&lt;dt&gt;：自定义列表项</code></li><li><code>&lt;dd&gt;：自定义列表描述</code></li></ul></li></ol></li><li>块<ol><li>HTML块元素<ul><li>块元素在显示时，通常会以新行开始，比如<code>&lt;h1&gt;,&lt;p&gt;,&lt;ul&gt;</code></li></ul></li><li>HTML内联元素<ul><li>内联元素通常不会以新行开始，比如<code>&lt;b&gt;,&lt;a&gt;,&lt;img&gt;</code></li></ul></li><li><code>HTML&lt;div&gt;</code>元素<ul><li><code>&lt;div&gt;</code>元素也被称称为块元素，其主要是组合HTML元素的容器</li></ul></li><li><code>HTML&lt;span&gt;</code>元素<ul><li><code>&lt;span&gt;</code>元素是内联元素，可作为文本的容器</li></ul></li></ol></li><li><p>使用div元素布局 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>html布局测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-id">#page</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: gray;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">            height: 950px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-id">#head</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: red;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">            height: 10%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: greenyellow;</span></span><br><span class="line"><span class="undefined">            width: 20%;</span></span><br><span class="line"><span class="undefined">            height: 80%;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-id">#middle</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: gray;</span></span><br><span class="line"><span class="undefined">            width: 60%;</span></span><br><span class="line"><span class="undefined">            height: 80%;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: cornflowerblue;</span></span><br><span class="line"><span class="undefined">            width: 20%;</span></span><br><span class="line"><span class="undefined">            height: 80%;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-id">#foot</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: blue;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">            height: 10%;</span></span><br><span class="line"><span class="undefined">            clear: both;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"head"</span>&gt;</span></span><br><span class="line">        head</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">        main_L</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">        main_M</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">        main_R</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"foot"</span>&gt;</span></span><br><span class="line">        foot</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>表单</p><ol><li>标签<ul><li><code>&lt;form&gt;表单</code>，属性值有action，method</li><li><code>&lt;input&gt;输入域</code>，属性type的值有：text，password，checkbox，radio(需要和name属性搭配使用),button(需要和value属性搭配使用),submit(需要和value属性搭配使用)</li><li><code>&lt;textarea&gt;文本域</code>，属性有cols,rows</li><li><code>&lt;label&gt;控制标签</code></li><li><code>&lt;fieldset&gt;定义域</code></li><li><code>&lt;legend&gt;域的标题</code></li><li><code>&lt;select&gt;选择列表</code></li><li><code>&lt;optgroup&gt;选项组</code></li><li><code>&lt;option&gt;下拉列表中的选项</code>,需要被<code>&lt;select&gt;</code>包围</li><li><code>&lt;button&gt;按钮</code></li></ul></li></ol></li><li><p>框架</p><ol><li>框架标签<code>&lt;frame?</code></li><li>框架集标签<code>&lt;frameset&gt;</code></li><li>常用标签<ul><li>noresize:固定框架大小</li><li>cols:列</li><li>rows:行</li></ul></li><li>内联框架<code>&lt;iframe&gt;</code>,属性src指名引用的框架路径，属性frameborder指名是否需要边框</li></ol></li><li><p>实体</p><ul><li>HTML中预留字符串必须被替换成字符实体，如&lt;（小于号），&gt;（大于号）</li><li>常用的字符实体<ul><li>空格：&amp;nbsp</li><li>小于号：&amp;lt</li><li>大于号：&amp;gt</li><li>和号：&amp;amp</li><li>引号：&amp;quot</li><li>撇号：&amp;apos</li><li>分：&amp;cent</li><li>镑：&amp;pound</li><li>元：&amp;yen</li><li>欧元：&amp;euro</li><li>小节：&amp;sect</li><li>版权：&amp;copy</li><li>注册商标：&amp;reg</li><li>商标：&amp;trade</li><li>乘号：&amp;times</li><li>除号：&amp;divide</li></ul></li></ul></li></ol><h2 id="HTML5-Web-Storage"><a href="#HTML5-Web-Storage" class="headerlink" title="HTML5 Web Storage"></a>HTML5 Web Storage</h2><ol><li>Web Storage功能就是在Web上存储数据的功能，这里的储存是针对客户端本地而言的，具体分为两种：<ul><li>sessionStorage：将数据保存在session对象中，session是指用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览这个网站所花费的时间。session对象可以用来保存在这段时间内所要求保存的任何数据</li><li>localStorage：将数据保存在客户端本地的硬件设备中，即使浏览器被关闭了，该数据任然存在，下一次打开浏览器访问网站时仍然可以继续使用</li></ul></li></ol><figure class="highlight js"><figcaption><span>sessionStorage</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveStorage</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> target = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line"><span class="keyword">var</span> str = target.value;</span><br><span class="line">sessionStorage.setItem(<span class="string">"message"</span>,str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStorage</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> target = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line"><span class="keyword">var</span> msg = sessionStorage.getItem(<span class="string">"message"</span>);</span><br><span class="line">target.innerHTML = msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>localStorage</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveStorage</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> target = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line"><span class="keyword">var</span> str = target.value;</span><br><span class="line">localStorage.setItem(<span class="string">"message"</span>,str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStorage</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> target = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line"><span class="keyword">var</span> msg = localStorage.getItem(<span class="string">"message"</span>);</span><br><span class="line">target.innerHTML = msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTML5-本地数据库"><a href="#HTML5-本地数据库" class="headerlink" title="HTML5 本地数据库"></a>HTML5 本地数据库</h2><ol><li>HTML5中内置了两种本地数据库，一种为SQLite，一种为indexedDB</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;声明：&amp;lt;!DOCTYPE&amp;gt;&lt;ul&gt;
&lt;li&gt;HTML有多个不同版本，只有完全明白页面中使用的确切的HTML版本，浏览
      
    
    </summary>
    
      <category term="Web" scheme="https://suda-morris.github.io/categories/Web/"/>
    
    
      <category term="HTML" scheme="https://suda-morris.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>W5500 Introduction</title>
    <link href="https://suda-morris.github.io/2015/08/17/w5500/"/>
    <id>https://suda-morris.github.io/2015/08/17/w5500/</id>
    <published>2015-08-17T01:50:00.000Z</published>
    <updated>2018-07-05T01:38:09.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="W5500网络模块简介"><a href="#W5500网络模块简介" class="headerlink" title="W5500网络模块简介"></a>W5500网络模块简介</h2><ol><li>公司：Wiznet</li><li>使用硬件逻辑门电路实现TCP/IP协议栈的传输层及网络层（如：TCP，UDP，ICMP，IPv4，ARP，IGMP，PPPoE等协议），并集成了数据链路层，物理层(10BaseT/100BaseTX)，以及32K字节片上RAM作为数据收发缓存，使得上位机主控芯片只需承担TCP/IP应用层控制信息的处理任务，大大节省了上位机对于数据复制、协议处理和中断处理等方面的工作量，提升了系统利用率及可靠性</li><li>操作过程中，用户可以近似将W5500作为MCU的一个外设RAM来使用，非常简易。W5500对外接口通常为通用的80MHz高速SPI</li><li>W5500支持同时的8个socket，方便和不同的IP和设备进行通讯；为了减小系统能耗，W5500提供了网络环形模式(WOL)以及掉电模式供客户选择使用；W5500是非可攻击性的硬件网络引擎，可以防止类似于洪流，诈骗式以及注入式网络攻击，提高了网络安全</li><li>支自动协商(10/100-Based全双工/半双工)</li><li>3.3V工作电压，I/O信号口5V耐压</li><li>W5500 不支持Auto-MDI-X，也就是不支持交叉直连自动切换，对于某些比较老的设备，可能需要特定的交叉线或者直连线。比如模块连模块，需要使用交叉线，模块连路由器或者交换机需要使用直连线。</li><li>W5500不支持自动极性变换功能，因此用户需要使用直连线与交换机或者路由器连接，使用交叉线与终端设备(如服务器，工作站或者其他W5500)相连接。然而用户可以使用任何一种类型的网线与具有自动极性变换的其他设备相连。</li><li>W5500以太网芯片的内核由传输层的TCP、UDP、ICMP、IGMP等协议、网络层的IP、ARP、PPPoE等协议以及链路层的MAC构成，再加上物理层的PHY和外围的寄存器、内存、SPI接口组成了这一整套硬件化的以太网解决方案</li><li>SPI时钟设定值速率为80MHz，但是高速信号在受电磁串扰和长信号线的影响下可能会失真，实测具有稳定波形的始终速率为33.3MHz</li></ol><h2 id="W5500初始化主要使用的几个文件"><a href="#W5500初始化主要使用的几个文件" class="headerlink" title="W5500初始化主要使用的几个文件"></a>W5500初始化主要使用的几个文件</h2><ol><li>W5500_conf.c-&gt;主要配置W5500的MAC、IP地址，W5500基本的数据读写过程，复位设置函数等</li><li>Socket.c-&gt;主要介绍了W5500的SOCKET相关配置函数，比如SOCKET的打开、关闭以及接收数据、发送数据等等</li><li>Utility.c-&gt;主要介绍了基本的延时函数，还有数据格式转化函数</li><li>w5500.c-&gt;主要介绍W5500的寄存器读写过程</li></ol><h2 id="W5500的Socket初始化"><a href="#W5500的Socket初始化" class="headerlink" title="W5500的Socket初始化"></a>W5500的Socket初始化</h2><ol><li>W5500的操作需要设置一下寄存器的参数：<ol><li>模式寄存器(MR)</li><li>中断屏蔽寄存器(IMR)</li><li>重发时间寄存器(RTR)</li><li>重发计数寄存器(RCR)</li></ol></li><li>设置网络信息，下面的寄存器是关于网络的基本设置，需要根据网络环境来进行设置<ol><li>网关地址寄存器(GAR)</li><li>本机物理地址寄存器(SHAR)</li><li>子网掩码寄存器(SUBR)</li><li>本机IP地址寄存器(SIPR)</li></ol></li><li>设置端口存储信息，这一步设置端口TX/RX存储信息，每个端口的基地址和屏蔽地址在这里确定并保存。<ol><li>W5500有一个通用寄存器，8个Socket寄存器区，以及对应每个Socket的收发缓存区。每一个Socket的发送缓存区都在一个16KB的物理接收内存中，初始化分配为2KB。无论给每个Socket分配多达的收发缓存，都必须在16为的偏移地址范围内(0x0000~0xFFFF).16KB的发送内存初始化被分配为每个SOcket 2KB发送缓存区(2KB*8=16KB)。</li><li>初始化分配的2KB Socket发送缓存，可以通过使用Socket发送缓存大小寄存器(Sn_TXBUF_SIZE)重新分配，一旦所有的Socket发送缓存大小寄存器(Sn_TXBUF_SIZE)配置完成，16KB的发送内存就会按照配置分配给每个Socket的发送缓存，并按照从Socket0到7顺序分配。16KB物理内存的地址是可以自增的，但是为了避免数据传输错误，需要避免发送缓存大小寄存器(Sn_TXBUF_SIZE)的和超过16</li><li>16KB的发送内存中分配了对应Socket n的发送缓存区，用于为来自主机传输的数据做缓存。Socket n发送缓存区的16位偏移地址支持64KB的寻址范围(从0x0000到0xFFFF)</li></ol></li></ol><h2 id="SPI工作协议"><a href="#SPI工作协议" class="headerlink" title="SPI工作协议"></a>SPI工作协议</h2><ol><li>SPI协议定义了四种工作模式(模式0，1，2，3)。每种模式的区别是根据SCLK的极性及相位不同定义的。SPI的模式0和模式3唯一不同的就是在非活动状态下，SCLK信号的极性，SPI模式0在时钟空闲状态时钟极性为低电平。SPI的模式0和3，数据都是在SCLK的上升沿锁存，在下降沿输出。W5500支持SPI模式0以及模式3，MISO和MOSI信号无论是接收或者发送，均遵从从最高标志位(MSB)到最低标志位(LSB)的传输序列。</li><li>W5500与外设主机的通讯受SPI数据帧控制，W5500的帧分为3段：地址段，控制段，数据段</li><li>地址段为W5500寄存器或者TX/RX内存指定的16位的偏移地址。</li><li>控制段指定了地址段设定的偏移区域的归属，读写访问模式以及SPI工作模式(可变长度模式/固定长度模式)</li><li>数据段可以设定为任意长度(N字节)或者是固定长度：1字节，2字节或4字节；如果SPI工作模式设置为可变数据长度模式(VDM),SPI的SCSn信号需要由外部主机通过SPI帧控制。</li><li>在可变长度模式下，SCSn控制SPI帧的开始和停止：<ol><li>SCSn信号拉低，即代表W5500的SPI帧开始(地址段)</li><li>SCSn信号拉低，即代表W5500的SPI帧结束(数据段的随机N字节数据结尾)</li></ol></li><li>W5500的SPI数据帧包括了16为地址段的偏移地址，8为控制段和N字节数据段。8为控制段可以通过修改区域选择位(BSB[4:0]),读写访问模式位(RWB)以及SPI工作模式位(OM[1:0])来重新定义。区域选择位选择了归属于偏移地址的区域</li><li>W5500支持数据的连续读写。其流程为数据从(2/4/N字节连续数据的)偏移地址的基址开始传输，偏移地址会自增寻址(加1)传输接下来的数据</li><li>SPI数据帧控制段对应位的说明：<ol><li>区域选择位BSB[4:0]-&gt; 【00000】= 通用寄存器；【00001】= Socket0寄存器；【00010】=Socket0发送缓存；【00011】=Socket0接收缓存；【00101】=Socket1寄存器；【00110】=Socket1发送缓存；【00111】=Socket1接收缓存；【01001】= Socket2寄存器；【01010】=Socket2发送缓存；【01011】=Socket2接收缓存；【10101】=Socket3寄存器；【01110】=Socket3发送缓存；【01111】=Socket3接收缓存；【10001】= Socket4寄存器；【10010】=Socket4发送缓存；【10011】=Socket4接收缓存；【10101】=Socket5寄存器；【10110】=Socket5发送缓存；【10111】=Socket5接收缓存；【11001】= Socket6寄存器；【11010】=Socket6发送缓存；【11011】=Socket6接收缓存；【11101】=Socket7寄存器；【11110】=Socket7发送缓存；【11111】=Socket7接收缓存；</li><li>读写访问模式位RWB-&gt; 【0】=读；【1】=写</li><li>工作模式位OM[1:0]-&gt; 【00】=可变数据长度模式，N字节数据段(1≤N)；【01】=固定数据长度模式，1字节数据长度(N=1)；【10】=固定数据长度模式，2字节数据长度(N=2)；【11】=固定数据长度模式，4字节数据长度(N=4)；</li></ol></li><li>W5500有一个通用寄存器，8个Socket寄存器，以及对应每个Socket的收发缓存区。每个区域均通过SPI数据帧的区域选择位BSB[4:0]来选取。</li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xj5i0.com1.z0.glb.clouddn.com/@/BlogImg20150825212635.png" alt="SPI模式0/3" title="">                </div>                <div class="image-caption">SPI模式0/3</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xj5i0.com1.z0.glb.clouddn.com/@/BlogImg20150825212850.png" alt="SPI数据帧" title="">                </div>                <div class="image-caption">SPI数据帧</div>            </figure></li></ol><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><blockquote><p>由计算机和网络介质之间的实际界面组成，可定义电器信号、符号、线的状态和时钟要求、数据编码和数据传输用的连接器。如最常用的RS-232规范、10BASE-T的曼彻斯特编码以及RJ-45就属于这一层。</p></blockquote><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><blockquote><ol><li>数据链路层通过物理网络链路提供可靠的数据传输。不同的数据链路层定义了不同的网络和协议特征，其中包括物理编址、网络拓扑结构、错误校验、帧序列以及流控</li><li>以太网协议规定，一组电信号构成一个数据包，叫做“帧”，每一帧分成三个部分：以太网首部、数据及以太网尾部。</li><li>以太网首部包含数据帧的一些说明，比如发送者、接收者、数据类型等等；数据部分则是数据的具体内容；以太网尾部则是CRC校验码</li><li>以太网首部的长度固定为14字节。数据的长度最短为46字节，最长为1500字节。以太网尾部的长度固定为4字节。因此，整个数据帧最短为64字节，最长为1518字节。如果数据很长，就必须分割成多个帧进行发送</li><li>数据链路层实际上由两个独立的部分组成：介质存取控制(MAC)和逻辑链路控制(LLC)。MAC描述在共享介质环境中如何进行站的调度、发生和接收数据。MAC确保信息跨链路的可靠传输，对数据传输进行同步，识别错误和控制数据流向。一般来讲，MAC只在共享介质环境中才是重要的，只有在共享介质环境中多个节点才能连接到同一传输介质上。</li><li>一块网卡如何知道另一块网卡的MAC地址?ARP协议(网络层)可以解决这个问题。以太网数据帧必须知道接收方的MAC地址然后才能发送。有了数据帧的定义，网卡的MAC地址，广播的发送方式，数据链路层就可以在多台计算机之间传送数据了</li></ol></blockquote><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><blockquote><ol><li>网络层负责在源和终点之间建立连接。它一般包括网络寻址，还可能包括流量控制、错误检查等。相同MAC标准的不同网段之间的数据传输一般只涉及到数据链路层，而不同的MAC标准之间的数据传输都涉及到网络层。IP路由器工作在网络层，因为可以实现多种网络间的互联。</li><li>IP数据包分为“标头”和“数据”两个部分。标头部分主要包括版本、长度、IP地址等细心，数据部分则是IP数据报的具体内容。IP数据报的标头部分长度为20到60字节，整个数据报的总长度最大为65535字节，因此理论上，一个数据报的数据部分最长为65515字节。以太网数据帧的数据部分最长只有1500字节，因此如果IP数据报超过了1500字节，它就要分割成几个以太网数据帧分开发送了。</li></ol></blockquote><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><blockquote><ol><li>传输层向高层提供可靠的端到端的网络数据流服务。传输层的功能一般包括流控、多路传输、虚电路管路以及差错校验和恢复。流控管理设备之间的数据传输，确保传输设备不发送比接受设备处理能力大的数据；多路传输使得多个应用程序的数据可以传输到物理链路上；虚电路由传输层建立、维护和终止；差错校验包括为检测传输错误而建立的各种不同结构；而差错回复包括所采取的行动，以便解决发生的任何错误。</li><li>必须要在数据包中加入端口信息，这就需要新的协议。最简单的实现叫做UDP协议，UDP数据段也是有“标头”和“数据”两部分组成</li><li>标头部分主要定义了发出端口和接收端口，“数据”部分就是具体的内容，然后把整个UDP数据段放入IP数据报的“数据”部分，而IP数据报又是放在以太网数据帧之中的。</li><li>UDP数据段非常简单，标头部分一共只有8个字节，总长度不超过65535字节，正好放进一个IP数据报</li><li>为了提高网络可靠性，诞生了TCP协议，这个协议非常复杂，但可以近似认为，他就是有确认机制的UDP协议，没发出一个数据都要求确认。如果有一个数据缺失，就收不到确认，发送方就知道有必要重发这个数据了</li><li>TCP数据段没有长度限制，理论上可以无限长，但是为了保证网络的效率。通常TCP数据段的长度不会超过IP数据报的长度，以确保单个TCP数据段不必再分割。</li></ol></blockquote><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><blockquote><p>应用层是最接近终端用户的第一层，这就意味着应用层与用户之间是通过应用软件直接相互作用。应用层并非由计算机上云sing的实际应用软件组成，而是由向应用程序提供访问网络资源的API组成。</p></blockquote><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><h3 id="W5500通用寄存器"><a href="#W5500通用寄存器" class="headerlink" title="W5500通用寄存器"></a>W5500通用寄存器</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xj5i0.com1.z0.glb.clouddn.com/@/BlogImg20150823140450.png" alt="W5500通用寄存器" title="">                </div>                <div class="image-caption">W5500通用寄存器</div>            </figure><p>###Socket寄存器<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xj5i0.com1.z0.glb.clouddn.com/@/BlogImg20150823141841.png" alt="Socket寄存器" title="">                </div>                <div class="image-caption">Socket寄存器</div>            </figure></p><ol><li>通用寄存器区配置了W5500的基本信息，如IP以及MAC地址</li><li>W5500支持8个Socket作为通讯信道，每一个Socket通过Socket n寄存器控制。Socket n寄存器可以通过SPI数据帧中的区域选择寄存器BSB[4:0]来选定对应的寄存器n。</li></ol><h2 id="TCP-IP协议族"><a href="#TCP-IP协议族" class="headerlink" title="TCP/IP协议族"></a>TCP/IP协议族</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xj5i0.com1.z0.glb.clouddn.com/@/BlogImgW5500网络扩展板教程.png" alt="TCP/IP协议族" title="">                </div>                <div class="image-caption">TCP/IP协议族</div>            </figure><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><ol><li>TCP协议通过三个报文段完成连接的建立，这个过程称为三次握手。TCP连接建立过程：<ol><li>第一次握手：建立连接时，客户端发送SYN包(seq=j)到服务器，并进入SYN_SEND状态，等待服务器确认</li><li>第二次握手：服务器收到SYN包，必须确认客户的SYN(ack=j+1),同时自己也发送一个SYN包(seq=k),即SYN+ACK包，此时服务器进入SYN_RECV状态</li><li>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1),此包发送完毕，客户端和服务器进入ESTABLISH状态，完成三次握手</li></ol></li><li>终止一个TCP连接需要四次挥手，这是由TCP的半关闭(half-close)造成的<ol><li>第一次挥手：主动方发出设置了FIN位的报文，表示主动终止从本地到远端的单向链接；此时主动方进入FIN_WAIT1状态，意思是它在等待远端的FIN报文</li><li>第二次挥手：远端收到FIN后，会立即发送ACK；主动方收到ACK后，进入FIN_WAIT2状态，所以FIN_WAIT1状态持续的时间非常短；此时远端进入CLOSE-WAIT状态，一条单向链接终止了，但另一条还没有，处于HALF-CLOSE连接状态</li><li>第三次挥手：当远端进行了必要的数据发送后，它发送FIN，表示它出发的单向连接也要关闭，同时它进入LAST_ACK状态</li><li>第四次挥手：主动方收到FIN后，回应一个ACK；远端就此进入CLOSED状态，连接关闭；主动方进入TIME WAIT状态，确保最后一个ACK没有丢失，防止新连接占用刚刚关闭的主动方的地址端口，使得网络中流浪的老连接的返祖被误认为新连接的分组</li></ol></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xj5i0.com1.z0.glb.clouddn.com/@/BlogImgTCP三次握手.png" alt="TCP三次握手/四次挥手" title="">                </div>                <div class="image-caption">TCP三次握手/四次挥手</div>            </figure></li><li>当W5500初始化完成后，程序进入主循环，此时读取Socket的状态值，并选择进入哪种模式。当Socket处于关闭状态时，在进行通信之前，我们先将该Socket初始化，这个Socket作为服务器端，端口号要固定为侦听的端口。当socket将处于初始化完成状态，即SOCK_INIT状态，此时，作为TCP服务器就要执行listen()函数来侦听端口。由于W5500内嵌了TCP/IP协议，连接过程是不需要单片机干预的。如果连接过程中出错造成超时，该Socket将会被关闭，重新进入SOCK_CLOSE状态。待TCP连接的3次握手完成后，socket的状态将会转变为连接建立状态，即代码中定义的SOCK_ESTABLISHED状态。在进入SOCK_ESTABLISHED状态后，便可进行数据收发。数据通信完毕之后执行disconnect()函数，在收到对方FIN数据包之前，该socket将进入SOCK_CLOSE_WAIT状态。</li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xj5i0.com1.z0.glb.clouddn.com/@/BlogImgTCPServer流程图.png" alt="TCPServer流程图" title="">                </div>                <div class="image-caption">TCPServer流程图</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xj5i0.com1.z0.glb.clouddn.com/@/BlogImgTCPClient流程图.png" alt="TCPClient流程图" title="">                </div>                <div class="image-caption">TCPClient流程图</div>            </figure></li></ol><h2 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h2><ol><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/ceIUeSz.png" alt="UDP通信流程图" title="">                </div>                <div class="image-caption">UDP通信流程图</div>            </figure></li><li>当socket处于关闭状态时，在进行通信之前我们先将该UDP模式的socket端口初始化。当socket将处于初始化完成状态即SOCK_UDP状态，此时就可以通过广播方式发送数据了。</li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/FxqWkWp.png" alt="UDP报文" title="">                </div>                <div class="image-caption">UDP报文</div>            </figure></li></ol><h2 id="DHCP协议"><a href="#DHCP协议" class="headerlink" title="DHCP协议"></a>DHCP协议</h2><ol><li>W5500作为DHCP客户端，路由器作为DHCP服务器端，在DHCP请求的过程中，包括4个主要阶段：发现阶段、提供阶段、选择阶段以及确认阶段</li><li>首次W5500客户端发送DHCPDISCOVER消息(IP地址租用申请)，这个消息通过广播方式发出，所有网络中的DHCP服务器都将接收到这个消息。随后，网络中的DHCP服务器会回应一个DHCPOFFER消息(IP地址租用提供)，由于这个时候客户端还没有网络地址，所以DHCPOFFER也是通过广播的方式发送出去的。然后，向该服务器发送DHCPREQUEST消息。在DHCPREQUEST消息中将包含客户端申请的IP地址。最后，DHCP服务器将会送DHCPACK的相应消息来通知客户端可以使用该IP地址，该确认里面包含了分配的IP地址和该地址的一个稳定期限的租约(默认是8天)，并同时更新DHCP数据库</li><li>DHCP初始化完成以后，通过获取DHCP_SOCKET的状态来获取动态IP地址。第一个状态DHCP_RET_NONE就是获取不成功，第二个状态DHCP_RET_TIMEOUT是获取IP地址超时，都不符合条件。第三个状态DHCP_RET_UPDATE就是获取动态IP地址成功，此时将得到的IP地址通过SPI写入W5500的寄存器。如果是DHCP_RET_CONFLICT冲突状态，就要返回DHCP服务重新获取</li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/sqc1tce.jpg" alt="DHCP报文格式" title="">                </div>                <div class="image-caption">DHCP报文格式</div>            </figure></li><li>报文格式解析：<ol><li>OP：若是client送给server的封包，设为1，反之为2</li><li>HTYPE：硬件类别，10MB以太网为1，100MB以太网为2</li><li>HLEN：硬件地址长度，Ethernet为6</li><li>HOPS：若封包需要经过router传送，每站加1，若在同一网段内，为0</li><li>TRANSACTION ID：DHCP REQUEST时产生的数值，以作为DHCPREPLY时的依据</li><li>SECONDS：Client端启动时间(秒)</li><li>FLAGS：从0到15共16bits，最左1bit为1时表示server将以广播方式传送封包给client，其余尚未使用</li><li>ciaddr：yhaoshiclient端想继续使用之前取得的IP地址，则列于这里</li><li>yiaddr：从server送回client的DHCP OFFER与DHCPACK封包中，此栏填写分配给client的IP地址</li><li>siaddr：若client需要透过网络开机，从server送出的DHCP OFFER、DHCPACK、DHCPNACK封包中，此栏填写开机程序代码所在server的地址</li><li>giaddr：若需跨网域进行DHCP发放，此栏为relay agent的地址，否则为0</li><li>chaddr：client的硬件地址</li><li>sname：sever的名称字符串，以0x00结尾</li><li>file：若client需要透过网络开机，此栏将指出开机程序名称，稍后以TFTP传送</li><li>options：允许厂商定义选项，提供更多的设定信息，其长度可变，同时可携带多个选项，每一个选项的第一个字节为信息代码，其后一个自己为该项数据长度，最后为项目内容</li></ol></li></ol><h2 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a>DNS协议</h2><ol><li>客户端初始化完毕之后，如果DNS运行标志位是1或者DNS发送次数超过3次就直接返回。如果不是上面的情况，并且DNS Server的IP不是0.0.0.0时，进入switch函数。当处于DNS域名解析成功状态时，DNS_OK置1，发送请求报文次数置0。当DNS解析域名失败时，标志位置0，请求报文次数加1，然后跳出循环。</li><li>DNS报文格式：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/C48NfJR.jpg" alt="DNS报文格式" title="">                </div>                <div class="image-caption">DNS报文格式</div>            </figure><ul><li>标识：DNS报文的ID，对于相关联的请求报文和应答报文，这个字段是相同的</li><li>标志：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/ZaPageY.jpg" alt="标志字段" title="">                </div>                <div class="image-caption">标志字段</div>            </figure><ul><li>QR：查询/响应的标志位，1为响应，0为查询</li><li>opcode：定义查询或响应的类型(若为0则表示是标准的，若为1则是反向的，若为2则是服务器状态请求)</li><li>AA：授权回答的标志位，该位在相应报文中有效，1表示名字服务器是权限服务器</li><li>TC：截断标志位，1表示响应以超过512字节并已经被截断</li><li>RD：只能在响应报文中置1，表示可以得到递归响应</li><li>zero：0，保留字段</li><li>rcode：返回码，表示响应的差错状态，0表示无差错，1表示格式差错，2表示问题在域名服务器上，3表示域参照问题，4表示查询类型不支持，5表示在管理上被禁止</li></ul></li><li>问题数、资源记录数、授权资源记录数和额外资源记录数，这四个字段都是两字节，分别对应下面的查询问题、回答、授权和额外信息部分的数量。一般问题数都为1，DNS查询报文中，资源记录数、授权资源记录数和额外资源记录数都为0.</li><li>查询问题部分的格式：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/qkVuppN.gif" alt="查询问题格式" title="">                </div>                <div class="image-caption">查询问题格式</div>            </figure><ul><li>查询名部分长度不定，一般为要查询的域名，有时候也有IP的时候，即反向查询。此部分由一个或者多个标识符序列组成，每个标识符以首字节数的计数值来说明该标识符长度，每个名字以0结束。技术字节数必须在0~63之间</li><li>查询类型：<ul><li>1：IPv4地址</li><li>2：名字服务器</li><li>5：规范名称</li><li>6：开始授权，标记一个区的开始</li><li>11：熟知服务，定义主机提供的网络服务</li><li>12：指针，把IP地址转化为域名</li><li>13：主机信息，给出主机使用的硬件和操作系统的表述</li><li>15：邮件交换，把邮件改变路由送到邮件服务器</li><li>28：IPv6地址</li><li>252：传送整个区的请求</li><li>255：对所有记录的请求</li></ul></li><li>查询类：通常为1，指Internet数据</li></ul></li><li>回答字段，授权字段和附加信息字段均采用资源记录的相同格式：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/WuZQrVt.gif" alt="资源记录格式" title="">                </div>                <div class="image-caption">资源记录格式</div>            </figure><ul><li>域名字段(不定长或者2字节)：记录资源数据对应的名字，它的格式和查询名字段格式相同。当报文中域名重复出现时，就需要使用2字节的偏移指针来替换。</li><li>类型、类：含义与查询问题部分的类型和类相同</li><li>生存时间：该字段表示资源记录的生命周期，一般用于当地址解析程序取出资源记录后决定保存以及使用缓存数据的时间</li><li>资源数据长度：表示资源数据的长度，以字节为单位，如果资源数据为IP则为0004</li><li>资源数据：该字段是可变长字段，表示按查询段要求返回的相关资源记录的数据</li></ul></li></ul></li></ol><h2 id="SMTP协议"><a href="#SMTP协议" class="headerlink" title="SMTP协议"></a>SMTP协议</h2><ol><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/9TsOlUJ.png" alt="邮件发送过程示意图" title="">                </div>                <div class="image-caption">邮件发送过程示意图</div>            </figure></li><li>SMTP在TCP协议25号端口监听连续请求。SMTP连接和发送过程：<ol><li>建立TCP连接</li><li>客户端发送HELO命令以标识发件人自己的身份，然后客户端发送MAIL命令；服务器端正希望以OK作为相应，表明准备接收</li><li>客户端发送RCPT命令，以表示该电子邮件的计划接收人，可以有多个RCPT行；服务器端则表示是否愿意为收件人接收邮件</li><li>协商结束，发送邮件，用命令DATA发送</li><li>以“.”号表示结束并将内容一起发出去，结束此次发送，用QUIT命令退出</li></ol></li></ol><h2 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h2><ol><li>ICMP是Internet控制报文协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。我们在网络中经常会使用到ICMP协议，比如我们经常使用的用于检查网络通不通的Ping命令，这个ping的过程实际上就是ICMP协议工作的过程。Ping命令利用ICMP回射请求报文和回射应答报文来测试目标系统是否可达。</li><li>执行ping后，首先向目标服务器发出回送请求报文。计算机送出的回送请求到达目标服务器后，服务器回答这一请求，向送信方发送回送请求。这个ICMP回送回答报文在IP层来看，与被送来的回送请求报文基本上一样。不同的只是，源和目标IP地址字段被交换了，类型字段里填入了表示回送回答的0，这两点，也就是，从送信方式来看，自己送出的ICMP报文从目标服务器哪里像鹦鹉学舌那样原样返回了</li></ol><h2 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h2><ol><li>HTTP消息由客户端到服务器的请求和服务器到客户端的响应组成。请求消息和响应消息都是由开始行（对于请求消息，开始行就是请求行，对于响应消息，开始行就是状态行），消息报头（可选），空行（只有CRLF的行），消息正文（可选）组成。</li><li>HTTP消息报头包括普通报头、请求报头、响应报头、实体报头。每一个报头域都是由名字+“：”+空格+值 组成，消息报头域的名字是大小写无关的。</li><li>请求报文格式如下：请求行 － 通用信息头 － 请求头 － 实体头 － 报文主体</li><li>应答报文格式如下：状态行 － 通用信息头 － 响应头 － 实体头 － 报文主体</li><li>请求行以一个方法符号开头，以空格分开，后面跟着请求的URI和协议的版本，格式如下：Method Request-URI HTTP-Version CRLF</li><li>请求方法有多种：<ol><li>GET 请求获取Request-URI所标识的资源</li><li>POST 在Request-URI所标识的资源后附加新的数据</li></ol></li><li>状态行格式如下：HTTP-Version Status-Code Reason-Phrase CRLF 其中Status-Code标识服务器发回的响应状态代码；Reason-Phrase标识状态代码的文本描述</li><li>状态码有三位数字组成，第一个数字定义了响应的类别，且有5种可能取值：<ol><li>1xx：指示信息，标识请求已接收，继续处理</li><li>2xx：成功，标识请求已被成功接收、理解、接受</li><li>3xx：重定向，要完成请求必须进行更进一步的操作</li><li>4xx：客户端错误，请求有语法错误或请求无法实现</li><li>5xx：服务器端错误，服务器位能实现合法的请求</li></ol></li><li>常见状态码、状态描述、说明<ol><li>200 OK 客户端请求成功</li><li>400 Bad Request 客户端请求有语法错误，不能被服务器理解</li><li>401 Unauthorized 请求未经授权，这个状态码必须和WW-Authenticate报文域一起使用</li><li>403 Forbidden 服务器收到请求，但是拒绝提供服务</li><li>404 Not Found 请求资源不存在</li><li>500 Internal Server Error 服务器发生不可预期的错误</li><li>503 Server Unavaliable 服务器当前不能处理客户端的请求，一段时间后可能恢复正常</li></ol></li><li>普通报头中，有少数报头域用于所有的请求和响应消息，但并不用于被传输的实体，只用于传输的消息。<ol><li>Cache-Control用于指定缓存指令，缓存指令是单向的，而且是独立的。<ul><li>请求时的缓存指令包括：no-cache(用于指示请求或响应消息不能缓存)、no-store、max-age、max-stale、min-fresh、only-if-cached</li><li>响应时的缓存指令包括：public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age、s-maxage</li></ul></li><li>Date普通报头域表示消息产生的日期和时间</li><li>Connection普通报头域允许发送指定连接的选项，例如指定连接是连续或者指定“close”选项，通知服务器，在响应完成后，关闭连接。在http1.1中，client和server都是默认对方支持长链接的， 如果client使用http1.1协议，但又不希望使用长链接，则需要在header中指明connection的值为close；如果server方也不想支持长链接，则在response中也需要明确说明connection的值为close。不论request还是response的header中包含了值为close的connection，都表明当前正在使用的tcp链接在当天请求处理完毕后会被断掉。以后client再进行新的请求时就必须创建新的tcp链接了。</li></ol></li><li>请求报头允许客户端向服务器传递请求的附加信息以及客户端自身的信息，常用的请求报头：<ol><li>Accept：用于指定客户端接收哪些类型的信息，Accept:image/gif表明客户端希望接收GIF图像格式的资源；Accept:text/html表明客户端希望接收html文本</li><li>Accept-Charset：用于指定客户端接受的字符集，如果在请求消息中没有设置这个域，缺省是任何字符集都可以接受</li><li>Accept-Encoding：指定可接受的内容编码</li><li>Accept-Language：指定一种自然语言</li><li>Authorization：用于证明客户端有权查看某个资源，当浏览器访问一个页面时，如果收到服务器的响应代码为401，可以发送一个包含Authorization请求报头域的请求，要求服务器对其进行验证</li><li>Host:发送请求是，该报头域是必须的，主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回</li><li>User-Agent：该请求报头域允许客户端将它的操作系统、浏览器和其他属性告诉服务器，不过，这个报头域不是必须的，如果我们自己编写一个浏览器，不适用User-Agent请求报头域，那么服务器端就无法得知我们的信息了</li></ol></li><li><p>请求报头举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /form.html HTTP/1.1 (CRLF)</span><br><span class="line">Accept:image/gif,image/x-xbitmap,image/jpeg,application/x-shockwave-flash,application/vnd.ms-excel,application/vnd.ms-powerpoint,application/msword,*/* (CRLF)</span><br><span class="line">Accept-Language:zh-cn (CRLF)</span><br><span class="line">Accept-Encoding:gzip,deflate (CRLF)</span><br><span class="line">If-Modified-Since:Wed,05 Jan 2007 11:21:25 GMT (CRLF)</span><br><span class="line">If-None-Match:W/"80b1a4c018f3c41:8317" (CRLF)</span><br><span class="line">User-Agent:Mozilla/4.0(compatible;MSIE6.0;Windows NT 5.0) (CRLF)</span><br><span class="line">Host:www.guet.edu.cn (CRLF)</span><br><span class="line">Connection:Keep-Alive (CRLF)</span><br></pre></td></tr></table></figure></li><li><p>响应报头允许服务器传递不能放在状态行中的附件响应信息，以及关于服务器的信息和对Request-URI所标识的资源进行下一步访问的信息；常用的响应报头：</p><ol><li>Location用于重定向接收者到一个新的位置，Location响应报头域常用在更换域名的时候</li><li>Server包含了服务器用来处理请求的软件信息，与User-Agent请求报头域是相对应的</li><li>WWW-Authenticate响应报头域西粗被包含在401响应消息中，客户端收到401响应消息时候，并发送Authorization报头域请求服务器对其进行验证时候，服务端响应报头就包含该报头域</li></ol></li><li>实体报头。请求和响应消息都可以传送一个实体，一个实体由实体报头域和实体正文组成，但并不是说实体报头域和实体正文要在一起发送，可以只发送实体报头域。实体报头定义了关于实体正文和请求所标识的资源的元信息。常用的实体报头：<ol><li>Content-Encoding：被用作媒体类型的修饰符，它的值指示了已经被应用到实体正文的附加内容的编码，因而要获得Content-Type报头域中所引用的媒体类型，必须采用相应的解码机制。Content-Encoding这样用于记录文档的压缩方法，eg：Content-Encoding：gzip</li><li>Content-Language：实体报头域描述了资源所用的自然语言。没有设置该域则认为实体内容将提供给所有的语言阅读者。eg：Content-Language:da</li><li>Content-Length：实体报头域用于指明实体正文的长度，以字节方式存储的十进制数字来表示</li><li>Content-Type：实体报头域用语指明发送给接收者的实体正文的媒体类型</li><li>Last-Modified：实体报头域用于指示资源的最后修改日期和时间</li><li>Expires：实体报头域给出响应过期的日期和时间。eg：为了让浏览器不要缓存页面，我们也可以利用Expires实体报头域，设置为0</li></ol></li><li>HTTP协议通常是承载于TCP洗衣之上的，有时也承载于TLS或SSL协议层之上，这时称之为HTTPS协议。默认HTTP的端口号为80，HTTPS的端口号为443</li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/PiBPPM0.png" alt="HTTP请求报文" title="">                </div>                <div class="image-caption">HTTP请求报文</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/EZ63EEL.png" alt="HTTP响应报文" title="">                </div>                <div class="image-caption">HTTP响应报文</div>            </figure></li><li>GET与POST方法有以下区别：<ol><li>Get是向服务器发索取数据的一种请求，而Post是向服务器提交数据的一种请求，要提交的数据位于信息头后面的实体中。</li><li>在客户端，Get方式在通过URL提交数据，数据在URL中可以看到；POST方式，数据放置在HTML HEADER内提交</li><li>GET方式提交的数据最多只能有1024字节，而POST则没有此限制</li></ol></li></ol><h2 id="NetBIOS"><a href="#NetBIOS" class="headerlink" title="NetBIOS"></a>NetBIOS</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/OAHwfCG.png" alt="NetBIOS实现过程" title="">                </div>                <div class="image-caption">NetBIOS实现过程</div>            </figure><ol><li>NetBIOS协议是一种在局域网上的程序可以使用的应用程序编程接口，为v横须提供了请求低级服务的统一的命令集，作用是为了给局域网提供网络以及其他特殊功能，几乎所有的局域网都是在NetBIOS协议的基础上工作的。NetBIOS协议，简单来说就是通过访问设备名称就可以实现对IP地址的访问。</li><li>在Windows操作系统中，默认情况下在安装TCP/IP协议后会自动安装NetBIOS协议。</li><li>ping主机名的第一个数据包就是NBNS(NetBIOS Name Server)协议包，它是TCP/IP上的NetBIOS协议族的一部分，它在基于NetBIOS名称访问的网络上提供主机名和地址映射方法。NBNS是动态DNS的一种。Microsoft的NBNS实现称为WINS。NetBIOS的报文类型较多，结构复杂，在不同的网络化境和不同的用途中会使用不同的报文，可用端口进行区分。如图所示NetBIOS协议架构<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/MxZkqby.jpg" alt="NetBIOS协议架构" title="">                </div>                <div class="image-caption">NetBIOS协议架构</div>            </figure></li><li>NetBIOS数据报有很多不同格式，主要取决于服务和信息类型，以及用以传送NetBIOS数据报的传输协议。NetBIOS协议架构包含三种基本服务：NAME、SESSION和DATAGRAM，其中NAME所用协议就是NBNS协议</li><li>WINS协议使用的报文即为NetBIOS的名字报文，其总体格式如下图所示<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/i2pWvfO.png)其中2字节通用标志中更详细的字段划分为：操作代码(5bits)操作标志(7bits)结果代码(4bits" alt="NetBIOS名字报文格式" title="">                </div>                <div class="image-caption">NetBIOS名字报文格式</div>            </figure><ol><li>事物ID：请求方为每次名字服务请求所设定的ID值，响应方在相应的响应报文中要填入这个事物ID值</li><li>操作代码：指示报文的类型,最高位为0表示数据包为Reauest请求，最高位为1表示数据包为Response应答，其余4个比特均为0</li><li>操作标志：操作标志位，最低位为1表示广播或者多播，最低位为0表示单播，其他位均为0</li><li>结果代码：在相应报文中指示请求的结果，一般为0</li><li>问题记录个数：请求查询问题的个数，对于Request数据包，该值为1，对于Response数据包，该值为0</li><li>回答记录个数：对于Response数据包有用，Response数据包中响应问题的个数，一般为1</li><li>权威记录个数：在权威记录部分的记录数量，用不到的时候为0</li><li>附加记录个数：在附加记录部分数量，用不到的时候为0</li></ol></li><li>报文的前12字节总称NetBIOS名字报文的首部，通过首部可以判断是否为名字查询的报文。NetBIOS名字报文中最常见的是携带问题记录的报文，问题记录的格式是：问题名称(若干字节) 问题类型(2字节) 问题类别(2字节)。通过携带问题记录的报文，我们可以得到要查询的名字字符，如果和本机名相符，就发送报文响应，相应中带有IP地址，发送广播的主机就会得到该IP地址</li><li>NETBIOS会话报文具有通用的4字节首部和与类型相关的报文内容：类型(1字节) 标志(1字节) 长度(2字节) 内容(若干字节)<ol><li>类型：指名NetBIOS会话报文的类型，可用的值有：<ul><li>0x00:会话消息</li><li>0x81:会话请求</li><li>0x82:正面会话响应</li><li>0x83:负面会话响应</li><li>0x84:重定向会话响应</li><li>0x85:会话保活</li></ul></li><li>标志：0~6位保留未用，第7位作为扩展的长度位，使NetBIOS会话报文的内容部分最多可以达到128K字节</li><li>长度：NetBIOS会话报文的内容部分的长度，不包括首部的4字节</li></ol></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/O24egoi.png" alt="NBNS" title="">                </div>                <div class="image-caption">NBNS</div>            </figure>计算机1向计算机2的137端口发送一个NODE STATUS REQUEST请求数据包，计算机2收到该数据包后，向计算机1返回一个NODE STATUS RESPONSE响应数据包，该数据包中包含计算机2的MAC地址、机器地址、所属的工作组等信息</li><li>NODE STATUS REQUEST数据包由12字节的HEADER域和38字节的QUESTION ENTRIES域两个部分组成，HEADER域分为8个字段：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/VKpTVaA.png" alt="NetBIOS HEADER" title="">                </div>                <div class="image-caption">NetBIOS HEADER</div>            </figure></li><li>QUESTION ENTRIES域组成<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/93RGC0D.png" alt="QUESTION ENTRIES" title="">                </div>                <div class="image-caption">QUESTION ENTRIES</div>            </figure>其中：<ul><li>QUESTION_NAME为要查询的远程计算机的名称，长度为34字节。NBNS规定，计算机NetBIOS的名称不超过16字节，且最后一个字节必须为0x0；</li><li>QUESTION_TYPE对于REQUEST数据包取值为0x0021</li><li>QUESTION_CLASS取值为0x0001</li></ul></li><li>当某台机器的137端口收到NODE STATUS REQUEST请求数据包之后，由该机器的NETBIOS服务随即生成并返回一个NODE STATUS RESPONSE响应数据包。该响应数据包由HEADER域和RESOURCE RECORD域两部分组成。RESOURCE RECORD域组成如图所示：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/IPEjagx.png" alt="RESOURCE RECORD" title="">                </div>                <div class="image-caption">RESOURCE RECORD</div>            </figure><ul><li>RP_NAME：34字节，与Request数据包的QUESTION_NAME格式定义相同</li><li>RP_TYPE：与Request数据包中的QUESTION_TYPE字段相同</li><li>RP_CLASS：与前面Request数据包的QUESTION_CLASS字段取值相同</li><li>TTL：4字节，取值为0x00000000</li><li>RDLENGTH:表示从NUM_NAMES字段开始到整个RESOURCE RECORD结束共有多少个字节</li><li>NUM_NAMES：表示紧随其后的NODE_NAME ARRAY数组的元素个数，数组的每个元素具有NODE_NAME结构，如图所示为NODE_NAME结构：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/ArSP1Xp.png" alt="NODE_NAME" title="">                </div>                <div class="image-caption">NODE_NAME</div>            </figure></li><li>NETBIOS FORMAT NAME表示远程主机的机器名或者组名，具体依赖NAME_FLAG字段的取值；</li><li>NAME_FLAGs：当最高位为1时，NETBIOS FORMAT NAME字段中存储的是Group NetBIOS名称，即工作组名，当最高位为0时，NETBIOS FORMAT NAMR字段中存储的是机器名</li><li>STATICS：包含的字段非常多，开始6字节是远程主机的MAC地址</li></ul></li></ol><h2 id="SNTP协议"><a href="#SNTP协议" class="headerlink" title="SNTP协议"></a>SNTP协议</h2><ol><li>SNTP是简单网络时间协议，是用来使设备时间同步化的一种协议，在一些应用场合里，时间同步时十分重要的，贴别是随着设备运行时间增长，时间误差就越来越大，因为设备中晶振自身会产生误差，那么SNTP协议就可以解决这个问题。</li><li>报文格式：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/y9GprbA.gif" alt="SNTP报文格式" title="">                </div>                <div class="image-caption">SNTP报文格式</div>            </figure><ul><li>LI: 跳跃指示器</li><li>VN：版本号</li><li>Mode：模式<ul><li>0——预留</li><li>1——对称行为</li><li>3——客户机</li><li>4——服务器</li><li>5——广播</li><li>6——NTP控制信息</li></ul></li><li>Stratum：对本地时钟级别的整体识别</li><li>Poll：有符号整数表示连续信息间的最大间隔</li><li>Precision：有符号整数表示本地时钟精确度</li><li>Root Delay：有符号固定点序号表示主要参考源的总延迟，很短时间内的位15到16间的分段点</li><li>Root Dispersion：无符号固定点序号表示相对主要参考源的正常差错，很短时间内的位15到16间的分段点</li><li>Reference Identifier：识别特殊参考源</li><li>Originate Timestamp：这是向服务器请求分离客户机的时间，采用64位时标格式</li><li>Receive Timestamp：这是向服务器请求到达客户机的时间，采用64位时标格式</li><li>Transmit Timestamp：这是客户机答复分离服务器的时间，采用64位时标格式</li><li>Authenticator：当实现了NTP认证模式主要标识符和信息数字域就包括已定义的信息认证代码信息</li></ul></li><li>原理图：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/kKI2sUY.png" alt="SNTP原理示意图" title="">                </div>                <div class="image-caption">SNTP原理示意图</div>            </figure></li></ol><h2 id="TFTP协议"><a href="#TFTP协议" class="headerlink" title="TFTP协议"></a>TFTP协议</h2><ol><li>TFTP是TCP/IP协议族中的而一个用来在客户机和服务器之间进行简单文件传输的协议，基于UDP协议实现，端口号为69.</li><li>TFTP是专为小文件喜欢书设计的，提供不复杂、开销小的文件传输服务，缺乏标准FTP协议的许多特征。</li><li>TFTP只能从远程服务器上读、写文件或者读写文件传送给远程服务器。它不能列出目录并且当前不提供用户认证</li><li>TFTP有3中传输模式：<ol><li>netASCII模式即8位网络ASCII码</li><li>octet即八位组模式</li><li>邮件模式，这种模式现在已经废弃不用了</li></ol></li><li>TFTP数据包结构<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/eQqDEd2.png" alt="TFTP报文格式" title="">                </div>                <div class="image-caption">TFTP报文格式</div>            </figure></li><li>操作码<ul><li>1=RRQ，读请求，由客户端使用，用来建立一条从服务器读数据的连接</li><li>2=WRQ，写请求，由客户端使用，用来建立一条把数据写到服务器的连接，它的格式与RRQ相同</li><li>3=data</li><li>4=ACK</li><li>5-error</li></ul></li><li>Filename（文件名字段）说明客户要读或写的位于服务器上的文件，文件名是NETASCII码字符，以0结束。</li><li>Mode（模式字段）是一个ASCII码串netASCII或octet，同样以0字节结束。netASCII表示数据是以成行的ASCII码字符组成，以两个字节一回车字符后跟换行符。OCTET模式用于传输文件，这种文件在源机上以8位格式存储。在使用MAIL模式时，用户可以在FILE处使用接收人的地址，这个地址可以是用户名或@主机的形式，如果是后一种形式，允许主机使用电子邮件传输此文件。如果使用MAIL类型，包必须以WRQ开始，否则它与NETASCII完全一样</li><li>DATA数据包还包括一个数据块号和数据，数据块号域从1开始编码，每个数据块加1，这样接收方可以确定这个包是新数据还是已经接收过的数据。数据域从0字节到512字节。如果数据域是512字节，则它不是最后一个包，如果小于512字节则表示这个包是最后一个包。如果最后一个包正好512字节，则再发送一个0字节的包用于表示结束</li><li>ACK包用于确认数据包以手法哦。当接收方收到一个数据包后，回享发送方发送一个ACK包，而发行方则会在收到一个ACK包后继续发送下一个包。若发送完未能收到ACK包，则会使用超时机制，重新发送刚才的数据包。除了ACK和用于中断的包外，其他的包均需得到确认。发出新的数据包等于确认上次的包。WRQ和DATA包由ACK或ERROR数据包确认，而RRQ数据包由DATA或ERROR数据包确认</li><li>ERROR数据包可以被其他任何类型的包确认，错误码指定错误的类型，它用于服务器不能处理读请求或者写请求的情况。在文件传输过程中的读和写差错也会导致传送这种报文，接着停止传输。差错编号字段给出一个数字的差错码，跟着是一个ASCII表示的差错报文字段，可能包含额外的操作系统说明<ul><li>1：文件未找到</li><li>2：访问非法</li><li>3：磁盘满或超过分配的配额</li><li>4：非法的TFTP操作</li><li>5：位置的传输ID</li><li>6：文件已经存在</li><li>7：没有类似的用户</li></ul></li><li>通信流程：任何一个传输进程都以WRQ或者RRQ开始，收到一个确定应答并建立一个连接。创建连接时候，通信双方随机选择一个TID，因为是随机选择，因此两次选择同一个ID的可能性就很小了。每个包包括两个TID，发送者ID和接收者ID。这些ID用于在UDP通信时选择端口，在第一次请求的时候它会将请求发到TID 69，也就是服务器的69端口上，应答时，服务器使用一个选择好的TID作为源TID，并用上一个包中的TID作为目的ID进行发送。这两个被选择的ID在随后的通信中会被一直使用。连接成功后文件就以固定的512字节块的长度进行发送。每个数据包都包含一个数据块，块号从1开始而且是连续的。因此对于写入请求的确定是一个比较特殊的情况，因此它的包的包号是0.再发送下一个包之前，数据块必须得到确认响应包的确认。如果一个数据包的大小小于512字节，则表明传输结束。如果包在网络中丢失，接收端就会在超市以后重新传输最后一个未被确认的数据包，这就是导致丢失包的发送者重新发送丢失包。通信的双方都是数据的发出者与接收者，一方传输数据接收应答，另一方发出应答接收数据。发送者需要保留一个包在手头用于重新发送，由LOCk确认响应保证所有过去的包都已收到。大部分的错误会导致连接中断，错误由一个错误的数据包引起。这个包不会被确认，也不会被重新发送，因此另一方无法接收到。如果错误包丢失，则使用超时机制。错误主要由下面三种情况引起的：不能满足请求，收到的数据包内容错误，对需要资源的访问丢失。TFTP只有在一种情况下不中断连接，这种情况是源端口号不正确，在这种情况下，指示错误的包会被发送到源机。这个协议限制很多，这都是为了实现起来比较方便而进行的。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/A8vhQRY.jpg" alt="TFTP通信流程" title="">                </div>                <div class="image-caption">TFTP通信流程</div>            </figure></li><li>TFTP的工作过程很想停止等待协议，发送完一个文件块后就等待对方的确认，确认时应指名所确认的块号。发送完数据后在规定的时间内收不到确认就要重发数据PDU（协议数据单元），发送确认PDU的一方若在规定时间内收不到下一个文件块，也要重发确认PDU。这样保证文件传送不致因某一个数据报的丢失而告失败</li></ol><h2 id="FTP协议"><a href="#FTP协议" class="headerlink" title="FTP协议"></a>FTP协议</h2><ol><li>FTP（File Transfer Protocol，文件传输协议），用于Internet上的控制文件的双向传输</li><li>FTP协议使用TCP端口中的20和21这两个端口，其中20用于传输数据，21用于传输控制信息。但是是否使用20作为传输数据的端口与FTP使用的传输模式相关，如果采用主动模式，那么数据传输端口就是20；如果采用被动模式，则具体最终使用哪个端口要服务器和客户端协商决定</li><li>FTP支持两种模式，一种方式叫做Standard（也就是PORT方式，主动方式），一种是Passive（也就是PASV，被动方式）。Standard模式，FTP的客户端发送PORT命令到FTP服务器，Psaaive模式下FTP的客户端发送PASV命令到FTP Server<ol><li>Port<ul><li>FTP客户端首先和FTP服务器的TCP 21端口建立连接，通过这个通道发送命令，客户端需要接收数据的时候在这个通道上发送PORT命令。PORT命令包含了客户端用什么端口接收数据。在传送数据的时候，服务端通过自己的TCP 20端口连接至客户端的指定端口发送数据。FTP server必须和客户端建立一个新的连接用来传送数据</li></ul></li><li>Passive<ul><li>在建立控制通道的时候和Standard模式类似，但建立连接以后发送的不是Port命令，而是Pasv命令。FTP服务器收到Pasv命令后，随机打开一个高端端口（端口号大于1024）并且通知客户端在这个端口上传送数据的请求，客户端连接FTP服务器此端口，然后FTP服务器将通过这个端口进行数据的传送，这个时候FTP server不再需要建立一个新的和客户端之间的连接</li></ul></li></ol></li><li>很多防火墙在设置的时候是不允许接收外部发起的连接的，所以许多位于防火墙后或内网的FTP服务器不支持PASV模式，因为客户端无法穿过防火墙打开FTP服务器的高端端口；而许多内网的客户端不能用PORT模式登陆FTP服务器，因为服务器的TCP 20无法和内部网络的客户端建立一个新的连接，造成无法工作</li><li>传输方式：<ol><li>ASCII传输<ul><li>假定用户正在拷贝的文件包含简单的ASCII码文本，如果在远程机器上运行的是不同的操作系统，当文件传输时ftp通常会自动地调整文件的内容以便于把文件解释成另外那台计算机存储文本文件的格式。但是常常有这样的情况，用户正在传输的文件包含的不是文本文件，他们可能是程序、数据库，字处理文件或者压缩文件。在拷贝任何非文本文件之前，用binary命令告诉ftp逐字拷贝，不要对这些文件进行处理，即使用二进制传输方式</li></ul></li><li>二进制传输<ul><li>在二进制传输中，保存文件的位序，以便原始和拷贝的是逐位一一对应的。计时目的机器上包含位序列的文件时没有意义的。如果在ASCII方式下传输二进制文件，即使不需要也仍会转译。这会使传输稍微变慢，也会损坏数据，是文件变得不能使用。（在大多数计算机上，ASCII方式一般假设每一字符的第一有效位无意义，因为ASCII字符组合不使用它。）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/8EpzUrL.jpg" alt="FTP连接" title="">                </div>                <div class="image-caption">FTP连接</div>            </figure></li></ul></li></ol></li><li>一般来讲，控制连接一直保持到客户-服务器连接的全过程，但数据连接可以根据需要随时开启和结束。而通用的传输方式是流方式，并且文件结尾是以关闭数据连接为标志。这意味着对每一个文件传输或目录列表来说都要建立一个全新的数据连接</li><li>一个典型的主动方式的过程：<ol><li>客户端打开一个随机的端口（端口号大于1024，这里记为x），同时一个FTP进程连接至服务器的21号命令端口。此时，源端口为客户端随机端口x，远程端口为服务器21.正是由于客户端发出命令要求建立数据连接，所以数据连接是在客户的控制下建立的</li><li>客户通常在客户端主机上为所在的数据连接端选择一个临时端口号。客户从该端口发布一个被动的打开</li><li>客户使用PORT命令从控制连接上把端口号法相服务器</li><li>服务器在控制连接上接收端口号，并向客户端主机上的端口发布一个主动的打开。服务器的数据连接端一直使用端口20</li></ol></li><li>命令处理<ol><li>接入命令：USER、PASS、ACCT、REIN、QUIT、ABOR</li><li>文件管理命令：CWD、CDUP、DELE、LIST、NLIST、MKD、PWD、RMD、RNFR、RNTO和SMNT</li><li>数据格式化命令：TYPE、STUR、MODE</li><li>端口定义命令：PORT、PASV</li><li>文件传送命令：RETR、STOR、APPE、STOU、ALLO、REST、STAT</li><li>杂项命令：HELP、NOOP、SITE、SYST</li></ol></li><li>每个FTP命令至少产生一个响应，响应有两个部分：三位数字的树以及紧随后面的正文，数字部分定义代码，正文部分定义所需要的参数和额外的解释。第一位数字定义命令的状态，第二位数字定义命令的意义，第三位数字提供附加信息</li><li>当数据通过数据流传输时，控制流处于空闲状态。而当控制流空闲很长时间后，客户端的防火墙会将其会话置为超时，这样当大量数据通过防火墙时，会产生一些问题。此时，虽然文件可以成功传输，但因为控制会话会被防火墙断开，传输会产生一些错误</li><li>主动模式<ol><li>客户端打开一个随机的端口（端口号大于1024，这里称x），同时一个FTP进程连接至服务器的21号命令端口，此时，源端口为随机端口x，在客户端，远程端口为21，在服务器</li><li>客户端开始监听端口(x+1),同时向服务器发送一个端口命令（通过服务器的21号命令端口），此命令告诉服务器客户端正在监听的端口号并且已准备好从此端口号接收数据。这个端口号就是我们所知的数据端口</li><li>服务器打开20号源端口并且建立和客户端数据端口的链接。此时源端口为20，远程数据端口为（x+1）</li><li>客户端通过本地的数据端口建立一个和服务器20号端口的链接，然后向服务器发送一个应答，告诉服务器它已经建立好了一个连接</li></ol></li><li>被动模式<ol><li>在被动方式FTP中，命令链接和数据连接都是由客户端发起，这样就可以解决从服务器到客户端的数据端口的入向链接被防火墙过滤掉的问题</li><li>当开启一个FTP连接时，客户端打开两个任意的非特权本地端口（N&gt;1024和N+1）。第一个端口连接服务器的21端口，但与主动方式的FTP不同，客户端不会提交PORT命令并允许服务器来回连它的数据端口，而是提交PASV命令。这样做的结果是服务器会开启一个任意的非特权端口（P&gt;1024），并发送PORT命令给客户端。然后客户端发起从本地端口N+1到服务器端口P的连接用来传送数据</li><li>对于服务器端的防火墙来说，必须允许下面的通讯才能支持被动方式的FTP：<ol><li>从任何大于1024的端口到服务器的21端口（客户端的初始化连接）</li><li>服务器的21端口到任何大于1024的端口（服务器响应到客户端的控制端口的连接）</li><li>从任何大于1024端口到服务器的大于1024端口（客户端初始化数据连接到服务器指定的任意端口）</li><li>服务器的大于1024端口到远程的大于1024的端口（服务器发送ACK响应和数据到客户端的数据端口）</li></ol></li></ol></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" title="">                </div>                <div class="image-caption">suda-morris</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;W5500网络模块简介&quot;&gt;&lt;a href=&quot;#W5500网络模块简介&quot; class=&quot;headerlink&quot; title=&quot;W5500网络模块简介&quot;&gt;&lt;/a&gt;W5500网络模块简介&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;公司：Wiznet&lt;/li&gt;
&lt;li&gt;使用硬件逻辑门电路
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="W5500" scheme="https://suda-morris.github.io/tags/W5500/"/>
    
  </entry>
  
  <entry>
    <title>Linux Kernel Introduction</title>
    <link href="https://suda-morris.github.io/2015/07/20/linux-kernel/"/>
    <id>https://suda-morris.github.io/2015/07/20/linux-kernel/</id>
    <published>2015-07-20T15:30:54.000Z</published>
    <updated>2018-07-05T01:38:09.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内核make流程"><a href="#内核make流程" class="headerlink" title="内核make流程"></a>内核make流程</h2><ol><li>make %config和make menuconfig的目的是为了生成.config文件，而Kconfig作为生成make menuconfig等图形配置界面工具而存在</li><li>.config 文件中决定了内核中的哪些代码被编译进内核，哪些代码被当做模块编译</li><li>make根据.config中的描述，通过解析Makefile文件来进行编译，最终生成zImage文件</li><li>流程中设计的文件与命令，再加上Linux内核的scripts目录构成了内核的Kbuild机制，内核通过这种方式，最终编译得到内核镜像文件zImage</li></ol><h2 id="KBuild机制实现原理"><a href="#KBuild机制实现原理" class="headerlink" title="KBuild机制实现原理"></a>KBuild机制实现原理</h2><ol><li>从编译过程来看，每一个被编译的目录下都会生成一个build-in.o文件，他们都由自己目录下的源代码编译生成，所有目录下的build-in.o文件最终链接生成vmlinux文件，最后由内核压缩程序加工vmlinux生成内核压缩镜像文件zImage</li><li>总原理来看，Kbuild机制只会把obj-y的值编译进内核。每个Makefile文件中都有这个变量，只不过obj-后面一半都跟着一个变量，这个变量的值来自于.config。</li><li>待编译目录下的Makefile，如有Kbuild，则Kbuild优先，唯一使用Kbuild而不是Makefile的就是顶层目录</li></ol><h2 id="Kconfig语法"><a href="#Kconfig语法" class="headerlink" title="Kconfig语法"></a>Kconfig语法</h2><ol><li>config<ul><li>为menu或者choice中的一个选项条目</li><li>config后面常跟一个变量名，比如ARM，那么在.config中将以CONFIG_ARM=y或n的形式出现</li><li>下一行写该变量的取值类型,可以是bool,tristate,string,hex,int</li><li>default为变量缺省值，可以被用户设置值覆盖</li><li>prompt后边是出现在配置菜单中的对应于一个配置选项的文字，没有prompt条目，将使得用户不能在配置界面中显示并配置该配置选项</li><li>depends on var表示该变量必须在var被设置的情况下才能进行设置，否则取值为n，即使default为y</li><li>select var表示它将影响到变量var，使得var至少应该配置为y或者m</li><li>help中的文字将作为配置界面中的帮助信息</li></ul></li><li>menu<ul><li>在menu和endmenu中间可配置若干config条目</li></ul></li><li>choice<ul><li>在choice和endchoice之间可定义若干config条目。choice中的config条目只能有2种类型：bool或者tristate，且不能同时有这两种变量。对于bool型变量只能在多个选择中选择1个为y；对于tristate型变量，要么将多个设置为m，要么仅将1个设为y，其余为n。</li></ul></li><li>comment<ul><li>用于定于帮助信息，将出现在配置界面的第一行，并且还会出现在配置文件.config中作为注释</li></ul></li><li>source<ul><li>由于内核源代码中大多数目录下都有各自的Kconfig文件，因此需要一种手段将所有的Kconfig文件组织为一个整体。这就是source的功能，它用于引入另一个Kconfig文件，有点类似于C语言中的#include</li></ul></li></ol><h2 id="Makefile文件精解"><a href="#Makefile文件精解" class="headerlink" title="Makefile文件精解"></a>Makefile文件精解</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#如果CONFIG_ATL1=y，将递归进入本目录的子目录atl1，并根据该子目录下的Makefile文件的内容决定该子目录如何继续拧编译，否则将不进入本目录的子目录atl1进行编译</span><br><span class="line">obj-$(CONFIG_ATL1) += atl1/</span><br><span class="line"></span><br><span class="line">#如果.config中变量CONFIG_GIANFAR=y，那么将变异本目录下的gianfar.c,gianfar_ethtool.c,gianfar_mii.c,gianfar)sysfa.c文件并将其功能集成进zImage；如果.config文件中变量CONFIG_GIANFAR=m，那么将编译本目录下的gianfar.c,gianfar_ethtool.c,gianfar_mii.c,gianfar_sysfs.c文件生成模块gianfar.ko；否则将编译gianfar.c,gianfar_ethtool.c</span><br><span class="line">gianfar_mii.c,gianfar_sysfa.c</span><br><span class="line">obj-$(CONFIG_GIANFAR) += gianfar_driver.o</span><br><span class="line">gianfar_driver-objs := gianfar.o\</span><br><span class="line">gianfar_ethtool.o\</span><br><span class="line">gianfar_mii.o\</span><br><span class="line">gianfar_sysfs.o</span><br></pre></td></tr></table></figure><h2 id="zImage文件生成过程"><a href="#zImage文件生成过程" class="headerlink" title="zImage文件生成过程"></a>zImage文件生成过程</h2><ol><li>内核代码首先被编译生成vmlinux，放在Linux源码的顶层目录下</li><li>这个vmlinux可执行文件又通过arm-linux-objcopy命令转化为二进制代码文件Image（放在arch/arm/boot目录下），其实这个Image文件才是真是的内核代码文件，因为这个文件会比较大，所以内核会对它做压缩处理</li><li>为了最大化减小Image的体积，内核调用gzip工具吧Image压缩成piggy.gz文件</li><li>为了让内核具有自引导功能，在arch/arm/boot/compressed目录下有head.o,misc.o两个文件构成解压和自引导代码，而让真实的piggy.gz文件也参与编译，最终生成了梁歪一个vmlinux文件，放在arch/arm/boot/compressed目录下，并最终调用arm-linux-objcopy生成二进制文件zImage。</li><li>综上，zImage文件由arch/arm/boot/compressed目录下的head.S和misc.c文件（自解压程序）+内核真实代码文件组成</li></ol><h2 id="Linux内核体系结构"><a href="#Linux内核体系结构" class="headerlink" title="Linux内核体系结构"></a>Linux内核体系结构</h2><ol><li>内核和用户空间的应用程序使用不同的保护地址空间。每个用户空间的进程都使用自己的虚拟地址空间，内核则占用单独的地址空间，一般情况下，应用程序无法直接访问内核空间地址。因此，应用程序想访问内核必须通过某种特殊的方式从用户空间切换到内核空间。这个特殊的方法称为：系统调用</li><li>考虑到频繁的系统调用会影响操作系统的性能（切换开销、硬件损耗等），标准C库GNU C Library（glibc）提供了新的连接内核的接口，这些接口同样通过系统调用访问内核，不过通常都带有缓冲区，将数次操作合并为一次，以有效减少系统调用的次数</li><li>综上，Linux内核可以分为3层：<ol><li>最上面一层是系统调用接口，它实现了一些基本功能，如read和write。</li><li>系统调用接口之下是体系架构无关的内核，这部分内核对于Linux支持的所有处理器体系结构是通用的。</li><li>其下是体系架构相关的部分，通常称为BSP。</li></ol></li></ol><h2 id="内核配置过程"><a href="#内核配置过程" class="headerlink" title="内核配置过程"></a>内核配置过程</h2><ol><li>运行make menuconfig时，配置工具首先分析与体系结构对应的arch/<arch>/Kconfig文件，arch/<arch>/Kconfig文件除本身包含一些与体系结构相关的配置项和配置菜单以外，还通过source语句引入下一层的Kconfig文件。</arch></arch></li></ol><h2 id="内核头文件命名规则"><a href="#内核头文件命名规则" class="headerlink" title="内核头文件命名规则"></a>内核头文件命名规则</h2><ol><li><code>#include &lt;asm/xxx.h&gt;</code>：CPU相关的头文件</li><li><code>#include &lt;linux/xxx.h&gt;</code>：平台无关的头文件</li><li><code>#include &lt;plat/xxx.h&gt;</code>：芯片公司相关的头文件</li><li><code>#include &lt;mach/xxx.h&gt;</code>：开发板相关的头文件</li></ol><h2 id="内核组件"><a href="#内核组件" class="headerlink" title="内核组件"></a>内核组件</h2><ol><li>Linux内核主要由系统调用（SCI），进程管理（PM），内存管理（MM），虚拟文件系统（VFS），网络协议栈（NET），CPU体系结构和设备驱动（DD）等7个组件组成<ol><li>SCI层提供了某些机制执行从用户空间到内核的函数调用。这些接口依赖于体系结构。</li><li>进程管理的重点是进程的执行。在内核中这些进程称为线程，代表了单独的处理器虚拟化（线程代码、数据、堆栈和CPU寄存器）。在用户空间，通常使用进程这个术语，不过Linux实现并没有区分这两个概念（进程和线程）。内核通过SCI提供了一个应用程序编程接口来创建一个新进程（fork、exec、kill、exit），并在它们之间进行通信和同步</li><li>内核管理的另外一个重要资源是内存，为了提高效率，内存按照内存页的方式进行管理，页大通常是4KB。Linux内存管理主要负责内存的分配和释放，以及物理地址到虚拟地址的映射等</li><li>虚拟文件系统是Linux内核中非常有用的一个组件，因为它为文件系统提供了一个通用的接口抽象。VFS在SCI和内核支持的文件系统之间提供了一个交换层。在VFS上面，是对诸如open、close、read和write之类的系统调用函数的一个通用抽象。在VFS下面是对文件系统的抽象，它定义了上层函数的实现方式。文件系统层之下是缓冲区缓存，它为文件系统层提供了一个通用函数集，这个缓存层通过将数据保留一段时间，优化对物理设备的访问。缓冲区缓存之下是设备驱动程序，它实现了特定物理设备的接口。</li><li>网络协议栈在设计上采用分层思想，从上到下分为系统调用接口、协议无关接口层、网络协议层、设备无关接口层和设备驱动层。其中协议无关层就是socket层，提供了一组通用函数来支持各种不同协议。</li></ol></li></ol><h2 id="字符设备驱动"><a href="#字符设备驱动" class="headerlink" title="字符设备驱动"></a>字符设备驱动</h2><ol><li>设备号<ol><li>内核使用dev_t来描述设备号，其实质是unsigned int32位整数，其中高12位是主设备号，低20位是次设备号</li><li>int register_chrdev_region(dev_t from,unsigned count,const char* name);调用该函数向内核注册设备号</li></ol></li><li><p>设备信息的描述</p><figure class="highlight c"><figcaption><span>cdev</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cdev</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kobject</span> <span class="title">kobj</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> *<span class="title">ops</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span></span><br><span class="line"><span class="keyword">dev_t</span> dev;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设备行为的描述</p><figure class="highlight c"><figcaption><span>file_operations</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">ssize_t</span> (*read)(struct file*,<span class="keyword">char</span> __user*,<span class="keyword">size_t</span>,<span class="keyword">loff_t</span>*);</span><br><span class="line"><span class="keyword">ssize_t</span> (*write)(struct file*,<span class="keyword">const</span> <span class="keyword">char</span> __user*,<span class="keyword">size_t</span> <span class="keyword">loff_t</span>*);</span><br><span class="line"><span class="keyword">int</span> (*open)(struct inode*,struct file*);</span><br><span class="line"><span class="keyword">int</span> (*release)(struct inode*,struct file*);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>相关的注册函数</p><ol><li>int cdev_add(struct cdev*p,dev_t dev,unsigned count);</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;内核make流程&quot;&gt;&lt;a href=&quot;#内核make流程&quot; class=&quot;headerlink&quot; title=&quot;内核make流程&quot;&gt;&lt;/a&gt;内核make流程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;make %config和make menuconfig的目的是为了生成.con
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="Linux" scheme="https://suda-morris.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Review in C++ Language</title>
    <link href="https://suda-morris.github.io/2015/07/20/review-in-cpp/"/>
    <id>https://suda-morris.github.io/2015/07/20/review-in-cpp/</id>
    <published>2015-07-20T01:42:00.000Z</published>
    <updated>2018-07-05T01:38:09.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><ol><li>标准C++中，iostream中常见的操作算子(manipulator):flush,endl,oct(后面跟的数据解析成八进制)，hex(后面跟的数解析成十六进制)，dec(后面跟的数解析成十进制)，boolalpha(后面跟的数据解析成布尔类型，并用true和false来显示)，showpos(后面跟的数据显示正负号)，fixed(后面跟的数不要四舍五入),noshowpos(后面跟的数如果是正数就显示+号),showpoint(后面跟的数据显示小数点)，scientific(后面跟的数据以科学计数法的形式表示);在Qt中附加的一些操作算子：forcesign(后面的数据显示正负号),forcepoint(后面的数据显示小数点),noforcesign(后面的数据如果是正数就不显示+号)</li><li>标准C++的iostream中，getline(cin,your_string)语句能够从标准输入流中提取一行字符串</li><li>在Qt中很容易用与iostream对应的同一个名称定义QTextStream，由于控制台输入和输出主要用在调试过程，所以Qt提供了一个全局函数qDebug(),用它可以方便地将消息发送到控制台，且具有灵活的接口</li><li>流被用来读取/写入文件、连接网络和处理字符串，它有一个有用的特性是易于从混合数据类型中得到字符串。</li><li>STL中的字符串流：std::ostringstream,常用来定义一个string_buffer;</li><li>STL中的文件流std::ofstream,用来定义一个文件流管道如ofstream outf后绑定一个文件：outf.open(“file path”)</li><li>STL中的输入文件流std::ifstream,打开文件instream inf;inf.open(“file path”),判断是否读到了文件末尾inf.eof(),读取一行数据getline(inf,newstr)</li><li>STL中的stringstream对应于Qt里面的QString，STL中的fstream对应于Qt里面的QFile，STL中的iostream对应于Qt中的QTextStream</li></ol><h2 id="运算符new和delete"><a href="#运算符new和delete" class="headerlink" title="运算符new和delete"></a>运算符new和delete</h2><ul><li>new运算符从堆(heap)中分配内存空间，并且返回指向新分配的对象的指针，如果由于某种原因无法完成内存分配，就会抛出一个异常</li><li>delete运算符的作用是释放动态分配的内存并将其返回给堆。delete操作只能用于由new运算符返回的指针或者空指针。</li></ul><h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><ul><li>智能指针是一个对象，它用来保存和管理指向堆对象的指针，其行为与常规的指针非常类似，只是它会在合适的时刻自动删除堆对象。这个类在Qt中对应的是QPointer，在标准库中是std::auto_ptr,在Boost中是shared_ptr</li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li>在C++中，引用提供了一种给左值赋予一个别名的机制，对于避免费事或者不必要的复制引用是非常有用的，例如向函数传送一个非常大的对象作为参数。<strong>引用必须在声明时进行初始化且其初始化器也必须是一个左值</strong>,例如：<code>int n;int&amp; rn=n;</code>引用变量rn是实际变量n的别名</li><li>一种好的编程实践是：对于不需要通过函数来进行变化的指针和引用参数，应使用const来保护它们。只读引用参数的能力在于：对按引用传递参数提供了高效性，而对按值传递参数提供了安全性</li></ul><h2 id="类的友元"><a href="#类的友元" class="headerlink" title="类的友元"></a>类的友元</h2><ul><li>友元机制允许非成员函数访问一个类的私有数据，关键字friend可以放在类的生命或者函数声明之前，友元声明位于类定义之内</li><li>通常而言，为了达到下面两个目的才会使用友元函数：<ol><li>为了使用工厂方法，此时需要对某个类强制实施某些创建规则</li><li>为了使用全局运算符函数，比如operator&lt;&lt;()和operator&gt;&gt;()，此时不希望将运算符作为某个类的成员函数，或者没有写入类定义的权利</li></ol></li></ul><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><ol><li>C++使用关键字operator为运算符赋予新的含义</li><li>例如重载&lt;&lt;运算符：friend ostream&amp; operator&lt;&lt;(ostream&amp; out,const Complex&amp; c);</li></ol><h2 id="define与inline的区别"><a href="#define与inline的区别" class="headerlink" title="define与inline的区别"></a>define与inline的区别</h2><blockquote><ol><li>对#define宏的替换过程是由预处理器处理的，预处理器本质上是一个文本编辑器。对inline函数的替换过程是由编译器处理的，它会执行更智能的操作，进行正确的类型检查</li><li>inline函数必须在调用之前<strong>定义</strong></li><li>在一个源代码模块中只能有一次inline定义</li></ol></blockquote><h2 id="带变长实参表的函数"><a href="#带变长实参表的函数" class="headerlink" title="带变长实参表的函数"></a>带变长实参表的函数</h2><blockquote><ol><li>在C和C++中，可以定义其参数表以省略号结尾的函数。省略号使调用者能够制定参数的数量以及类型。</li><li>为了定义使用省略号的函数，需要包含cstdarg库</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">mean</span><span class="params">(<span class="keyword">int</span> n, ...)</span></span>&#123;</span><br><span class="line">va_list ap;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(n)</span></span>;</span><br><span class="line">va_start(ap,n);<span class="comment">/*ap执行第一个未命名实参*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">sum += va_arg(ap,<span class="keyword">double</span>);</span><br><span class="line">&#125;</span><br><span class="line">va_end(ap);<span class="comment">/*返回之前清除栈*/</span></span><br><span class="line"><span class="keyword">return</span> sum/count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="预处理宏主要应用场合"><a href="#预处理宏主要应用场合" class="headerlink" title="预处理宏主要应用场合"></a>预处理宏主要应用场合</h2><blockquote><ol><li>使用#ifndef/#define/#endif将头文件包裹起来，以避免多次包含某个头文件</li><li>使用#ifdef/#else/#endif对某些代码部分进行条件编译</li><li><strong>FILE</strong>宏和<strong>LINE</strong>宏用于调试并给出框架信息</li></ol></blockquote><h2 id="C-中的多态性"><a href="#C-中的多态性" class="headerlink" title="C++中的多态性"></a>C++中的多态性</h2><blockquote><ol><li>C++源于C语言，它的编译器也试图在编译时绑定函数调用，这主要是基于性能方面的考虑。编译器无法仅凭集成关系和基类指针就确定它正在操作何种对象。如果没有运行时检查，就无法保证运行时调用正确的函数。C++要求使用一个特殊的关键字来允许运行时通过指针和引用进行函数调用的绑定，这个关键字就是virtual，它能够使得程序具有多态性。</li><li>由于this是在执行它的构造函数时被初始化的，在执行它的析构函数的时候被销毁，因此不要指望在这两种条件下能够执行正确的运行时绑定。当在构造函数或者析构函数里面调用任何this方法时，将由编译时绑定决定应该调用哪一个方法，就好像不存在virtual关键字一样。</li><li>一般而言，如果类中包含一个或者多个virtual函数，则也应包含一个虚析构函数。这是因为，当对对台对象集合进行操作时，通常是通过基类指针删除这些对象，这会导致对析构函数的间接调用，如果析构函数不为virtual类型，在编译时绑定将决定应该调用哪一个析构函数，从而可能导致派生对象的不完整析构</li><li>静态成员函数不能使虚函数；内敛函数不能是虚函数；构造函数不能是虚函数</li></ol></blockquote><h2 id="虚函数实现原理"><a href="#虚函数实现原理" class="headerlink" title="虚函数实现原理"></a>虚函数实现原理</h2><blockquote><ol><li>父类中如果有虚函数存在，编译器就会为该对象创建一个虚函数表，里面存放自己的虚函数的指针。</li><li>子类继承父类，编译器也会为子类创建一个不同的虚函数表，存放子类自己的虚函数指针</li><li>拥有虚函数表的类都会另外创建一个指向该表的指针</li><li>所以当父类指针指向子类对象，调用虚函数的时候就会根据子类对象的虚函数表调用得到子类的虚函数，而不是父类的虚函数</li><li>如果没有在子类中定义与父类同名的虚函数，那么就会在子类的虚函数表中就会写上父类的相应的虚函数的函数入口地址；如果在子类中也定义了同名的虚函数，那么在虚函数表中用子类的虚函数的函数地址覆盖掉父类的相应的虚函数的函数地址</li><li>每个类只有一份虚函数表，所有该类的对象共用同一张虚函数表</li><li>只有函数声明没有函数定义的虚函数也是纯虚函数</li></ol></blockquote><h2 id="纯virtual函数的声明"><a href="#纯virtual函数的声明" class="headerlink" title="纯virtual函数的声明"></a>纯virtual函数的声明</h2><blockquote><ol><li>virtual returnType functionName(parameterList)=0;</li><li>抽象基类中至少要有一个virtual函数</li><li>抽象基类中不能有public的构造函数</li><li>抽象基类的任何具体派生类都必须重写并定义全部的纯virtual基类函数，话句话说，任何没有重写并定义全部纯virtual基类函数的派生类都是抽象类</li></ol></blockquote><h2 id="重载，隐藏与重写"><a href="#重载，隐藏与重写" class="headerlink" title="重载，隐藏与重写"></a>重载，隐藏与重写</h2><blockquote><ol><li>当函数foo在同一个作用域内存在两个或者多个版本(具有不同的签名)时，就称foo函数被<strong>重载</strong>了</li><li>当基类中的一个virtual函数在培生累中也存在，并且他们具有相同的签名和返回类型时，就称派生类中的版本“重写”了基类中的版本</li><li>派生类中的成员函数，会隐藏基类中与之同名的全部函数，如果出现这种情况，则：<ul><li>只有派生类函数可以被直接调用</li><li>类作用域解析运算符::西部用来显式地调用基类函数</li></ul></li></ol></blockquote><h2 id="有三种特殊的成员函数从来不会被继承，编译器会为没有定义它们的类自动生成这三种函数"><a href="#有三种特殊的成员函数从来不会被继承，编译器会为没有定义它们的类自动生成这三种函数" class="headerlink" title="有三种特殊的成员函数从来不会被继承，编译器会为没有定义它们的类自动生成这三种函数"></a>有三种特殊的成员函数从来不会被继承，编译器会为没有定义它们的类自动生成这三种函数</h2><ol><li>拷贝构造函数：类名（const 类名&amp; 变量名）</li><li>复制赋值运算符</li><li>析构函数</li></ol><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><blockquote><p>如果一个类没有构造函数，那么编译器就会自动产生一个默认的public构造函数，而这个构造函数会调用它的每一个基类的默认构造函数。如果某个类有一些构造函数但是没有默认构造函数，那么它就不会进行默认的初始化工作，这种情况下，任何派生类构造函数都必须在其初始化列表中明确地指名应该调用哪一个基类构造函数</p></blockquote><h2 id="类的前置声明"><a href="#类的前置声明" class="headerlink" title="类的前置声明"></a>类的前置声明</h2><blockquote><ol><li>类的前置声明将它的名称声明成一个有效的类名称，但不给出类的定义。这会使得类名称能够被用作<strong>指针</strong>和<strong>引用</strong>的类型，在遇到类的定义之前，不会将这些指针和引用进行解引操作。</li><li><strong>如果可以使用前置声明，就不要使用#include指令</strong></li></ol></blockquote><h2 id="范型与模板"><a href="#范型与模板" class="headerlink" title="范型与模板"></a>范型与模板</h2><blockquote><p>1.模板为C++编译器提供了一个途径，能够为带有参数化类型和相同行为的类和函数生成多个版本。模板使用关键字template以及用尖括号&lt;&gt;包围的模板参数进行区分。与函数参数不同，模板参数不仅可以传递变量和值，还可以传递类型表达式。例如：template <class t,int="" max=""> Buffer{T v[max];}</class></p><ol start="2"><li>每当编译器看到一个特定参数类型的组合首次用于一个模板函数时，就称此模板进行了实例化。</li><li>类模板主要用来生成数据的通用容器，其参数能够指名容器中的内容。所有的Qt容器类以及标准模板库(STL)中的所有容器类都是参数化的。</li><li>所有模板的定义(类和函数)都必须出现在头文件中，这是因为编译器需要用这些定义来根据模板声明生成代码</li></ol></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>C++中使用struct的大多数情形是需要将数据项分组在一起，但是不需要成员函数</li><li>const成员函数中不允许对数据成员进行修改，如果修改，编译器将报错，任何不会修改数据成员的函数都应该声明为const类型。如果在编写const成员函数时，不慎修改了数据成员，或者调用了其它非const成员函数，编译器将指出错误。注意可以在const成员函数里面更改可变成员(mutable member)的值，而常规的数据成员的值不能改变</li><li>类内定义的成员函数编译器会优先编译成内联(inline)函数</li><li>初始化列表优先于构造函数执行.初始化列表只能用于构造函数,初始化列表可以同时初始化多个数据成员</li><li>const数据成员的初始化必须写在初始化列表中</li><li>M_PI来自于&lt;math.h&gt;,它位于cstdlib库中</li><li>foreach()宏需要赋值它所遍历的容器，这就要求使用foreach必须要有拷贝构造函数</li><li>C++类型可以分成两类：值类型和对象类型，值类型的有Anything*，int，char，QString，QDate和QVariant。带有共有默认构造函数、拷贝构造函数和复制赋值运算符的任何类型都是值类型</li><li>C++对于没有数据成员的类在实例化的时候会分配1个内存单元(1Byte)，用于标记该对象的存在</li><li>含有纯虚函数的类叫做抽象类,抽象类无法实例化对象</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;流&quot;&gt;&lt;a href=&quot;#流&quot; class=&quot;headerlink&quot; title=&quot;流&quot;&gt;&lt;/a&gt;流&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;标准C++中，iostream中常见的操作算子(manipulator):flush,endl,oct(后面跟的数据解析成八进制)，he
      
    
    </summary>
    
      <category term="Job Hunting" scheme="https://suda-morris.github.io/categories/Job-Hunting/"/>
    
    
      <category term="CPP" scheme="https://suda-morris.github.io/tags/CPP/"/>
    
  </entry>
  
  <entry>
    <title>QT4 Basic</title>
    <link href="https://suda-morris.github.io/2015/07/19/qt4/"/>
    <id>https://suda-morris.github.io/2015/07/19/qt4/</id>
    <published>2015-07-19T12:52:44.000Z</published>
    <updated>2018-07-05T01:38:09.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Qt核心模块"><a href="#Qt核心模块" class="headerlink" title="Qt核心模块"></a>Qt核心模块</h2><p>Qt是一个大库，由数个较小的库或者模块组成，其中最为常见的有如下这些，除了core和gui，其余模块都需要在qmake的工程文件中启用：</p><ol><li>core：包括QObject，QThread，QFile，Qvariant等等</li><li>gui：所有从QWidget派生的类外加一些相关的类</li><li>xml：用于解析和序列化XML</li><li>sql：用于与SQL数据库通信</li><li>phonon：用于播放多媒体文件</li><li>webkit：用于使用一种嵌入式web浏览器，QtWebkit</li></ol><h2 id="工程文件-pro"><a href="#工程文件-pro" class="headerlink" title="工程文件.pro"></a>工程文件.pro</h2><ol><li>对于Qt程序，程序不必编写Makefile文件，Qt提供了一个qmake工具，它会根据工程文件来产生对应的Makefile文件。亦可以用qmake -project命令产生一个简单的工程文件，当执行这个命令的时候，qmake会将当前工作目录下的全部源文件(<em>.cpp)作为SOURCES列出来，而将该目录下的全部头文件(</em>.h)作为HEADERS列出来。最终生成的可执行文件的名称由TARGET变量指定，其默认为工程的名称 </li><li>TEMPLATE=app，表明qmake应该以一个适合建立这个应用的模板化的Makefile开始，如果这个工程文件用于建立库，则应当使用语句TEMPLATE=lib，以表明应使用Makefile库模板。第三种可能是源代码文件分布在多个子目录下，而每一个子目录下的文件都具有自己的工程文件，这种情况下，位于父目录的工程文件中应该包含语句TMPLATE=subdirs，这会导致在父目录和每一个子目录下都生成Malefile</li><li>添加库：LIBS += -Lpathtolibs</li><li>CONFIG += console表示是控制台程序</li><li>当编写并测试完库之后，在编译链接过程结束后它将被安装到由qmake变量DESTDIR指定的目录下。例如，dataobjects库的工程文件包含如下相关的行：<ul><li>TEMPLATE = lib</li><li>DESTDIR = pathto_install_libs</li></ul></li><li>对于库模板，qmake将产生一个包含install目标的Makefile，这样，在成功编译链接之后执行命令make install将会把这个库复制到某个特定的位置</li></ol><h2 id="Qt中获取命令行参数"><a href="#Qt中获取命令行参数" class="headerlink" title="Qt中获取命令行参数"></a>Qt中获取命令行参数</h2><ul><li>QCoreApplication app(argc,argv);</li><li>QStringList arglist = app.arguments();</li><li>arglist.size等于命令行参数的个数</li></ul><h2 id="Qt中的字符串"><a href="#Qt中的字符串" class="headerlink" title="Qt中的字符串"></a>Qt中的字符串</h2><ol><li>const char*，主要用于与C语言库的接口</li><li>来自C++标准库的string，任何地方都可以使用这种类型</li><li>QString，优于STL中的字符串类型，有着更加丰富的API而且更加容易使用。</li><li>在Qt中使用类似于iostream中的cin，cout：<ul><li>#include &lt;QString></li><li>#include &lt;QTextStream></li><li>QTextStream cout(stdout)</li><li>QTextStream cin(stdin)</li><li>cin.readLine()</li></ul></li><li>sizeof(QString)=4,sizeof(QChar)=2,sizeof(QDate)=4,sizeof(qint32)=4,sizeof(qint64)=8;QString是一个使用动态内存的复杂类，因此必须调用length()来获得字符串中QChar的数量。由于QChar的大小为char的两倍，所以在计算内存中QString中实际大小时需要将长度乘以2，在运行时，QString能够与具有同一个值的另一个字符串共享内存</li></ol><h2 id="去掉最大、最小、关闭按钮"><a href="#去掉最大、最小、关闭按钮" class="headerlink" title="去掉最大、最小、关闭按钮"></a>去掉最大、最小、关闭按钮</h2><blockquote><p>setWindowFlags(windowFlags()|Qt::FramelessWindowHint|Qt::WindowTitleHint);</p></blockquote><h2 id="使用中文"><a href="#使用中文" class="headerlink" title="使用中文"></a>使用中文</h2><blockquote><ol><li>下载qpf格式的font_wenquanyi字体，将下载的字库文件复制到qt安装目录的lib/fonts子目录下</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\#include &lt;QTextCodec&gt;</span><br><span class="line">QApplication a(argc, argv);</span><br><span class="line">    QTextCodec::setCodecForLocale(QTextCodec::codecForName(&quot;UTF-8&quot;)); //中文支持</span><br><span class="line">    QTextCodec::setCodecForTr(QTextCodec::codecForName(&quot;UTF-8&quot;));       //支持Tr中文</span><br><span class="line">    QTextCodec::setCodecForCStrings(QTextCodec::codecForName(&quot;UTF-8&quot;)); //支持中文文件名显示</span><br><span class="line">    QFont font;</span><br><span class="line">    font.setPointSize(160); //实际上是16的字号，但设成16却不行</span><br><span class="line">    font.setFamily((&quot;wenquanyi&quot;));</span><br><span class="line">    font.setBold(false);</span><br><span class="line">    a.setFont(font);</span><br></pre></td></tr></table></figure><h2 id="隐藏鼠标箭头"><a href="#隐藏鼠标箭头" class="headerlink" title="隐藏鼠标箭头"></a>隐藏鼠标箭头</h2><blockquote><ol><li>对于整个程序: QApplication::setOverrideCursor(Qt::BlankCursor);</li><li>对单个控件：lable-&gt;setCursor(Qt::BlankCursor);//隐藏鼠标  label-&gt;setCursor(Qt::ArrowCursor);//显示正常鼠标</li></ol></blockquote><h2 id="QStringList与迭代"><a href="#QStringList与迭代" class="headerlink" title="QStringList与迭代"></a>QStringList与迭代</h2><blockquote><ol><li>QStringList实际上就是一个QList<qstring>,此外，QStringList还具有一些特别针对字符串的方便函数，例如indexOf(),join()和replaceInStrings()。利用split()函数和join()函数，在列表与字符串之间进行转换相当简单</qstring></li><li>QStringList对象可以调用方法takeFirst()来依次获得列表中的字符串对象<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">QString winter = <span class="string">"December,January,February"</span>;</span><br><span class="line">QString spring = <span class="string">"March,April,May"</span>;</span><br><span class="line">QString summer = <span class="string">"June,July,August"</span>;</span><br><span class="line">QString fall = <span class="string">"September,October,November"</span>;</span><br><span class="line"></span><br><span class="line">QStringList <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">list</span> &lt;&lt; winter;</span><br><span class="line"><span class="built_in">list</span> += spring;</span><br><span class="line"><span class="built_in">list</span>.append(summer);</span><br><span class="line"><span class="built_in">list</span> &lt;&lt; fall;</span><br><span class="line"></span><br><span class="line">QString allmonths = <span class="built_in">list</span>.join(",");/*从列表到字符串，以逗号为分隔符*/</span><br><span class="line">QStringList list2 = allmonths.split(","); /*从字符串到列表，以逗号为分隔符*/</span><br><span class="line"></span><br><span class="line">foreach(<span class="keyword">const</span> QString &amp;str,<span class="built_in">list</span>)&#123; /*Qt foreach循环*/</span><br><span class="line">//TODO</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(QStringList::iterator it = <span class="built_in">list</span>.begin(); it != <span class="built_in">list</span>.end(); ++it)&#123;</span><br><span class="line">QString current = *it;</span><br><span class="line">//TODO</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QListIterator&lt;QString&gt; itr(list2);</span><br><span class="line"><span class="keyword">while</span>(itr.hasNext())&#123;</span><br><span class="line">QString current = itr.next();</span><br><span class="line">//TODO</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="QDir，QFileInfo和QDirIterator"><a href="#QDir，QFileInfo和QDirIterator" class="headerlink" title="QDir，QFileInfo和QDirIterator"></a>QDir，QFileInfo和QDirIterator</h2><figure class="highlight c"><figcaption><span>利用QDir类和QFileInfo类获取目录的内容列表以及关于每一个项的信息</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recurseAddDir</span><span class="params">(QDir d,<span class="keyword">bool</span> recursive=<span class="literal">true</span>,<span class="keyword">bool</span> symlinks=<span class="literal">false</span>)</span></span>&#123;</span><br><span class="line">d.setSorting(QDir::Name);</span><br><span class="line">QDir::Filters df = QDir::Files | QDir::NoDotAndDotDot;</span><br><span class="line"><span class="keyword">if</span>(recursive) df |= QDir::Dirs;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">not</span> symlinks) df |= QDir::NoSymLinks;</span><br><span class="line">QStringList qsl = d.entryList(df,QDir::Name|QDir::DirsFirst);</span><br><span class="line"></span><br><span class="line">foreach(<span class="keyword">const</span> QString &amp;entry,qsl)&#123;</span><br><span class="line"><span class="function">QFileInfo <span class="title">finfo</span><span class="params">(d,entry)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(finfo.isDir())&#123;</span><br><span class="line">QDir sd(finfo.absoluteFilePath());</span><br><span class="line">recurseAddDir(sd);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(finfo.completeSuffix()==<span class="string">"mp3"</span>)&#123;</span><br><span class="line">addMp3File(finfo.absoluteFilePath());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>使用QDirIterator实现相同功能</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QDir dir = QDir::current();</span><br><span class="line">QDirIterator qdi(dir.absolutePath(), QStringList() &lt;&lt; "*.mp3", QDir::NoSymLinks | QDir::Files, QDirIterator::Subdirectories);</span><br><span class="line"><span class="keyword">while</span>(qdi.hasNext)&#123;</span><br><span class="line">addMp3File(qdi.next());</span><br><span class="line"><span class="comment">//TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="QDate"><a href="#QDate" class="headerlink" title="QDate"></a>QDate</h2><blockquote><ol><li>static QDate currentDate = QDate::currentDate();</li></ol></blockquote><h2 id="Qt中字符串的数据流操作"><a href="#Qt中字符串的数据流操作" class="headerlink" title="Qt中字符串的数据流操作"></a>Qt中字符串的数据流操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">QString Student::toString() <span class="keyword">const</span>&#123;</span><br><span class="line">QString retval;</span><br><span class="line"><span class="function">QTextStream <span class="title">os</span><span class="params">(&amp;retval)</span></span>;</span><br><span class="line">os &lt;&lt; <span class="string">"name:"</span> &lt;&lt; m_Name &lt;&lt; <span class="string">";ID:"</span> &lt;&lt; m_StudentID;</span><br><span class="line"><span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><blockquote><p>qDeleteAll(container)只对包含指针的容器有意义，该函数将释放所有对象，但并不删除容器中的指针；删除容器中的指针需要调用容器的clear()函数</p></blockquote><h2 id="容器（Qt容器被定义成模板类）"><a href="#容器（Qt容器被定义成模板类）" class="headerlink" title="容器（Qt容器被定义成模板类）"></a>容器（Qt容器被定义成模板类）</h2><blockquote><ol><li>QList<t>是用数组实现的，数组的两端都有预分配的空间。它针对按索引的随机访问以及少于1000项的列表进行了优化。对于prepend()和append()这样的操作，它有很好的性能表现</t></li><li>QStringList是派生自QList<qstring>的一个便利类</qstring></li><li>QLinkedList<t>针对迭代器的顺序访问以及快速、常量时间的列表插入操作进行了优化，但排序和搜索比较缓慢。它提供多个便利函数来处理那些经常用到的操作<br>QVector<t>以连续的内存位置保存数据，并针对按索引的随机访问进行了优化。通常而言，QVector对象都是用其初始大小进行构造的，在其两端都不存在预先自动分配的内存空间，所以中间掺入、末端插入以及前端插入都是耗时的</t></t></li><li>QStack<t>是派生自QVector<t>的public类，所以QVector类的public接口可以用于QStack对象。不过，push(),pop()以及top()函数采用的是后入先出(LIFO)的语法</t></t></li><li>QMap&lt;Key,T&gt;是一个有序的关联容器，它保存的是键/值对，其作用是根据键来快速找到对应的值。它也被设计成支持适量的快速插入操作和删除操作。它将键有序排列，以便能够快速搜索和快速缩小搜索范围，采用的是一个跳跃列表字典，这个字典在概率上是平衡的并且高效的利用了内存。键的类型必须是operator&lt;()和operator==()</li><li>QHash&lt;Key,T&gt;也是一个关联容器，它使用哈希表来进行键的查找。它提供快速的查找(键精确匹配)和插入操作，但其搜索速度较慢，且没有排序功能。键的类型必须是operator==()</li><li>QMultiMap&lt;Key,T&gt;是QMap的一个子类，而QMultiHash&lt;Key,T&gt;是QHash的一个子类。这两个类是的一个键可以与多个值关联</li><li>QCache&lt;Key,T&gt;是一个关联容器，它对最近使用过的项提供最快速的访问，并会根据几个开销函数的结果自动移除哪些不常用的项</li><li>QSet<t>用QHash保存T类型的值，QHash中的键位于T中，而其中的哑值与每一个键相关联。这种安排可优化查找和插入操作。QSet中的几个函数用于常规的集合操作。它的默认构造函数会创建一个空集合</t></li></ol><p><strong>用于模板容器类的类型参数T，或者用于关联容器的键类型都必须为可赋值数据类型，即值类型。这意味着T必须具有public类型的默认构造函数、拷贝构造函数和赋值运算符。基本类例如int，double，char和指针都是可赋值的，有些Qt类型是可赋值的，例如QString，QDate，QTime。QObject以及派生自QObject的类型都是不可赋值的，如果需要使用某种不可赋值类型的对象，则可以定义一个指针容器，例如QList&lt;QFile*&gt;</strong></p></blockquote><h2 id="QFile"><a href="#QFile" class="headerlink" title="QFile"></a>QFile</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QFile <span class="title">outf</span><span class="params">((<span class="string">"filename"</span>)</span></span>;</span><br><span class="line">outf.open(QIODevice::WriteOnly);</span><br><span class="line"><span class="function">QTextStream <span class="title">outstr</span><span class="params">(&amp;outf)</span></span>;</span><br><span class="line">outstr &lt;&lt; <span class="string">"content"</span>;</span><br><span class="line">outf.close();</span><br></pre></td></tr></table></figure><h2 id="序列化器模式：QTextStream和QDataStream"><a href="#序列化器模式：QTextStream和QDataStream" class="headerlink" title="序列化器模式：QTextStream和QDataStream"></a>序列化器模式：QTextStream和QDataStream</h2><blockquote><ol><li>序列化器是一种只负责读取或者写入对象的对象，Qt的QTextStream序列化器用于读写人可读的文件，而QDataStream序列化器用于读写结构化的二进制数据。这些类都是用序列化器模式实现的</li><li>利用QDataStream就可以序列化和解序列化QVariant支持的全部类型，包括QList，QMap，QVector以及其他类型。</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QFile <span class="title">textFile</span><span class="params">(<span class="string">"playlist1.tsv"</span>)</span></span>;</span><br><span class="line"><span class="function">QFile <span class="title">binaryFile</span><span class="params">(<span class="string">"playlist1.bin"</span>)</span></span>;</span><br><span class="line">QTextStream textStream；</span><br><span class="line">QDataStream dataStream；</span><br><span class="line"><span class="keyword">if</span>(textFile.open(QIODevice::ReadOnly))&#123;</span><br><span class="line">textStream.setDevice(&amp;textFile);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(binaryFile.open(QIODevice::WriteOnly))&#123;</span><br><span class="line">dataStream.setDevice(&amp;binaryFile);</span><br><span class="line">&#125;</span><br><span class="line">QList&lt;MetaDataValue&gt; values;</span><br><span class="line"><span class="keyword">while</span>(!textStream.atEnd())&#123;</span><br><span class="line">MetaDataValue mdv;</span><br><span class="line">textStream &gt;&gt; mdv;</span><br><span class="line">values &lt;&lt; mdv;</span><br><span class="line">dataStream &lt;&lt; mdv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="QObject"><a href="#QObject" class="headerlink" title="QObject"></a>QObject</h2><blockquote><ol><li>QObject是Qt库中许多重要的类的基类，如QEvent，QApplication，QLayout和QWidget。</li><li>QObject使基于事件的编程成为了可能，其中用到了QApplication和Qt的事件循环</li><li>QObject没有公有的拷贝构造函数或复制赋值运算符。QObject类定义的结尾处有一个宏Q_DISABLE_COPY(QObject)，它显示地确保任何QObject都不能被复制。QObject不是设计用于复制的，QObject会用来代表具有唯一身份的对象。这种不带拷贝构造函数策略的一个直接后果就是永远无法通过值传递方式向函数传递OBject。</li><li>QObject及其派生类的单参数构造函数应当予以显式声明explicit，以免意外的隐式转换的发生。</li><li>每个QObject都可以有（至多）一个父QObject，且可以拥有任意数量的子QObject。</li><li>每个QObject都将指向各个子对象的指针存放在一个QObjectList中，在调用QObject的析构函数时会自动销毁该对象的子对象</li><li>通常而言，没有父对象的QObject应当在程序栈区(stack)中进行定义，而那些有父对象的QObject则应当在堆区(heap)动态创建出来，这样可有助于确保发生正确的析构操作。</li><li>QObject有一个成员函数，可以返回一个指向主对象中全部子对象的指针列表：const QObjeectList&amp; QObject::children() const</li><li>QObject还提供了两个名称为findChildren()的重载(递归)每个都会返回一个满足特定条件的子对象列表：QList<t> parentObj.findChildren<t>(const QString&amp; name=QString()) const 该函数返回一个类型为T的子对象列表，其对象名与name相等。如果name是空字符串，那么将会起到一个类过滤器的作用，返回结果是一个QList，其中包含指向全部子对象的指针，而这些子对象都可以通过类型转换变成类型T的对象</t></t></li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QList&lt;Customer*&gt; custlist = parent.findChildren&lt;Customer*&gt;();</span><br><span class="line">foreach (<span class="keyword">const</span> Customer* current,custlist)&#123;</span><br><span class="line">qDebug() &lt;&lt; current-&gt;toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="QEvent"><a href="#QEvent" class="headerlink" title="QEvent"></a>QEvent</h2><blockquote><ol><li>QEvent类封装了底层事件的概念。QEvent类是若干特定事件类的基类，例如QActionEvent,QFileOpenEvent,QHoverEvent,QInputEvent,QMouseEvent等。QEvent对象可以由窗口系统创建以响应用户的动作(例如，QMouseEvent)或按照指定的时间间隔(QTimerEvent)完成创建，也可以由应用程序显式地创建。成员type()会返回一个美剧，其中含有近百个特定的值，以区分不同种类的各式事件(例如,关闭、DragEnter、DragMove、放下、输入、GrabMouse、HoverEnter、KeyPress、MouseButtonDblClick、MouseMove、Resize)</li><li>一个典型的Qt程序会创建对象，连接各个对象，然后再告诉应用程序开始发送exec()，在运行时，应用程序就进入了事件循环，各个对象之间可以通过各种方式相互发送消息。</li><li>只有在事件循环，特别是QApplication::exec()进入的事件循环中，信号才能发送到槽上。这是因为信号和槽在其外表之下是使用事件循环来传递消息的。</li><li>QObject支持一些普通C++对象通常没有的特性：信号和槽，元对象、元属性、元方法，qobject_cast</li><li>元对象编辑器，即moc，会针对每个使用Q_OBJECT宏的QObject派生类生成额外的函数，生成的代码可以在名称为moc_filename.cpp的文件中找到。</li></ol></blockquote><h2 id="信号和槽"><a href="#信号和槽" class="headerlink" title="信号和槽"></a>信号和槽</h2><blockquote><ol><li>信号是在类定义中给出的类似于void函数声明的一种消息。它有参数列表却没有函数体。信号时一个类的接口的一部分，它看起来想函数，但不用同样的方式进行调用—它被此类的对象发射</li><li>槽通常是一个void成员函数，它可以像普通的成员函数一样进行调用，或者可以由QMetaObject系统进行间接调用</li><li>连接语句的语法：bool QObject::connect(senderQObjectPtr,SIGNAL(signalName(argumentList)),receiverQObjectPtr,SLOT(slotName(argumentList))optionalConnectionType);optionalConnectionType让你可以明确说明，你是否希望从发射点处同步(阻塞)或者非同步(排队)地调用目标槽</li><li>如果有多个信号连接到同一个槽上且需要知道是那哟个QPbject发射的信号，则可以在该槽中调用sender(),它会返回一个指向那个对象的指针</li></ol></blockquote><h2 id="堆还是栈"><a href="#堆还是栈" class="headerlink" title="堆还是栈"></a>堆还是栈</h2><blockquote><p>一般情况下，没有父对象的QObject应当在栈上创建，或者定义成另一个类的子对象。有父对象的QObject不应该在栈上创建，因为那样的话，它有可能会被删除两次。<br>不推荐直接删除QObject，在带有事件循环的程序中，最好利用QObject::deleteLater()来删除QObject。这样做，可以在应用程序处理事件并在当前槽返回之后就安排该对象的销毁。希望能够在槽内删除信号的sender(),这么做实际上是必须的</p></blockquote><h2 id="QWidget和其余GUI开发中常用的类"><a href="#QWidget和其余GUI开发中常用的类" class="headerlink" title="QWidget和其余GUI开发中常用的类"></a>QWidget和其余GUI开发中常用的类</h2><blockquote><ol><li>QWidget是一个采用了多重继承的类，首先，QWidget是一个QObject，因此它可以有父对象、信号、槽以及可受管理的子对象。同时QWidget也是一个QPaintDevice，这个类是所有可在屏幕上进行绘制的对象的基类</li><li>Qt数据类型——QPoint,QSize,QColor,QImage和QPixmap是在处理图形对象时常用到的类型</li><li>布局——这些类能够动态地管理Widget的布局，其中有些事常用的特殊布局，包括QHBoxLayout，QVBoxLayout，QGridLayout，QFormLayout等</li><li>模型——QAbstractItemModel及其各个派生类，如QAbstractListModel和QAbstractTableModel，外加一些已有的可继承实体类，如QSqlQueryModel和QFileSystemModel，都是Qt模型/视图框架中的一部分，该框架内置将一个模型和其他不同视图相连接的机制，以便对一个组件的修改可以自动变换到其他组件上</li><li>控制类——QApplication和QAction两者都是管理GUI应用程序控制流的对象。QItemDelegate用作模型和视图之间的控制器</li></ol></blockquote><h2 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h2><blockquote><ol><li>QDialog是Qt所有对话框的基类。对话框窗口可以是模态(modal)对话框也可以是非模态(nonmodal)对话框。</li><li>当程序调用静态的便利函数”QMessageBox::”或者”QFileDialog::”时，弹出的对话框就是模态对话框。当模态对话框显示在屏幕上时，它会冻结同一应用程序中的其他所有可见窗口的输入功能。用户解除模态对话框后，与应用程序的常规交互才可以继续下去。QDialog::exec()是将模态对话框放到屏幕上的另一种方式。当用户完成了所需的响应后，对话框就可以返回数据，也可以返回对话框代码(QDialog::Accepted或者QDialog::Rejected);</li><li>可以像QWidget一样通过show()显示一个QDialog，在此情况下，对话框是非模态的，用户也就可以与应用程序的其他窗口继续交互。</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QApplication <span class="title">app</span><span class="params">(argc,argv)</span></span>;</span><br><span class="line">QProgressDialog nonModal;</span><br><span class="line">nonModal.setWindowTitle(<span class="string">"Non Modal Parent Dialog"</span>);</span><br><span class="line">nonModal.show();</span><br><span class="line">nonModal.connect(&amp;nonModal,SIGNAL(finished()),&amp;app,SLOT(quit()));</span><br></pre></td></tr></table></figure><h2 id="图标、图像与资源"><a href="#图标、图像与资源" class="headerlink" title="图标、图像与资源"></a>图标、图像与资源</h2><blockquote><ol><li>Qt提供了至少两种方式来获得标准的图标。一种方式来自于桌面样式的QStyle::standardIcon()，另一种则来自插件型图标主题:QIcon::fromTheme()</li><li>把所需的二进制数据文件作为资源附加到工程中会让工程更为健壮。源代码无须为资源文件使用一些不可移植的路径名。要引用一个存储成资源的文件，可以使用在.rcc文件中指定的别名并在前面带一个前缀”:/“。于是，每个资源好像位于一个私有虚文件系统中，其根为”:/“。然而，得到这些好处是需要付出代价的，可执行文件会更大，程序也会需要更多的内存</li><li>有3个Qt类可以简化处理图片：<ul><li>QImage——用于离屏操作，输入输出操作，并可直接访问像素</li><li>QPixmap——用于在屏幕上进行绘制并优化，仅用在主线程中</li><li>QIcon——用于视频内存的缓冲且经常用到，但仅用在主线程中</li><li>QPicture——存储绘制的操作而不是实际的位图图片</li></ul></li></ol></blockquote><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><blockquote><ol><li>布局可以将它们的Widgets排列成如下几种形式：<ul><li>垂直型(QVBoxLayout)</li><li>水平型(QHBoxLayout)</li><li>网格型(QGridLayout)</li><li>窗体型(QFormLayout)</li><li>栈型，任何时候都只有一个窗件可见(QStackedLayout)</li></ul></li><li>可以使用addWidget()函数向QLayout添加窗件，当窗件添加到布局中时，它会称为拥有该布局的窗件的子对象。窗件永远不会称为布局的子对象</li><li>为了能够顺利地管理其几何形状，每个QLayout对象都必须有一个父对象，这可以是一个QWidget，也可以是一个QLayout。可以在创建布局时通过向构造函数传递一个指向父窗件或者布局的指针来指定其父对象。当然，也可以先创建一个QLayout而不指定QLayout的父对象，这种情况下，可以稍后通过调用QWidget::addLayout()来指定其父对象</li><li>布局可以拥有子布局，通过调用addLayout()函数，可以将一个布局添加为另外一个布局的子布局。如果布局的父对象是一个窗件，那么该窗件将再也无法称为另外一个布局的父对象</li><li>不使用Qt设计师时，可以使用QLayout类的API来直接指定各个窗件之间的分割、伸展和支撑<ul><li>addSpacing(int size)会向布局的末尾添加固定数量的像素</li><li>addStretch(int stretch = 0)会添加数目不定的像素。此函数由一个最小的数目开始，然后逐渐扩展到使用所有的可用空间。如果在同一个布局中进行多次扩展，可以用此作为一个增长因子</li><li>addStrut(int size)讲给处置方向施加一个最小的数值(也就是，QVBoxLayout的宽度或者QHBoxLayout的高度)</li></ul></li></ol></blockquote><h2 id="QTimer"><a href="#QTimer" class="headerlink" title="QTimer"></a>QTimer</h2><blockquote><ol><li>QTimer对象是一个倒数计时器，以毫秒级时间间隔启动，当其到达零时会发出一个timeout()信号.QTimer可用来以规则的间隔来发射信号，或者如果singleShot属性已设置成true，则在给定的时间间隔后仅发射一次信号。QTimer有一个静态函数singleShot()，可以在给定的时间间隔后调用一次槽。如果倒数间隔设置成0，QTimer会在事件队列中的全部事件处理完后就立刻发出timeout()信号</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QTimer::singleShot(m_expInterval,<span class="keyword">this</span>,SLOT(timerDisplayRandStr()));</span><br></pre></td></tr></table></figure><h2 id="绘制事件和画图"><a href="#绘制事件和画图" class="headerlink" title="绘制事件和画图"></a>绘制事件和画图</h2><blockquote><ol><li>一个Widget应当在其paintEvent()方法中执行适当的绘制操作。这是QWidget中唯一可以创建QPainter painter(this)的地方。有下面几个原因使得QPaintEvent可以被发送到QWidget上。<ol><li>窗件是隐藏的，然后又显露了出来</li><li>窗件改变了大小或者进行了重新排布</li><li>调用了update()或者repaint()。repaint()在paintEvent()得到调用后才会返回。update()在QPaintEvent被放进事件队列后会立即返回<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> LifeWidget::paintEvent(QPaintEvent* evt)&#123;</span><br><span class="line"><span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(!m_image.isNull())&#123;</span><br><span class="line">painter.drawImage(QPoint(<span class="number">0</span>,<span class="number">0</span>),m_image);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></blockquote><h2 id="QMainWindow"><a href="#QMainWindow" class="headerlink" title="QMainWindow"></a>QMainWindow</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMainWindow</span>:</span><span class="keyword">public</span> QMainWindow&#123;</span><br><span class="line">Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">MyMainWindow</span><span class="params">(QWidget* parent=<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">closeEvent</span><span class="params">(QCloseEvent* event)</span></span>;</span><br><span class="line"><span class="keyword">protected</span> slots:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">newFile</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="QAction"><a href="#QAction" class="headerlink" title="QAction"></a>QAction</h2><blockquote><ol><li>QAction从QObject派生而来，是用于用户选定动作的一个基类。它提供了丰富的接口，它还可以用于许多种动作中。QWidget接口使得每个窗件都可以维护一个QList&lt;QAction*&gt;。所有QWidget都可以拥有QAction，一些窗件借助上下文提供了QAction的清单，其他借助菜单栏。</li><li>QMenu是一个能够给QAction集合提供特殊视图的QWidget。QMenuBar是菜单的一个集合，常见于QMainWindow中。</li><li>每次调用QMenu::addAction(text,target,slot,shortcut)函数，都会窗件一个未命名的QAction，并且会将其添加到这个QMenu上。然后会调用它的积累函数，QWidget::addAction(QAction*),这样把新建的QAction添加到用于上下文菜单的QMenu的QAction清单中。</li></ol></blockquote><h2 id="QSettings"><a href="#QSettings" class="headerlink" title="QSettings"></a>QSettings</h2><blockquote><ol><li>QSettings会管理键/值对的永久映射关系，它是一个QObject，并且会使用一些与QObject相似的属性接口——setValue()和value()——来设置和获取它的值。这个类可以用来存储任何需要在多次执行之间进行记忆的数据</li><li>QSettings需要一个组织名和一个应用程序名，但当使用默认的构造函数时，QSettings会从QApplication中获得这些值。每个名称组合都会定义一个唯一的永久映射，这使得不会与其他命名的Qt应用程序产生冲突</li><li>允许多个实例共享相同状态的类，可以看成是Monodtate模式的一种实现。拥有相同组织/应用程序名称的两个QSettings实例，可以访问同一个永久映射数据。这简化了应用程序从不同源文件访问公共设置值的过程。QSettings是Monostate模式的一种实现</li></ol></blockquote><h2 id="剪切板"><a href="#剪切板" class="headerlink" title="剪切板"></a>剪切板</h2><blockquote><ol><li>每个Qt应用程序都可以使用qApp-&gt;clipboard()访问系统的剪贴板。剪贴板会保存带类型的数据(文本，图片，URL或者自定义数据)。要往剪贴板中放置数据，可以创建一个QMimeData，以一定的方式对数据进行编码，并且调用QClipBoard-&gt;setMimeData()。</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect(qApp-&gt;clipboard(),SIGNAL(changed(QClipboard::Mode)),<span class="keyword">this</span>,SLOT(clipboardChanged(QClipboard::Mode)));</span><br></pre></td></tr></table></figure><h2 id="QImage"><a href="#QImage" class="headerlink" title="QImage"></a>QImage</h2><blockquote><ol><li>QImage在像素处理上得到了优化，QPixmap使用了视频存储器，它也是需要在屏幕上显示图片的多种窗件要用到的类。可以吧QImage转换成QPixmap并将其在QLabel进行显示<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int h(m_Image.height()),w(m_Image.width());</span><br><span class="line"><span class="keyword">int</span> r,g,b;</span><br><span class="line">QRgb oldpix,newpix;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;h;y++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;w;x++)&#123;</span><br><span class="line">oldpix=m_Image.pixel(x,y);</span><br><span class="line">r=qRed(oldpix)*radj;</span><br><span class="line">g=qGreen(oldpix)*gadj;</span><br><span class="line">b=qBlue(oldpix)*badj;</span><br><span class="line">newpix=qRgb(r,g,b);</span><br><span class="line">m_Image.setPix(x,y,newpix);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="模板类"><a href="#模板类" class="headerlink" title="模板类"></a>模板类</h2><blockquote><p>因为每个Q_OBJECT都需要通过moc为其生成代码，而且moc并未智能到知道如何生成模板类的特化，孤儿不允许使一个已经标记为Q_OBJECT的类再次成为模板类</p></blockquote><p>##qSort</p><blockquote><ol><li>qSort()函数是一个使用堆分类算法进行实现的范型方法。qSort()可以应用到任何Qt容器，只要容器内的对象拥有公共接口operator&lt;()和operator==()。基本数据类型的容器也可以使用此函数进行排序</li></ol></blockquote><h2 id="反射与元对象"><a href="#反射与元对象" class="headerlink" title="反射与元对象"></a>反射与元对象</h2><blockquote><ol><li>所谓反射，就是指对象成员的自我检查，使用反射编程，就可以编写出通用的操作，可对具有各种不同结构的类进行操作。使用通用的值存储器QVariant，就可以按照一种统一的方式来对基本类型和其他普通类型进行操作</li><li>所谓元对象就是描述另一个对象结构的对象。QMetaObject是元对象模式的一个Qt实现，它提供了一个QObject对象所拥有的属性和方法的信息。元对象模式有时也称为反射模式</li><li>一个拥有元对象的类就可以支持反射。这是一个许多面向对象语言都具有的性质。虽然C++中不存在反射，但Qt的元对象编译器(moc)可以为QObject生成支持这种机制的代码</li><li>只要满足一定条件(每个类都必须在头文件中定义，并且列举在工程文件的HEADERS中，同时此类的定义中还必须包括Q_OBJECT宏)，每个派生自QObject的类都会拥有一个有moc为其生成的QMetaObject。QObject拥有有个成员函数，它能够返回指向对象的QMetaObject的指针，这个函数原型是：QMetaObject* QObject：：metaObject() const[virtual]</li><li>可以使用QMetaObject的下面这些方法来获取一个QObject的信息：<ul><li>className(),它会将类的名称以const char*格式返回</li><li>superClass(),如果存在基类的QMetaObject，则返回其指针，如果不存在返回0</li><li>mathodCount(),返回类的成员函数的个数</li></ul></li><li>信号和槽机制同样需要依赖与QMetaObject</li><li>通过使用QMetaObject和QMetaProperty就可以编写足够通用的代码来处理所有具有自我描述能力的类</li><li>除了C++的RTTI运算符dynamic_cast和typeid之外，Qt还提供了两种运行时的类型识别机制：<ul><li>qobject_cast</li><li>QObject::inherits()</li></ul></li><li>qobject_cast是一个ANSI风格的类型转换运算符：DestType<em> qobject_cast&lt;DestType</em>&gt; (QObject* qoptr),如果转换失败返回NULL。qobject_cast实际是一个向下转换运算符，类似于dynamic_cast。拥有指向派生类的基类指针时，向下转换允许调用在基类接口中不存在的派生类方法。</li><li>访问数据成员的方式：<ul><li>直接访问，通过经典的gettet/settet，速度快，更为有效</li><li>间接访问，通过QObject/QMetaObject接口，可让代码复用性更好</li></ul></li><li>使用Q_PROPERTY宏来描述QObject的属性：Q_PROPERTY(type name READ getFunction [WRITE setFunction] [RESET resetFunction] [NOTIFY notifySignal] [DESIGNABLE bool] [SCRIPTABLE bool] [STORED bool]),例如：</li></ol></blockquote><figure class="highlight c"><figcaption><span>customer-props.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span>:</span><span class="keyword">public</span> QObject&#123;</span><br><span class="line">Q_OBJECT<span class="comment">//moc预处理类需要的宏</span></span><br><span class="line">Q_PROPERTY(QString id READ getId WRITE setId NOTIFY valueChanged);</span><br><span class="line">Q_PROPERTY(QString name READ getName WRITE setName NOTIFY valueChanged);</span><br><span class="line">Q_PROPERTY(QString address READ getAddress WRITE setAddress NOTIFY addressChanged);</span><br><span class="line">Q_PROPERTY(QString phone READ getPhone WRITE setPhone NOTIFY phoneChanged);</span><br><span class="line">Q_PROPERTY(QDate dateEstablished READ getDateEstablished);<span class="comment">//只读属性</span></span><br><span class="line">Q_PROPERTY(CustomerType type READ getType WRITE setType NOTIFY valueChanged);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">enum</span> CustomerType&#123;</span><br><span class="line">Corporate,Individual,Educational,Government</span><br><span class="line">&#125;;<span class="comment">//枚举类型定义必须与Q_ENUMS宏的定义出现在同一类定义中</span></span><br><span class="line">Q_ENUMS(CustomerType);<span class="comment">//特殊的宏可以实现生成字符串到枚举之间的转换功能；必须在同一个类中</span></span><br><span class="line">explicit Customer(const QString name = QString(),QObject* parent = 0);//之所以声明为explicit，是因为不希望从QString转换到Customer时出现意外</span><br><span class="line">QString getId <span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setType</span><span class="params">(CustomerType newType)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setType</span><span class="params">(QString newType)</span></span>;</span><br><span class="line">signals:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addressChanged</span><span class="params">(QString newAddress)</span></span>;</span><br><span class="line">void valueChanged(QString propertyName,QVariant newValue,QVariant oldValue=QVariant());</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">phoneChanged</span><span class="params">(QString newPhone)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">typeChanged</span><span class="params">(CustomerType type)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">QString m_id,m_name,m_address,m_phone;</span><br><span class="line">QDate m_date;</span><br><span class="line">CustomerType m_type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>customer-props.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Customer::Customer(<span class="keyword">const</span> QString name,QObject* parent):QObject(parent)&#123;</span><br><span class="line">setObjectName(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Customer::setId(<span class="keyword">const</span> QString&amp; newId)&#123;</span><br><span class="line"><span class="keyword">if</span>(newId != m_id)&#123;</span><br><span class="line">QString oldId = m_id;</span><br><span class="line">m_id = newId;</span><br><span class="line"><span class="function">emit <span class="title">valueChanged</span><span class="params">(<span class="string">"id"</span>,newId,oldId)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Customer::setType(CustomerType theType)&#123;</span><br><span class="line"><span class="keyword">if</span>(m_type != theType)&#123;</span><br><span class="line">CustomerType oldType = m_type;</span><br><span class="line">m_type = theType;</span><br><span class="line"><span class="function">emit <span class="title">valueChanged</span><span class="params">(<span class="string">"type"</span>,theType,oldType)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Customer::setType(QString newType)&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> QMetaObject* meta = metaObject();</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> propindex = meta-&gt;indexOfProperty(<span class="string">"type"</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> QMetaProperty mp = meta-&gt;property(propindex);</span><br><span class="line"></span><br><span class="line">QMetaEnum menum = mp.enumerator();</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ntyp = newType.toAscii().data();</span><br><span class="line">CustomerType theType = <span class="keyword">static_cast</span>&lt;CustomerType&gt;(menum.keyToValue(ntyp));</span><br><span class="line"><span class="keyword">if</span>(theType != m_type)&#123;</span><br><span class="line">CustomerType oldType = m_type;</span><br><span class="line">m_type = theType;</span><br><span class="line"><span class="function">emit <span class="title">valueChanged</span><span class="params">(<span class="string">"type"</span>,theType,oldType)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">QString Customer::getTypeString() <span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> property(<span class="string">"type"</span>).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以通多下面的函数来获得任意属性的值：QVariant QObject::property(QString propertyName);<br>QVariant是一个联合体的封装，其中包含了所有基本类型和所允许的全部Q_PROPERTY类型。QVariant有一个toString()函数能够为它支持的许多类型返回其QString表示。<br>QVariant对象可以通过QMetaProperty::read()或者QObject::property()获得<br>同一类的所有对象会共享同一个metaObject，因而会有相同元属性组<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QString <span class="title">objTOString</span><span class="params">(<span class="keyword">const</span> QObject* obj)</span></span>&#123;</span><br><span class="line">QStringList result;</span><br><span class="line"><span class="keyword">const</span> QMetaObject* meta = obj-&gt;metaObject();</span><br><span class="line">result += QString(<span class="string">"class %1:public %2 &#123;"</span>).arg(meta-&gt;className()).arg(meta-&gt;superClass()-&gt;className());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;meta-&gt;propertyCount();++i)&#123;</span><br><span class="line"><span class="keyword">const</span> QMetaProperty qmp=meta-&gt;property(i);</span><br><span class="line">QVariant value = obj-&gt;property(qmp.name());</span><br><span class="line"><span class="keyword">if</span>(value.canConvert(QVariant::String))&#123;</span><br><span class="line">result += QString(<span class="string">"%1 %2=%3;"</span>)</span><br><span class="line">.arg(qmp.typeName())</span><br><span class="line">.arg(qmp.name())</span><br><span class="line">.arg(value.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">result += <span class="string">"&#125;;"</span>;</span><br><span class="line"><span class="keyword">return</span> result.join(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="QMetaType"><a href="#QMetaType" class="headerlink" title="QMetaType"></a>QMetaType</h2><blockquote><ol><li>QMetaType是一个用于值类型的辅助类，对于60多种内置类型，QMetaType为每个类型ID关联了一个类型名，从而使构造和析构可以在运行时动态发生。有一个名称为QMetaType::Type的公共枚举，它有所有QVariant兼容类型的值。在QMetaType::Type中的枚举值与QVariant::Type中的枚举值一样<br>通过使用Q_ENUMS宏可以在QVariant系统中加入一些自定义的枚举类型。<br>使用Q_DECLARE_METATYPE(MyType)宏也有可能把自己的值类型加到QMetaType列表中。如果MyType有公共的默认复制构造函数和公共的复制构造函数以及一个公共的析构函数，Q_DECLARE_METATYPE宏使得它可用作QVariant中的自定义类型<br>要注册的元类型必须已经用Q_DECLARE_METATYPE声明过。模板函数qRegisterMetaType<t>()会注册类型T并返回由QMetaType使用的内部ID。这个函数有一个重载版本，qRegisterMetaType<t>(const char* name),它可以让你注册一个名称作为类型T的名称。对于这个函数的调用必须早早地出现在主程序中。</t></t></li></ol></blockquote><figure class="highlight c"><figcaption><span>fraction.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fraction</span>:</span><span class="keyword">public</span> QPair&lt;qint32,qint32&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Fraction(qint32 n=<span class="number">0</span>,qint32 d=<span class="number">1</span>):QPair&lt;qint32,qint32&gt;(n.d)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">Q_DECLARE_METATYPE(Fraction);</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>metatype.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"><span class="function">QApplication <span class="title">app</span><span class="params">(argc,argv)</span></span>;</span><br><span class="line">qRegissterMetaType&lt;Fraction&gt;(<span class="string">"Fraction"</span>);</span><br><span class="line"><span class="function">Fraction <span class="title">twoThirds</span><span class="params">(<span class="number">2</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line">QVariant var;</span><br><span class="line">var.setValue(twoThirds);</span><br><span class="line">Q_ASSERT(var.value&lt;Fraction&gt;() == twoThirds);</span><br><span class="line"></span><br><span class="line"><span class="function">Fraction <span class="title">oneHalf</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">Fraction <span class="title">threeQuarters</span><span class="params">(<span class="number">3</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">QList&lt;Fraction&gt; fractions;</span><br><span class="line">fractions&lt;&lt;oneHalf&lt;&lt;twoThirds&lt;&lt;threeQuarters;</span><br><span class="line"><span class="function">QFile <span class="title">binaryTestFile</span><span class="params">(<span class="string">"testMetaType.bin"</span>)</span></span>;</span><br><span class="line">binaryTestFile.open(QIODevice::WriteOnly);</span><br><span class="line"><span class="function">QDataStream <span class="title">dout</span><span class="params">(&amp;binaryTestFile)</span></span>;</span><br><span class="line">dout&lt;&lt;fractions;</span><br><span class="line">binaryTestFile.close();</span><br><span class="line">binaryTestFile.open(QIODevice::ReadOnly);</span><br><span class="line"><span class="function">QDataStream <span class="title">din</span><span class="params">(&amp;binaryTestFile)</span></span>;</span><br><span class="line">QList&lt;Fraction&gt; frac2;</span><br><span class="line">din &gt;&gt; frac2;</span><br><span class="line">binaryTestFile.close();</span><br><span class="line">Q_ASSERT(fractions == frac2);</span><br><span class="line">creatTest();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creatTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> fracType = QMetaType::type(<span class="string">"Fraction"</span>);</span><br><span class="line"><span class="keyword">void</span>* vp = QMetaType::construct(fracType);</span><br><span class="line">Fraction* fp = <span class="keyword">reinterpret_cast</span>&lt;Fraction*&gt;(vp);</span><br><span class="line">fp-&gt;first  =<span class="number">1</span>;</span><br><span class="line">fp-&gt;second = <span class="number">2</span>;</span><br><span class="line">Q_ASSERT(*fp == Fraction(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="invokeMethod"><a href="#invokeMethod" class="headerlink" title="invokeMethod()"></a>invokeMethod()</h2><blockquote><ol><li>Qt把信号连接到槽需要一种机制：通过名称以类型安全的方式来间接调用这些槽，当调用槽时，实际是由invokeMethod()完成的。</li><li>与QObject::connect()类似，invokeMethod()接受一个可选参数Qt::ConnectionType,该参数可让你来决定是要用同步调用还是要用异步调用。默认情况下是Qt::AutoConnection，表示发射者和接收者处于同一线程中时会同步执行一个槽</li><li>要通过invokeMethod()向函数传递类型参数，可以用Q_ARG宏创建一些值，这样会返回一个QGenericArgument，它封装了单个参数的类型和值信息</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> AutoSaver::saveIfNecessary()&#123;</span><br><span class="line"><span class="keyword">if</span>(!QMetaObject::invokeMethod(parent(),<span class="string">"save"</span>))&#123;</span><br><span class="line">qWarning()&lt;&lt;<span class="string">"AutoSaver:error invoking save() on parent"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">QByteArray buffer=...;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">bool</span> b = QMetaObject::invokeMethod(m_thread,<span class="string">"caculateSpectrum"</span>,Qt::AutoConnection,Q_ARG(QByteArray,buffer),Q_ARG(<span class="keyword">int</span>,format.frequency()),Q_ARG(<span class="keyword">int</span>,bytesPerSample));</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">## MVC设计模式</span><br><span class="line">&gt; <span class="number">1.</span> MVC由三类对象组成。模型是应用程序对象，视图是它的屏幕展示，控制器定义了用户界面对用户输入的反应行为。</span><br><span class="line">&gt; <span class="number">2.</span> 在Qt中，不同的控制器类的基类是QAbstractItemDelegate。那些连接信号与槽的connect语句也可以认为是控制器代码</span><br><span class="line">&gt; <span class="number">3.</span> Qt中包含有一个模型/视图框架，用于维护数据的组织管理和向用户的呈现方式之间的分离。三个最常用的视图类(列表、树和表格)都是默认提供的。另外，它还提供了抽象的和具体的数据模型，这些数据模型可被扩展和自定义以保存不同类型的数据。</span><br><span class="line">&gt; <span class="number">4.</span> 视图是获取、修改和呈现数据的对象。QAbstractItemModel定义了视图(还有委托)访问数据的一个标准接口。模型中存储供显示和操作的具体数据。通过信号和槽，他们将数据的变化通知给所有相关联的视图。每个视图对象都有一个指向模型对象的指针，视图对象会频繁访问模型的方法以获取或设置数据，或者做各种其他操作。</span><br><span class="line">&gt; <span class="number">5.</span> 模型中每个数据项都用一个模型索引来表示。模型索引为视图和委托提供了在不知道其底层数据结构的情况下间接访问模型中数据项的方法。QModeIndex对象由模型创建，可以被模型、视图或委托代码用于定位数据模型中特定项。QModeIndex对象具有很短的生命周期，可能在刚刚创建后就变成无效的状态，因此它们应该被立即使用而后丢弃</span><br><span class="line">&gt; <span class="number">6.</span> 如果使用一个在若干指令操作前已经存在的QModeIndex，那么应该先调用QModelIndex::isValid（）。QPersistentModelIndex对象具有更长的生命周期，但是在使用前任然应该先调用isValid()来进行检查</span><br><span class="line"></span><br><span class="line">## 智能指针</span><br><span class="line">&gt; <span class="number">1.</span> 一个重写了指针解引用操作<span class="keyword">operator</span>*()和<span class="keyword">operator</span>-&gt;()的类被称为智能指针。</span><br><span class="line">&gt; <span class="number">2.</span> QScopedPointer是一个在指针作用域结束后自动删除所引用对象的智能指针。它类似于<span class="built_in">std</span>::<span class="built_in">auto_ptr</span>。复制QScopedPointer是毫无意义的，因为它会导致所引用的对象重复删除</span><br><span class="line">&gt; <span class="number">3.</span> QSharedPointer是一个自动删除它所引用的对象的智能指针，但是它允许被复制，而且QSharedPointer会保持一个引用计数。共享的堆对象只有在最后一个指向它的只能指针销毁时才会被删除。</span><br><span class="line"></span><br><span class="line">## 输入掩码</span><br><span class="line">&gt; <span class="number">1.</span>所谓的输入掩码，是一种控制用户在输入窗件中可键入的内容的主动模式。它有助于防止输入某些类型的不正确的数据。每个QLineEdit都有一个QString属性用来存储掩码字符。输入掩码可以指定在键入QLineEdit的字符串中那个位置处的何种字符是允许的。该字符串由一些特殊的、预定义的掩码字符和一些占据输入字符串相应位置的普通字符构成</span><br><span class="line">&gt; 掩码字符：</span><br><span class="line">* A:ASCII字母型字符——大写或者小写</span><br><span class="line">* N:ASCII字母数字型字符——大写或者小写</span><br><span class="line">* X:任意的ASCII字符</span><br><span class="line">* D:ASCII非零数字</span><br><span class="line">* <span class="number">9</span>:ASCII数字</span><br><span class="line">* H:十六进制数字</span><br><span class="line">* B:二进制数字</span><br><span class="line">* &gt;:随后的字母字符是大写</span><br><span class="line">* &lt;:随后的字母字符是小写</span><br><span class="line">* ！:结束大小写转换</span><br><span class="line">* \:转义字符</span><br><span class="line"></span><br><span class="line">```C</span><br><span class="line">QLineEdit* m_StringEntry;</span><br><span class="line">m_StringEntry-&gt;setInputMask(m_InputMask-&gt;text());</span><br></pre></td></tr></table></figure><h2 id="QRegExp"><a href="#QRegExp" class="headerlink" title="QRegExp"></a>QRegExp</h2><blockquote><ol><li>正则表达式是验证输入、从输入中提取数据以及对输入进行搜索和替换的强大工具。Qt提供了QRegExp类，它实现了Perl风格的扩展正则表达式语言的大部分功能</li><li>特殊字符：<ul><li>‘.’可以与任意字符相匹配，称之为元字符</li><li>‘\n’匹配换行符</li><li>‘\f’匹配换页符</li><li>‘\t’匹配制表符</li><li>‘\xhhhh’匹配一个Unicode字符，其对应的码值是范围为0x0000到0xFFFF之间的一个十六进制数hhhh</li></ul></li><li>量词——说明前面的字符(或字符组)在匹配的表达式中可出现次数的修饰符<ul><li>‘+’ 出现1次或者更多次</li><li>‘?’ 出现0次或者1次</li><li>‘*’ 出现0次或者更多次</li><li>{i,j} 出现至少i次但不超过j次</li></ul></li><li>字符集——在匹配表达式指定位置允许出现的字符集合<ul><li>‘\s’ 匹配任何空白符</li><li>‘\S’ 匹配任何非空白符</li><li>‘\d’ 匹配任何数字字符：从’0’到’9’</li><li>‘\D’ 匹配任何非数字字符</li><li>‘\w’ 匹配任何“单词”字符，也就是任意的字母、数字或者下划线</li><li>‘\W’ 匹配任意的非单词字符</li></ul></li><li>字符集也可以使用方括号指定:<ul><li>[AEIOU]匹配这五个字符中的任意一个</li><li>[a-g]短线使此集合可匹配从’a’到’g’的字符</li><li>[^xyz]匹配任何除这三字符以外的字符</li></ul></li><li>分组和捕获字符——(圆括号)是可以用来把字符划分成组的特殊字符。字符组可以是后向引用的。也就是说，如果存在一个匹配，那么分组了的值将可以通过各种方法来捕获和访问。为了简便起见，一般规定在一个正则表达式中最多可以引用9个分组，即使用\1到\9这样的修饰符。此外还有一个QRegExp成员函数cap(int nth),它返回第那个分组(基于QString的形式返回)</li><li>锚点字符——去顶尝试进行匹配操作的边界<ul><li>脱字符(^),如果它是正则表达式中的第一个字符，则说明匹配过程从字符串的开头处开始</li><li>美元符($),如果它是正则表达式的最后一个字符，则表明匹配过程指导字符串的结尾才结束</li><li>此外，还有单词边界(\b)断言或者非单词边界(\B),有助于我们关注正则表达式本身</li></ul></li></ol></blockquote><h2 id="Qt环境变量的获取与设置"><a href="#Qt环境变量的获取与设置" class="headerlink" title="Qt环境变量的获取与设置"></a>Qt环境变量的获取与设置</h2><blockquote><p>QProcess::environment()函数和setEnvironment()函数</p></blockquote><h2 id="QProcess和进程控制"><a href="#QProcess和进程控制" class="headerlink" title="QProcess和进程控制"></a>QProcess和进程控制</h2><blockquote><ol><li>QProcess是一个能够非常方便而且跨平台的用于启动和控制其他进程的类。它从QPbject派生而来，可充分利用信号和槽来简化和其他Qt类的交互</li><li>一个QProcess可以使用start()函数来启动另外一个进程，新进程将会成为一个子进程并且在父进程终止时而随之终止</li><li>Qt的线程模型允许线程的优先次序和控制。QThread是一个低级类，适合用于显式的构建长期运行的线程</li><li>QtConcurrent是一个命名空间，提供了用于编写并发软件的更高层次的类和算法。该命名空间有一个重要的类，QThreadPool，这是一个管理线程池的类。每个Qt应用程序都有一个QThreadPool::globalInstance()函数，它带有一个推荐的最大线程数，在大多数系统上，处理核的数量就是该值的默认值</li><li>借助QtConcurrent中函数式的map/filter/reduce算法，通过将进程分布在由线程池管理的多个线程上，可编写一个能够自动利用系统多核的程序。另外，在命令模式和利用QtConcurrent::run()工作时可把QRunnable用作基类。在这些情况下，无须显示地创建线程或者直接管理他们，只需简单把工作片段描述为具有正确接口的对象即可</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Qt核心模块&quot;&gt;&lt;a href=&quot;#Qt核心模块&quot; class=&quot;headerlink&quot; title=&quot;Qt核心模块&quot;&gt;&lt;/a&gt;Qt核心模块&lt;/h2&gt;&lt;p&gt;Qt是一个大库，由数个较小的库或者模块组成，其中最为常见的有如下这些，除了core和gui，其余模块都需要在
      
    
    </summary>
    
      <category term="GUI" scheme="https://suda-morris.github.io/categories/GUI/"/>
    
    
      <category term="Qt4" scheme="https://suda-morris.github.io/tags/Qt4/"/>
    
  </entry>
  
  <entry>
    <title>POE Introduction</title>
    <link href="https://suda-morris.github.io/2015/07/06/poe-introduction/"/>
    <id>https://suda-morris.github.io/2015/07/06/poe-introduction/</id>
    <published>2015-07-06T12:16:00.000Z</published>
    <updated>2018-07-05T01:38:09.642Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/G9gjcdZ.png" alt="什么是POE" title="">                </div>                <div class="image-caption">什么是POE</div>            </figure><blockquote><p>以太网供电（Power over Ethernet，简称PoE）也称为PoE供电，是一种可以在以太网路中透过双绞线来传输电力与资料到装置上的技术。以太网供电技术的出发点是让IP电话、WLAN接入点、网络摄像头等小型网络设备，可以直接从以太网线（4对双绞线中空闲的2对来传输）获得电力，无需单独铺设电力线，以简化系统布线，降低网络基础设施的建设成本。</p></blockquote><h2 id="使用POE的注意事项"><a href="#使用POE的注意事项" class="headerlink" title="使用POE的注意事项"></a>使用POE的注意事项</h2><blockquote><p>使用POE需要留意以下三点：</p></blockquote><ol><li>如上图所示，不是所有的以太网交换机都支持PoE供电功能，供电模块内置或外置，一般价格比普通交换贵一些。</li><li>要求终端也支持PoE受电功能。</li><li>通过网线供电，功率本身是有一定限制的，留意查看不同设备的使用说明和功率要求。</li></ol><h2 id="典型的系统"><a href="#典型的系统" class="headerlink" title="典型的系统"></a>典型的系统</h2><blockquote><p>一个典型的以太网供电系统。在配线柜里保留以太网交换机设备，用一个带电源供电集线器(Midspan HUB)给局域网的双绞线提供电源。在双绞线的末端，该电源用来驱动电话、无线接入点、相机和其他设备。为避免断电，可以选用一个UPS。</p></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote><p>标准的五类网线有<strong>四对双绞线</strong>,但是在10M BASE-T和100M BASE-T中只用到其中的<strong>两对</strong>。IEEE80 2.3af允许<strong>两种</strong>用法:</p><ol><li>应用空闲脚供电时,4、5脚连接为正极,7、8脚连接为负极。</li><li>应用数据脚供电时,将DC电源加在传输变压器的中点,不影响数据的传输。在这种方式下线对1、2和线对3、6可以为任意极性。</li></ol><p>IEEE802.3af标准不允许同时应用以上两种情况。电源提供设备PSE只能提供一种用法,但是电源应用设备PD必须能够同时适应两种情况。该标准规定供电电源通常是48V、13W的。PD设备提供48V到低电压的转换是较容易的,但同时应有1500V的绝缘安全电压。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/uRd8v4m.png" alt="POE典型组网图" title="">                </div>                <div class="image-caption">POE典型组网图</div>            </figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><blockquote><p>一个完整的POE系统包括供电端设备(PSE, Power Sourcing Equipment)和受电端设备(PD, Powered Device)两部分。PSE设备是为以太网客户端设备供电的设备,同时也是整个POE以太网供电过程的管理者。而PD设备是接受供电的PSE负载,即POE系统的客户端设备,如IP电话、网络安全摄像机、AP及掌上电脑( PDA)或移动电话充电器等许多其他以太网设备（实际上,任何功率不超过13W的设备都可以从RJ45插座获取相应的电力）。</p><p>POE标准供电系统的主要供电特性参数为：</p></blockquote><ol><li>电压在44～57V之间,典型值为48V。</li><li>允许最大电流为550mA,最大启动电流为500mA。</li><li>典型工作电流为10～350mA,超载检测电流为350～500mA。</li><li>在空载条件下,最大需要电流为5mA。</li><li>为PD设备提供3.84～12.95W三个等级的电功率请求,最大不超过13W。（注意PD分级0和分级4没有显示出来而且不应采用。）</li><li>2009年10月30日 IEEE出了一个最新的802.3at标准，其中规定了POE可以提供更高的功率，超过了13W，可以达到30W,分三个等级(7W,15.4W,30W)</li><li>一般设备上会标明：15.4W/802.3af,30W/802.3at</li></ol><h2 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h2><ol><li>检测<ul><li>一开始,PSE设备在端口输出很小的电压,直到其检测到线缆终端的连接为一个支持IEEE 802.3af标准的受电端设备。检测电源输出线对之间的阻容值来判断PD是否存在</li></ul></li><li>PD端设备分类<ul><li>当检测到受电端设备PD之后,PSE设备可能会为PD设备进行分类,并且评估此PD设备所需的功率损耗。</li></ul></li><li>开始供电<ul><li>在一个可配置时间(一般小于15μs)的启动期内,PSE设备开始从低电压向PD设备供电,直至提供48V的直流电源。</li></ul></li><li>供电<ul><li>为PD设备提供稳定可靠48V的直流电,满足PD设备不越过 30W的功率消耗。</li></ul></li><li>断电<ul><li>若PD设备从网络上断开时,PSE就会快速地(一般在300～400ms之内)停止为PD设备供电,并重复检测过程以检测线缆的终端是否连接PD设备。</li></ul></li></ol><h2 id="HY931147C网络接口-RJ45，集成网络变压器，POE电源信号分离"><a href="#HY931147C网络接口-RJ45，集成网络变压器，POE电源信号分离" class="headerlink" title="HY931147C网络接口(RJ45，集成网络变压器，POE电源信号分离)"></a>HY931147C网络接口(RJ45，集成网络变压器，POE电源信号分离)</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/vkG79aZ.png" alt="内部结构图" title="">                </div>                <div class="image-caption">内部结构图</div>            </figure><ol><li>两个二极管桥确保1236和4578都能用来供电，同时也能确保12作为正或者36作为正互相兼容</li></ol><h2 id="POE电源工作回路"><a href="#POE电源工作回路" class="headerlink" title="POE电源工作回路"></a>POE电源工作回路</h2><ol><li>IEEE 802.3af：15.4W供电功率，在100米最大电缆损耗条件下可传送13W的功率</li><li>IEEE 802.3at：30W供电功率，在100米最大电缆损耗条件下可输送25.5W的功率<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/R9UCls3.png" alt="POE电源工作回路" title="">                </div>                <div class="image-caption">POE电源工作回路</div>            </figure></li></ol><h2 id="POE等级界限（按终端设备划分）"><a href="#POE等级界限（按终端设备划分）" class="headerlink" title="POE等级界限（按终端设备划分）"></a>POE等级界限（按终端设备划分）</h2><ol><li>Class1：可向PD输送3.84W的最大功率</li><li>CLass2：可向PD输送6.49W的最大功率</li><li>Class3：可向PD输送13.0W的最大功率</li><li>Class4：可向PD输送25.5W的最大功率</li></ol><h2 id="POE工作原理"><a href="#POE工作原理" class="headerlink" title="POE工作原理"></a>POE工作原理</h2><ol><li>检测<ol><li>处理PSE的使用以确保远端是PD所期望的功率</li><li>避免损坏那些不兼容POE标准的老式设备</li><li>低电压、低电流限制探测功能电路寻找25K特征电阻</li></ol></li><li>分级<ol><li>用于确定PD所需功率的任选过程</li><li>可对电源管理有所帮助</li><li>中间电压/电流限制探测功能电路寻找四个电流吸收器之一</li><li>仅在成功的检测之后进行</li></ol></li><li>电源维护<ol><li>确保在PD断连时将高压电源拿掉</li></ol></li><li>过流<ol><li>在链路操作的不同阶段所提供的保护有所不同</li><li>防止不良事件的发生</li><li>确保在发生PD或电缆布线系统问题时将电源拿掉<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/Jh1B0xr.png" alt="POE周期图" title="">                </div>                <div class="image-caption">POE周期图</div>            </figure></li></ol></li></ol><h2 id="线性稳压器"><a href="#线性稳压器" class="headerlink" title="线性稳压器"></a>线性稳压器</h2><ol><li>优点<ol><li>低输出纹波和噪声，无EMI问题</li><li>低成本</li><li>简单，所需的外部组件极少，易于配置和设计</li><li>面对大的负载阶跃，可在Vout上实现快速瞬态响应</li><li>易于实现短路保护</li></ol></li><li>缺点<ol><li>低效率</li><li>热问题</li><li>Vout必须低于Vin</li></ol></li><li>工作原理<ol><li>线性稳压器和输出阻抗一起形成了一个分压网络</li><li>线型稳压器的作用就像受控的可变电阻器，其可根据输出负载自我调节以保持一个稳定的输出</li></ol></li><li>压降电压：为使线性稳压器处在稳压器的指定工作范围之内，VIN与VOUT之间可接受的最小压差</li><li>线型稳压器中的元件可以是双极型晶体管或MOSFET。不同的配置将产生不同的压降电压<ol><li>双极型线型稳压器具有较高的压降电压，并能支持较高的输入电压且拥有更好的瞬态响应</li><li>MOSFET LDO能支持非常低的压降、低静态电流、改善的噪声性能和低电源抑制</li></ol></li><li>静态电流：由稳压器所消耗且不流向输出负载的电流<ol><li>该规格指标对于需要时钟保持运行的应用（如基带、实时时钟）很重要</li></ol></li><li>电源抑制比（PSRR）：已调输出电压纹波与输入电压纹波之比<ol><li>该规格指标对于具有高噪声限值要求的应用（如低噪声放大器、音频、RF和无线等）很重要</li></ol></li><li>基带噪声：某个特定频率范围内的总噪声能量<ol><li>该规格指标对于具有高噪声限值要求的应用（如PLL、TXCO、RF和无线等）很重要<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/7wrqQCt.png" alt="LDO的选择" title="">                </div>                <div class="image-caption">LDO的选择</div>            </figure></li></ol></li></ol><h2 id="开关稳压器"><a href="#开关稳压器" class="headerlink" title="开关稳压器"></a>开关稳压器</h2><ol><li>优点<ol><li>高效率</li><li>优良的热性能</li><li>高功率密度</li><li>允许宽输入电压范围</li><li>Vout可以低于或高于Vin</li><li>可利用变压器提供隔离</li><li>可利用变压器提供多个输出</li></ol></li><li>缺点<ol><li>开关操作会产生较高的输出纹波和噪声</li><li>缓慢的瞬态响应（响应带宽约为开关频率的1/10）</li><li>高复杂性</li></ol></li><li>工作原理<ol><li>电感负责储存能量及向输出负载释放能量</li><li>电感根据开关管的开通从输入端获得能量</li></ol></li><li>三种基本的直流开关变换器拓扑（公式推导基于电感的平均电压为0，D为PWM占空比）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/4mqTm8J.png" alt="基本拓扑" title="">                </div>                <div class="image-caption">基本拓扑</div>            </figure></li><li>同步与非同步<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/hxTCszv.png" alt="同步与非同步" title="">                </div>                <div class="image-caption">同步与非同步</div>            </figure></li><li>隔离式与非隔离式<ol><li>隔离式变换器在输入和输出之间没有电流回路，原副边不同地</li><li>变压器通过磁场将能量从初级耦合至次级</li><li>隔离式变换器通常在需要提供初级至次级不同地，高可靠性、防雷、耐高压等，如隔离的医疗电源</li><li>并非标准负载点电源（POL）解决方案所常用</li><li>不仅要电气隔离，还要信号隔离，所以反馈回路需要使用光耦<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/ncj4TY4.png" alt="隔离开关电源" title="">                </div>                <div class="image-caption">隔离开关电源</div>            </figure></li></ol></li></ol><h2 id="电荷泵稳压器"><a href="#电荷泵稳压器" class="headerlink" title="电荷泵稳压器"></a>电荷泵稳压器</h2><ol><li>电荷泵稳压器是一种只通过电容器的交替式充电和放点来传送功率的开关稳压器</li><li>它适合于具有低负载电流及中等输入-输出电压差的应用</li><li>开关操作会产生较高的输出纹波和噪声，输出电流能力受限于电容器</li><li>倍压电路<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/8p5zBIr.png" alt="倍压电路" title="">                </div>                <div class="image-caption">倍压电路</div>            </figure></li></ol><h2 id="变换器控制系统"><a href="#变换器控制系统" class="headerlink" title="变换器控制系统"></a>变换器控制系统</h2><ol><li>由于在电路中实现了闭环控制系统，因此变换器能够在不同的条件下提供一个恒定的电压输出<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/G4Rr42H.png" alt="控制系统工作原理" title="">                </div>                <div class="image-caption">控制系统工作原理</div>            </figure></li></ol><h2 id="UVLO-低电压锁定"><a href="#UVLO-低电压锁定" class="headerlink" title="UVLO(低电压锁定)"></a>UVLO(低电压锁定)</h2><p>欠压关断模式可保证IC在供电电压不足的时候不至于损坏，一个低电压锁定（UVLO）电路可确保IC在电池电压未达到安全操作电压前不会激活，UVLO的功能会展示滞后现象，以确保在电源供应上的噪音不会不慎导致系统故障。为了更稳定的工作，某些DC/DC转换器具有UVLO功能，电源开启后，UVLO功能使内部电路处于待机状态，直到DC/DC转换器的输入电压达到UVLO电压，以此来减少消费电流并避免误操作</p><h2 id="TPS54160（1-5A-60V-降压DC-DC转换器）"><a href="#TPS54160（1-5A-60V-降压DC-DC转换器）" class="headerlink" title="TPS54160（1.5A,60V,降压DC/DC转换器）"></a>TPS54160（1.5A,60V,降压DC/DC转换器）</h2><ol><li>支持3.5V~60V的输入电压范围</li><li>内部高端MOSFET的导通电阻200mΩ。（low side一般指MOSFET接地，其驱动信号是基于地信号的，在驱动电路中不需要加电压抬升电路；如果是high side即常说的高端驱动，其驱动信号是浮动的，需要加电压抬升电路）</li><li>低负载的转换效率也很高，因为设计了独特的Pulse Skipping Eco-mode</li><li>可调节的UVLO电压和滞后时间</li><li>116uA的静态工作电流</li><li>1.3uA的关断电流</li><li>100KHz~2.5MHz的开关频率</li><li>与外部时钟同步</li><li>内部有0.8V的参考电压</li><li>欠压（UV）输出保护内部默认设置为2.5V，但是可以通过EN引脚来提高</li><li>输出电压启动坡度可以通过SS（slow start）引脚来控制<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/TSjMe8c.png" alt="简化的原理图" title="">                </div>                <div class="image-caption">简化的原理图</div>            </figure></li><li>在BOOT引脚和PH（内部高端MOEFET的源极）引脚之间需要一个自举电容，当其上的电压少于器件的最低要求，输出将会被关闭，直到自举电容被刷新</li><li>COMP是误差放大器的输出，并且会输入到内部的电流比较器中。这个引脚需要连接频率补偿元件</li><li>EN脚电压低于1.2后会使芯片不工作，悬空可以工作（芯片内部该引脚上拉到电流源）。要求电压范围不超过5V</li><li>PWRGD开漏输出，如果芯片过压、关断、跌落，该引脚会输出低电平</li><li>RT(Resistor Timing)/CLK内部的放大器会使该引脚维持在一个固定的电压值，该引脚通过一个连接到地的电阻来设置开关频率</li><li>SS/TR该引脚到地的电容可以设置输出电压的抬升时间，降低启动过程中的浪涌电流</li><li>VSENSE反馈电压不能超过3V</li><li>电流模式控制可以降低输出电容，简化频率补偿<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/n8qTBGt.png" alt="内部结构图" title="">                </div>                <div class="image-caption">内部结构图</div>            </figure></li><li>输出电压调节<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/PPkiol6.png" alt="调节输出电压" title="">                </div>                <div class="image-caption">调节输出电压</div>            </figure></li><li>如果Vin电压小于2.5V，那么TPS54160将不工作，如果需要更高的UVLO电压，可以如图所示<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/7U5iiB1.png" alt="提高UVLO" title="">                </div>                <div class="image-caption">提高UVLO</div>            </figure></li><li>开关频率由以下公式确定<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/EcqbYXX.png" alt="开关频率确定公式" title="">                </div>                <div class="image-caption">开关频率确定公式</div>            </figure></li><li>PCB Layout要领<ol><li>Vin需要使用低等效串联电阻(ESR)的陶瓷电容旁路，可以选择X5R或者X7R的陶瓷电容</li><li>减小由旁路电容的连线，Vin引脚和续流二极管的正极所构成的回路</li><li>power pad连接到GND，并且通过多个过孔连接至地平面</li><li>续流二极管的阴极和输出电感需要靠近PH引脚</li><li>Rt电阻离RT/CLK引脚的距离越近越好<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/Itr7Gst.png" alt="Layout举例" title="">                </div>                <div class="image-caption">Layout举例</div>            </figure></li></ol></li></ol><h2 id="开尔文连接"><a href="#开尔文连接" class="headerlink" title="开尔文连接"></a>开尔文连接</h2><p>开尔文连接是一种用于模拟信号远传的连接方法，其特点是不在驱动器的输出端直接连接反馈到反相端，而是从负载端将反馈接到驱动器的反相端的而一种连接方法，其目的是减小线路电阻引起的误差</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
      <category term="Hardware" scheme="https://suda-morris.github.io/categories/Hardware/"/>
    
    
      <category term="POE" scheme="https://suda-morris.github.io/tags/POE/"/>
    
  </entry>
  
  <entry>
    <title>Review in C Language</title>
    <link href="https://suda-morris.github.io/2015/06/27/review-in-c/"/>
    <id>https://suda-morris.github.io/2015/06/27/review-in-c/</id>
    <published>2015-06-27T07:17:00.000Z</published>
    <updated>2018-12-26T11:33:21.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ifdef和if-defined的差别"><a href="#ifdef和if-defined的差别" class="headerlink" title="ifdef和if defined的差别"></a>ifdef和if defined的差别</h2><p>注意两者都有个define的作用，区别在于使用方式上。前者的通常用法是:<br><figure class="highlight c"><figcaption><span>只能在两者中选择是否有定义</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>  XXX</span></span><br><span class="line"></span><br><span class="line">   ....</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"></span><br><span class="line">   ....</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>对于后者，常用法是：<br><figure class="highlight c"><figcaption><span>可以在多个中选择是否有定义</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined xxx1</span></span><br><span class="line"></span><br><span class="line">   ....</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined xxx2</span></span><br><span class="line"></span><br><span class="line">   ....</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined xxx3</span></span><br><span class="line"></span><br><span class="line">   ....</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><h2 id="字节对齐"><a href="#字节对齐" class="headerlink" title="字节对齐"></a>字节对齐</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @def RT_ALIGN(size, align)</span></span><br><span class="line"><span class="comment"> * Return the most contiguous size aligned at specified width. RT_ALIGN(13, 4) would return 16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RT_ALIGN(size, align)           (((size) + (align) - 1) &amp; ~((align) - 1))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @def RT_ALIGN_DOWN(size, align)</span></span><br><span class="line"><span class="comment"> * Return the down number of aligned at specified width. RT_ALIGN_DOWN(13, 4) would return 12.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RT_ALIGN_DOWN(size, align)      ((size) &amp; ~((align) - 1))</span></span><br></pre></td></tr></table></figure><h2 id="小细节"><a href="#小细节" class="headerlink" title="小细节"></a>小细节</h2><ol><li>C++并不支持void*隐式转换为其他类型的指针，但是C语言允许</li><li>变量命名，所有字符都使用小写，含义多的可以用<strong>_</strong>进行辅助</li><li>全局变量能少用就少用，必须要用的情况下，可以考虑添加前缀<strong>g_</strong></li><li>不要将<strong>_</strong>作为宏的开头或者结尾</li><li>要使用<strong>#if</strong>而不是<strong>#ifdef</strong>，可以使用<strong>define（）</strong>来替代<strong>#ifdef</strong>的功能<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !<span class="meta-keyword">define</span>(USERS_DEFINE)</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">define</span> USERS_DEFINE ...</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li></ol><h2 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h2><p>一旦使用了，就是告诉编译器，即使这个变量没有被使用或修改其他内存单元，它的值也可能发生变化。通俗地讲，告诉编译器，不要把你的那一套优化策略用在我的身上</p><h2 id="两种不太常见的格式：-和"><a href="#两种不太常见的格式：-和" class="headerlink" title="两种不太常见的格式：%[]和%*"></a>两种不太常见的格式：%[]和%*</h2><ol><li><p>%[]用于限制读取类型，常见于字符串的过滤。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设输入：22 hello,string to me!</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %[a-z]"</span>, &amp;tmp, str);<span class="comment">//22 hello</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %[^i]"</span>, &amp;tmp, str);<span class="comment">//22 hello,str</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %[^,]"</span>, &amp;tmp, str);<span class="comment">//22 hello</span></span><br></pre></td></tr></table></figure></li><li><p>%*是忽略第一个输入，也可以理解为文件宽度(域宽)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设输入：22 33</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%*d %d"</span>, &amp;tmp);<span class="comment">//读到33</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">10</span>] = <span class="string">"dir"</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%*s%s"</span>,<span class="number">4</span> ,<span class="string">""</span> , str);<span class="comment">//输出:    dir,前面有四个空白占位</span></span><br></pre></td></tr></table></figure><h2 id="select机制"><a href="#select机制" class="headerlink" title="select机制"></a>select机制</h2><ol><li>select()的机制中提供一fd_set的数据结构，实际上是一long类型的数组， 每一个数组元素都能与一打开的文件句柄（不管是Socket句柄，还是其他文件或命名管道或设备句柄）建立联系，建立联系的工作由程序员完成，当调用select()时，由内核根据IO状态修改fd_set的内容，由此来通知执行了select()的进程哪一Socket或文件可读或可写。</li><li>程序去select的时候，如果没有数据输入，程序会一直等待，直到有数据为止，也就是程序中无需循环和sleep</li><li>使用Select就可以完成非阻塞（所谓非阻塞方式non-block，就是进程或线程执行此函数时不必非要等待事件的发生，一旦执行肯定返回，以返回值的不同来反映函数的执行情况，如果事件发生则与阻塞方式相同，若事件没有发生，则返回一个代码来告知事件未发生，而进程或线程继续执行，所以效率较高）方式工作的程序，它能够监视我们需要监视的文件描述符的变化情况——读写或是异常。</li><li>返回值：准备就绪的描述符数，若超时则返回0，若出错则返回-1。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" title="">                </div>                <div class="image-caption">suda-morris</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ifdef和if-defined的差别&quot;&gt;&lt;a href=&quot;#ifdef和if-defined的差别&quot; class=&quot;headerlink&quot; title=&quot;ifdef和if defined的差别&quot;&gt;&lt;/a&gt;ifdef和if defined的差别&lt;/h2&gt;&lt;p&gt;注意
      
    
    </summary>
    
      <category term="Job Hunting" scheme="https://suda-morris.github.io/categories/Job-Hunting/"/>
    
    
      <category term="C" scheme="https://suda-morris.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Embedded Linux</title>
    <link href="https://suda-morris.github.io/2015/06/08/embedded-linux/"/>
    <id>https://suda-morris.github.io/2015/06/08/embedded-linux/</id>
    <published>2015-06-08T14:30:05.000Z</published>
    <updated>2018-07-05T01:38:09.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需要知道的知识点"><a href="#需要知道的知识点" class="headerlink" title="需要知道的知识点"></a>需要知道的知识点</h2><ol><li>ext4文件系统是Linux在PC机上最常用的磁盘文件系统，在嵌入式设备上则常用jffs2文件系统和yaffs2文件系统</li><li>在Linux操作系统中。对于SCSI磁盘。用sd*来表示，第一个磁盘x为a，第二个磁盘x为b，以此类推。磁盘上的第1个分区编号为1，第2个分区编号为2，以此类推。</li><li>swap分区用于Linux在运行期间的虚拟内存使用，其作用类似Windows中的交换文件pagefile.sys</li><li>ARM core的CPU在复位时通常都从0地址取它的第一条指令</li></ol><h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><blockquote><ol><li>所使用的虚拟机是VirtualBox4.3.12，安装的虚拟机是UbuntuMate14.04</li><li>使用的开发板是友善出品的Tiny6410</li><li>虚拟机网络设置成桥接模式(笔记本的以太网卡，切勿错选成无线网卡)</li><li>虚拟机ip地址：192.168.1.88，网关192.168.1.1</li></ol></blockquote><h2 id="系统烧写"><a href="#系统烧写" class="headerlink" title="系统烧写"></a>系统烧写</h2><ol><li>Uboot中开发板的IP地址:192.168.1.230,网关192.168.1.1</li><li><p>开发板设置从SD卡启动，需要确保有一张烧写好UBoot的SD卡或者SDHC卡，Linux中的烧写方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">#for SDHC Card,total sectors=15523840</span><br><span class="line">#dd iflag=dsync oflag=dsync if=u-boot-sd.bin of=/dev/sdb bs=512 count=16 seek=15522798</span><br><span class="line">#dd iflag=dsync oflag=dsync if=u-boot-sd.bin of=/dev/sdb bs=512 count=512 seek=15522030</span><br><span class="line"></span><br><span class="line">#for SD Card,total sectors=1961984</span><br><span class="line">dd iflag=dsync oflag=dsync if=u-boot-sd.bin of=/dev/sdb bs=512 count=16 seek=1961966</span><br><span class="line">dd iflag=dsync oflag=dsync if=u-boot-sd.bin of=/dev/sdb bs=512 count=512 seek=1961198</span><br><span class="line">sync</span><br><span class="line">#BL1:total sectors - 2 - 1024(if your SD Card Size &gt; 2G) -16</span><br><span class="line">#BL2:total sectors - 2 - 1024(if your SD Card Size &gt; 2G) -16 - 512 - 256</span><br></pre></td></tr></table></figure></li><li><p>进入Uboot后，测试能否ping通虚拟主机：ping 192.168.1.88。在这之前可以先看看开发板的IP地址是否与虚拟主机在一个网段内，使用UBoot下的命令：pri</p></li><li>使用nfs命令获取虚拟主机上的uboot二进制文件供烧写(次UBoot是用来从NandFlash启动的，不能错选从SD卡启动的UBoot),成功以后会提示用户该文件的大小，这里记为filesize(切记要使用十六进制表示的数字)<ul><li>nfs 50000000 192.168.1.88:/embeded/KDM/images/v1/u-boot.bin</li></ul></li><li>烧写uboot至NandFlash中<ul><li>nand write.i 50000000 0 $(filesize)    从0地址开始烧写UBoot</li></ul></li><li>使用nfs命令获取虚拟主机上的kernel文件，成功以后会提示用户该文件的大小，这里记为filesize((切记要使用十六进制表示的数字))<ul><li>nfs 50000000 192.168.1.88:/embeded/KDM/images/v1/Image</li></ul></li><li>烧写kernel到NandFlash中<ul><li>nand write.i 50000000 80000 $(filesize)</li></ul></li><li>使用nfs命令获取虚拟主机上的根文件系统文件，成功以后会提示用户该文件的大小，这里记为filesize((切记要使用十六进制表示的数字))<ul><li>nfs 50000000 192.168.1.88:/embeded/KDM/images/v1/yaff2.img</li></ul></li><li>烧写根文件系统到NandFlash中<ul><li>nand write.yaffs 50000000 580000 $(filesize)</li></ul></li><li>根据需要修改启动参数并保存,例如<ul><li>setenv bootargs root=/dev/mtdblock2 console=ttySAC0,115200</li><li>saveenv</li></ul></li></ol><h2 id="测试图形界面程序"><a href="#测试图形界面程序" class="headerlink" title="测试图形界面程序"></a>测试图形界面程序</h2><ul><li>图形界面工具使用的触摸屏校准程序为tslib源码附带的校准程序ts_calibrate,所以如果触摸屏没有校准，可以在Linux系统启动后运行/usr/local/bin/ts_calibrate程序对触摸屏进行校准(通过删除/etc/pointercal文件，可以使得图形界面工具自动调用ts_calibrate程序)，校准完毕会在etc目录下生成pointercal标准文件，供触摸屏库程序转换成符合屏幕的坐标，从而达到校准目的。</li></ul><h2 id="交叉编译器"><a href="#交叉编译器" class="headerlink" title="交叉编译器"></a>交叉编译器</h2><ul><li>arm-linux-gcc是一个“集合命令”，它包含了4个步骤：预处理，汇编，编译和链接，通过链接阶段便生成ELF格式的可执行文件。4个步骤对应执行的程序为arm-linux-cpp，arm-linux-as，ccl，arm-linux-ld。前三个步骤对应的命令行选项为：-E,-S，-c，如果没有任何参数，则代表经过这4个步骤产生可执行文件。</li><li>ELF文件的not stripped属性告诉我们在编译的时候产生的编译阶段需要的符号没有被删除</li><li>通常被编译出的程序都会使用到系统的动态库，而这些基本的动态库大部分也都是glibc库中的。例如open,read,write,select,ioctl等应用程序中的函数都是libc.so动态库中提供的，而glibc还提供了libm.so(数学库)，libcrypt.so(安全库)，libld.so(加载库)等。其中libld.so作为加载库负责在应用程序运行时，加载程序所使用到的动态库文件。在我们移植系统的过程中，这些最基本的动态库也需要被移植到根文件系统中去，这样才能保证程序被正常启动。</li><li>arm-linux-strip test可以删除可执行文件中不需要的编译符号和段描述信息</li><li>arm-linux-objcopy -O binary -S test test.bin 通常被用来将生成的ELF格式的文件转化为只含有二进制指令和程序数据的文件test.bin.也只有这样的二进制指令文件才能直接被硬件执行。</li><li>arm-linux-dump -D test &gt; test.dis则是反编译，将ELF格式的可执行文件反编译成汇编信息文件test.dis，有助于代码的查看和调试</li><li>arm-linux-readelf -a test | grep ‘Shared’用来获取ELF的头信息，grep ‘Shared’是获取头信息中test可执行文件调用到的动态文件</li><li>arm-linux-gcc 针对arm11的设置：<ol><li>–with-cpu=arm1176jzf-s</li><li>–with-tune=arm1176jzf-s</li><li>–with-float=softfp</li></ol></li></ul><h2 id="bootloader"><a href="#bootloader" class="headerlink" title="bootloader"></a>bootloader</h2><ul><li>目标机上的Bootloader通过串口与主机之间进行文件传输，传输协议通常是xmodem/ymodem/zmodem协议中的一种，但是，串口传输速度有限，因此通过以太网连接并借助tftp或者nfs协议来下载文件是个更好的选择</li><li>bootloader的stage1通常包括的步骤：<ol><li>硬件设备初始化<ul><li>屏蔽所有中断</li><li>设置CPU的速度和时钟频率</li><li>RAM初始化</li><li>关闭CPU内部指令/数据cache</li></ul></li><li>为加载Bootloader的stage2准备RAM空间</li><li>复制bootloader的stage2到RAM空间</li><li>设置好堆栈指针sp</li><li>跳转到stage2的C入口点（修改PC寄存器为核实的地址来实现）</li></ol></li><li>bootloader的stage2通常包括的步骤：<ol><li>初始化本阶段要使用到的硬件设备<ul><li>至少一个串口用来和终端用户进行I/O输出信息</li></ul></li><li>检测系统内存映射</li><li>将kernel镜像和根文件系统镜像从Flash上读到RAM空间中(需要编写Nand Flash裸驱动)</li><li>为内核设置启动参数<ul><li>linux2.4以后的内核都期望以标记列表的形式来传递启动参数，启动参数标记列表以标记ATAG_CORE尅是，以标记ATAG_NONE结束</li><li>每个标记由标识被传递参数的tag_header结构以及随后的参数值数据结构来组成，数据结构tag和tag_header定义在Linux内核源码的include/asm/setup.h头文件中</li><li>在嵌入式Linux系统中，通常需要由Bootloader设置的常见启动参数有：ATAG_CORE,ATAG_MEN,ATAG_CMDLINE</li></ul></li><li>调用内核，跳转到内核第一条指令处，跳转时要满足下列条件<ol><li>CPU寄存器的设置<ul><li>R0=0</li><li>R1=机器类型ID，关于Machine Type Number可以参见linux/arch/arm/tools/mach-types</li><li>R2=启动参数标记列表在RAM中的起始基地址</li></ul></li><li>CPU模式<ul><li>必须禁止中断(IRQs和FIQs)</li><li>CPU必须处于SVC模式</li></ul></li><li>Cache和MMU的设置<ul><li>MMU必须关闭</li><li>指令Cache可以打开亦可以关闭</li><li>数据Cache必须关闭</li></ul></li></ol></li></ol></li><li>U-boot目录结构<ol><li>与处理器体系结构或者开发板硬件直接相关</li><li>通用的函数或者驱动程序</li><li>U-Boot的应用程序、工具或者文档</li></ol></li></ul><h2 id="Uboot常用命令"><a href="#Uboot常用命令" class="headerlink" title="Uboot常用命令"></a>Uboot常用命令</h2><blockquote><ol><li>使用命令时，可以使用其开头的若干个字母代替它</li><li>当运行一个命令之后，如果它是可重复执行的（代码中使用U_BOOT_CMD定义这个命令时，第三个参数是1），若想再次运行可以直接输入回车</li><li>Uboot接受的数据都是16进制，输入时可以省略前缀0x</li></ol></blockquote><ol><li>运行<code>help</code>命令可以看到所有命令的作用，如果要查看某个命令的使用方法，运行<code>help 命令名</code>。可以使用<code>?</code>来代替<code>help</code></li><li>Uboot支持串口下载，网络下载，USB下载，相关命令有：loadb,loads,loadx,loady;tftpboot,nfs;usbslave。使用方法：<ul><li>loadx [off] [baud];off表示文件下载后存放的内存地址，baud表示使用的波特率，如果off参数省略，存放的位置为配置文件中定义的宏CFG_LOAD_ADDR</li><li>tftpboot [loadAddress] [bootfilename]; loadAddress表示文件下载后存放的内存地址，bootfilename表示要下载的文件名称。loadAddress省略，存放的位置为配置文件中定义的宏CFG_LOAD_ADDR。如果bootfilename省略，则使用单板的IP地址构造一个文件名</li><li>nfs [loadAddress] [host ip addr:bootfilename];host ip addr表示服务器的IP地址</li><li>usbslave [wait] [loadAddress]；在PC端使用dnw工具发送文件，U-boot通过USB Device接口接收文件。wait可以取值1或0，表示是否等得数据传输完成，当wait取0时，在后台进行下载，这时在Uboot仍可执行其他操作。下载文件成功后，Uboot会自动创建或者更新环境变量filezise，它表示下载的文件长度，可以在后续命令中使用$(filesize)来引用它</li></ul></li><li>常用的内存操作命令有：查看内存命令md，修改内存命令mm,填充内存命令mw,复制命令cp。这些命令都可以带上后缀”.b”,”.w”,”.l”表示以字节、字、双字为单位进行操作。<ul><li>md[.b,.w,.l] address [count],表示以字节、字、双字（默认是双字）为单位，显示从地址address开始的内存数据，显示的数据个数为count</li><li>mm[.b,.w,.l] address,表示以字节、字或双字为单位，从地址address开始修改内存数据，执行mm命令后，输入新数据后回车，地址会自动增加，Ctrl+C退出</li><li>mw[.b,.w,.l] address value [count],表示以字节、字或双字为单位，往开始地址为address的内存中填充count个数据，数据值为value。</li><li>cp[.b,.w,.l] source target count,表示以字节、字或双字为单位，从原地址source的内存复制count个数据到目的地址target的内存</li><li>nm[.b,.w,.l] address，修改内存值,以一种交互式的方式，按q退出</li></ul></li><li>常用的Nand Flash操作命令只有一个，它根据不同的参数进行不同的操作<ul><li>nand info，查看Nand Flash信息</li><li>nand device [dev]显示或者设置当前使用的Nand Flash</li><li>nand bad显示Nand Flash的坏块</li><li>nand scrub彻底擦除整块Nand Flash中的数据，包括OOB。可以擦除软件坏块标志</li><li>nand erase [clean] [off size],擦除Nand Flash，加上clean时表示在每个块的第一个扇区的OOB区加写入清除标记；off、size表示要擦除的开始偏移地址和长度，如果省略off和size表示要擦除整个Nand Flash</li><li>nand read[.jffs2] addr off size,从Nand Flash偏移地址off处读出size个字节的数据，存放到开始地址为addr的内存中。是否加后缀.jffs的差别只是读操作时ECC校验方法不同</li><li>nand write[.jffs2] addr off size,把开始地址为addr的内存中的size个字节数据，写到Nand Flash的偏移地址off处。是否加后缀.jffs的差别只是读操作时ECC校验方法不同</li><li>nand read.yaffs addr off size，从Nand Flash偏移地址off处读出size个字节的数据（包括OOB区域），存放到开始地址为addr的内存中</li><li>nand write.yaffs addr off size，把开始地址为addr的内存中的size个字节数据(只要有要写入OOB区域的数据)，写到Nand Flash的偏移地址off处</li><li>nand dump off，将Nand Flash偏移地址off的一个山区的数据打印出来，包括OOB数据</li></ul></li><li>环境变量命令(下面的命令只是在内存中进行，最后需要使用<code>saveenv</code>命令将更改后的所有环境变量写入Flash中)<ul><li><code>printenv</code>命令打印全部环境变量，“printenv name1 name2 …”打印名字为name1,name2……的环境变量</li><li><code>setenv name value</code>设置名字为name的环境变量的值为value</li><li><code>setenv name</code>删除名字为name的环境变量</li></ul></li><li>启动命令,不带参数的<code>boot</code>,<code>bootd</code>命令都是执行环境变量bootcmd所指定的命令。bootm命令专门用于启动在内存中的用u-boot的mkimage工具处理过的内核镜像<ul><li>“bootm [addr [arg …]]”命令启动存放在地址addr处的Uboot格式的映像文件（使用Uboot目录tools下的mkimage工具制作得到），[arg …]表示参数，如果addr参数省略，映像文件所在地址为配置文件中定义的宏CFG_LOAD_ADDR</li><li>go addr [arg …]与bootm命令类似，启动存放在地址addr处的二进制文件，[arg …]表示参数</li><li>nboot [[[loadAddr] dev] offset]命令将Nand Flash设备dev上偏移地址off处的映像文件复制到内存loadAddr处，然后，如果环境变量autostart的值为yes，就启动这个映像，如果loadAddr参数省略，存放地址为配置文件中定义的宏CFG_LOAD_ADDR。如果dev参数省略，则它的取值为环境变量bootdevice的值，如果offset参数省略，则默认为0</li></ul></li></ol><h2 id="根文件系统"><a href="#根文件系统" class="headerlink" title="根文件系统"></a>根文件系统</h2><ol><li>所有的Linux发行版在对根文件系统布局上都遵循FHS标准的建议规定。该标准规定了根目录下各个子目录的名称及其存放的内容：<ul><li>/bin：必备的用户命令，例如ls,cp等</li><li>/sbin:必备的系统管理员命令，例如ifconfig，reboot</li><li>/dev:设备文件，例如mtdblock0，tty1等</li><li>/etc:系统配置文件，包括启动文件，例如inittab</li><li>/lib:必要的链接库，例如C链接库、内核模块</li><li>/home:普通用户主目录</li><li>/root:root用户主目录</li><li>/usr/bin:非必备的用户程序，例如find、du等</li><li>/usr/sbin:非必备的管理员程序，例如chroot，inetd等</li><li>/usr/lib：库文件</li><li>/var:守护进程和工具程序所存放的可变，例如日志文件</li><li>/proc:用来提供内核和进程信息的虚拟文件系统，有内核自动生成目录下的内容</li><li>/sys:用来提供内核与设备信息的虚拟文件系统，由内核自动生成目录下的内容</li><li>/mnt:文件系统挂载点，用于临时安装文件系统</li><li>/tmp:临时性的文件，重启后将自动清除</li></ul></li><li>编译安装busybox：<ul><li>下载源码包，解压缩后进入文件夹根目录</li><li>make defconfig</li><li>make menuconfig<ul><li>Busybox Settings:选择动态链接C库，指定交叉编译器的prefix为arm-linux-，为各命令安装为指向busybox的软连接，指定busybox的安装位置，选择支持Tab completion和Username completion</li><li>Applets：基本保持默认设置</li></ul></li><li>make -j4</li><li>make install</li></ul></li><li>busybox只用到了2个库，通用C库(libc)、数学库(libm),每个库有4个文件，四个文件中，.a文件是静态库文件，另外三个是：实际的共享链接库（libLIBRARY_NAME-GLIBC_VERSION.so），主修订版本的符号链接，指向实际的共享链接库(libLIBRARY_NAME.so.MAJOR_REVISION_VERSION,一旦程序连接了特定的链接库，将会参用该符号链接)，与版本无关的符号链接，指向主修订版本的符号链接(libLIBRARY_NAME.so,是为编译程序时提供一个通用条目)</li><li>当使用<code>gcc hello.c -o hello -lm</code>编译程序的时候，gcc会根据-lm的提示，加头(lib)添尾(.so)得到libm.so，从而沿着与版本无关的符号链接(libm.so-&gt;libm.so.6)找到libm.so.6并记录在案(hello的ELF头中)，表示hello需要使用libm.so.6这个库文件所代表的数学库中的库函数。而当hello被执行的时候，动态链接库加载器会从hello的ELF头中找到libm.so.6这个记录，然后沿着主修订版本的符号链接(libm.so.6-&gt;libm-2.3.6.so)找到实际的共享链接库libm-2.3.6.so从而将其与hello做动态链接。可见<strong>与版本无关的符号链接是供编译器使用的，主修订版本的符号链接是供动态链接库加载器使用的，而实际的共享链接库则是供应用程序使用的</strong> </li><li>init进程的主配置文件inittab用于决定init进程要启动哪些子进程，以及如何启动这些子进程。busybox的inittab文件的语法、语义和传统的SYSV的inittab有所不同<ul><li>inittab文件中每个条目用来定义需要init启动的子进程，并确定它的启动方式，格式为<id>:<runlevel>:<action>:<process>,例如：ttySAC0：：ask-first:-/bin/sh</process></action></runlevel></id></li><li><id>表示子进程要使用的控制台，若省略则使用与init进程一样的控制台</id></li><li><runlevel>表示运行级别，busybox init程序这个字段没有意义</runlevel></li><li><action>表示init进程如何空着这个子进程<ul><li>sysinit：以该方式启动的子进程最先被init启动，该子进程只会被启动一次，如该子进程结束，init将不会重新启动它</li><li>wait：系统执行完sysinit条目后才启动该子进程，该子进程只执行一次，init进程必须等待该子进程结束后才能继续执行启动其他子进程的动作</li><li>once:系统执行完wait条目后才启动该子进程，该子进程只执行一次，init进程不必等待该子进程的结束就可以执行启动其他子进程的动作</li><li>respawn：系统执行完once条目后才能启动该子进程，init进程会持续监测该子进程的状态，若发现该子进程退出，会重新启动它</li><li>askfirst：系统启动完respawn条目后才能启动该子进程，与respawn类似，不过init进程先输出“Please press Enter to active this console”，等用户输入回车后才启动子进程</li><li>shutdown：当系统关机时启动该子进程</li><li>restart：Busybox中配置了CONFIG_FEATURE_USE_INITAB，并且init进程接收到SIGUP信号时执行，先重新读取、解析/etc/inittab文件，再执行restart程序</li><li>ctrlaltdel：按下Ctrl+Alt+Del键时启动该子进程，不过在串口控制台中无法输入它</li></ul></action></li><li><process>表示进程对应的二进制文件，如果前面有-号，表示该程序是“可以与用户进行交互的”</process></li></ul></li><li>手工构建/dev目录：新建dev文件夹，在里面<code>sudo mknod console c 5 1</code>,它表示穿件console字符设备文件，主设备号是5，次设备号是1</li><li>构建/dev目录的方法是使用udev(user dev),mdev是busybox中对udev的简化实现，其工作原理是：操作系统启动的时候会将识别到的所有设备的信息自动导出到/sys目录，在此基础上，用户态的应用程序mdev -s就可以扫描/sys/class和/sys/block中所有的类设备目录，如果在目录中含有名为“dev”的文件，且文件中包含的是设备号，则mdev就利用这些信息为这个设备在/dev下创建设备节点文件</li><li>Linux系统下实现热插拔的机制：当有热插拔事件产生时，内核就会调用位于/sbin目录下的mdev。这时mdev通过环境变量中的ACTION和DEVPATH(这两个变量是系统自带的)来确定此次热插拔事件的动作以及影响了/dev中的哪个目录。接着会看看这个目录中是否有“dev”的属性文件，如果有就利用这些信息为这个设备在/dev下创建或删除设备节点文件。我们需要告知操作系统，当它发现热插拔事件时应调用mdev，而不是别的程序。</li><li>嵌入式Linux对文件系统的要求：<ul><li>要求文件系统在频繁的文件操作下能够保持较高的读写性能，要求低碎片化</li><li>Linux下的日志文件系统(XFS,ReiserFS,Ext3等)能保持数据的完整性，但消耗过多的系统资源的弱点使之不能成为嵌入式系统中的主流应用。并且这些都是专门为硬盘类的存储设备进行了优化，对于Flash这类的存储介质并不适用</li><li>嵌入式文件系统的载体是以Flash为主的存储介质，Flash的擦除次数是有限的，所以为了延长Flash的使用寿命，应该尽量减少对Flash的读写操作，并尽量使对Flash的写入操作均匀分布在整个Flash上</li></ul></li><li>在内核的配置菜单中可以看到块设备中有哟个ramdisk选项，并可以设置它的大小，默认的大小为4096KB，在配置内核的时候用户也可以指定ramdisk的大小。ramdisk是基于ram的块设备，所以它占据了一块固定内存的大小，并且需要使用mke2fs格式化以及相对应的文件系统的驱动程序去读取设备上的内容。由于ramdisk在很多场合并不太实用，在Linux的2.4版本开始支持了ramfs文件系统，它是一个简单的基于Linux的。可以动态分配大小的内存文件系统，它属于内核虚拟文件系统层(VFS)，与ramdisk相比，并不是基于虚拟在内存中的其他文件系统，例如ext2文件系统。使用方法：<ul><li>mkdir /mnt/ramfs</li><li>mount -t ramfs none /mnt/ramfs(缺省大小，被限制最大maxsize为内存总和/2)</li><li>mount -t ramfs none /mnt/ramfs -o maxsize=1000(创建最大大小为1M的ramfs文件系统)</li></ul></li><li>tmpfs文件系统既可以使用内存也可以使用磁盘来作为存储介质，并且它的大小和ramfs一样，可以动态分配。<strong>它主要用于减少对闪存不必要的写操作</strong>这唯一目的。因为tmpfs驻留在RAM中，所以写/读/擦除的操作发生在RAM中而不是在闪存中。因此，当将日志消息写入挂载为tmpfs文件系统的目录时，是将其写入RAM而不是闪存中，在重新引导时不会保留它们。它的原理是：<ul><li>在Linux内核中有虚拟内存的概念，而虚拟内存是由物理内存RAM和交换分区swap组成，这些虚拟内存资源又是由Linux内核中的虚拟内存子系统管理。tmpfs会向虚拟内存子系统申请页来存储文件，但它不知道虚拟内存子系统分配给自己的页是在物理内存还是属于交换分区</li></ul></li><li>tmpfs文件系统在内核中的打开方式为：<ul><li>在内核中选择“File systems–Pseudo filesystems–Virtual memory filesystem support”一项来支持对tmpfs虚拟文件系统的管理</li></ul></li><li>在启动时，经常可以看到启动脚本中有以下内容：<ul><li><code>mount none /dev -t tmpfs</code></li><li>这也是由于Linux系统的设备可以热插拔的原因</li></ul></li><li>ramfs实现机制是将cache在物理内存的文件占用的page不标记为可释放，这样虚拟内存管理系统就不会将这些page释放或者交换到swap，从而实现文件总在物理内存中。tmpfs也是存放于内存中，但它可以被VM交换到swap，它其实是ramfs的一个变体</li><li>jffs文件系统被用到NorFlash和小于64MB的NandFlash闪存中</li><li>yaffs文件系统在mount的时候需要很少的内存（如果是小页–512B/Page,每1MB NandFlash大约需要4KB内存；大页需要大概1KB RAM/1 MB NandFlash）</li><li>yaffs文件系统的基本单位是Chunk，相当于页。Chunk中的资料包括两部分：一部分是资料区，占用Flash的一页；另一部分是文件信息以及冗余资料区，占用Flash页的OOB区。其冗余资料主要是ECC校验资料，对于小页的Flash，每页都有6位元祖的ECC资料，对于大页的Flash，每页有24位元祖的ECC资料 </li><li>yaffs文件系统的第一个块用于存放整个文件系统的信息，所以真实的数据应该从第二个块开始。</li><li>ubifs在设计与性能上均较yaffs2、jffs2更适合MLC NandFlash。例如：ubifs支持write-back，其写入的资料会被cache，直到有必要写入时才写到Flash，大大降低分散小区块数量并提高I/O效率。</li></ol><h2 id="交叉编译移植所要修改的环境变量"><a href="#交叉编译移植所要修改的环境变量" class="headerlink" title="交叉编译移植所要修改的环境变量"></a>交叉编译移植所要修改的环境变量</h2><ol><li>CC编译器，系统默认gcc，需要修改为arm-linux-gcc</li><li>AR库工具，用以创建和修改库，需要修改为arm-linux-ar</li><li>LD链接器，系统默认为ld，需要修改为arm-linux-ld</li><li>RANLIB随机库创建器，系统默认为ranlib，需要修改为arm-linux-ranlib</li><li>AS汇编器，系统默认为as，需要修改为arm-linux-as</li><li>NM库查看工具，系统默认为nm，需要修改为arm-linux-nm</li></ol><h2 id="新建用户与用户组"><a href="#新建用户与用户组" class="headerlink" title="新建用户与用户组"></a>新建用户与用户组</h2><ul><li>在/etc/passwd中第一行新增：root:x:0:0:Root,,,:/root:/bin/sh</li><li>passwd root,设置root用户密码</li><li>chown root:root /bin/busybox,改变busybox的属主，否则将来u+s后第一个用户进程init的权限将不是root的权限</li><li>chmod u+s /bin/busybox，这使得普通用户能使用passwd修改自己的密码，同时也使login程序能够正常工作</li><li>adduser morris -h /home/morris -s /bin/sh -G morris</li><li>adduser ftp -h /var/ftp -s /bin/sh -G ftp</li><li>adduser ftpuser -h /sdcard/local -s /bin/sh -G ftp</li><li>adduser ftproot -h /sdcard/tmp -s /bin/sh -G ftp</li></ul><h2 id="移植telnet服务器"><a href="#移植telnet服务器" class="headerlink" title="移植telnet服务器"></a>移植telnet服务器</h2><ol><li>如上创建好用户</li><li>修改/etc/inittab,使得telnetd开机自动启动：<ul><li>::once/usr/sbin/telnetd#这里一定要使用once，不能使用respawn，因为telnetd是守护进程，其实现会fork自己后让自己结束</li></ul></li><li>创建并挂载/dev/pts,它将供telnetd服务使用<ul><li>mkdir /dev/pts</li><li>mount -t devpts devpts /dev/pts</li></ul></li><li>更改/dev/tty和/dev/console的权限，以使普通用户登录系统时也能读写控制终端<ul><li>chmod 666 /dev/tty</li><li>chmod 600 /dev/console</li></ul></li></ol><h2 id="移植ftp服务器"><a href="#移植ftp服务器" class="headerlink" title="移植ftp服务器"></a>移植ftp服务器</h2><ol><li><a href="http://download.chinaunix.net/download/0001000/19.shtml" target="_blank" rel="noopener">下载vsftpd2.3.5并解压</a></li><li>修改Makefile，指定交叉编译器<code>CC=arm-linux-gcc</code></li><li>修改vsf_findlibs.sh,将所有/lib和/usr/lib前面加上交叉编译器的库目录地址，比如<code>/embeded/crosstool/arm-wenris-linux-gnueabi/sysroot</code></li><li>make -j4,将生成的vsftp复制到开发板根文件系统相应目录/usr/sbin</li><li>复制vsftpd依赖的动态库文件到开发板根文件系统相应目录</li><li><p>将模板配置文件vsftpd.conf复制到开发板/etc目录，修改该配置文件，使有效配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable=NO</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">anon_upload_enable=NO</span><br><span class="line">anon_mkdir_write_enable=NO</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_file=/var/log/vsftpd.log</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">idle_session_timeout=600</span><br><span class="line">data_connection_timeout=120</span><br><span class="line">nopriv_user=ftp</span><br><span class="line">ftpd_banner=Welcome to WenRis FTP service</span><br><span class="line">listen=YES</span><br></pre></td></tr></table></figure></li><li><p>由于vsftp源代码程序一定要使用一个目录/usr/share/empty,所以必须要预先创建它</p></li><li>修改/etc/inittab,使得vsftpd在开机时候自动启动：<ul><li>::respawn:/usr/sbin/vsftpd</li></ul></li></ol><h2 id="移植httpd服务器"><a href="#移植httpd服务器" class="headerlink" title="移植httpd服务器"></a>移植httpd服务器</h2><ol><li>增加用户www：<code>adduser -S -D -H www</code></li><li>修改/etc/inittab文件，指名httpd的目录和运行账户：<ul><li><code>::once:/usr/sbin/httpd -h /www -u www</code></li></ul></li><li>httpd运行时会以普通用户www的身份访问/dev/null设备，因此需要在rcS脚本中修改/dev/null的权限：<code>chmod 666 /dev/null</code></li><li>创建http服务器的主目录和主文件<ul><li><code>mkdir /www</code></li><li><code>echo &quot;this is my first web site&quot; &gt; /www/index.html</code></li></ul></li></ol><h2 id="移植boa网页服务器"><a href="#移植boa网页服务器" class="headerlink" title="移植boa网页服务器"></a>移植boa网页服务器</h2><ol><li><a href="http://www.boa.org/" target="_blank" rel="noopener">获取源码，并解压缩</a></li><li>进入解压后的文件夹 内部的 src文件夹，对源文件进行如下修改：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">由于arm-linux-gcc 编译器版本过高，对语法的支持有一些改变，所以需要修改compat.h中的</span><br><span class="line">     #define TIMEZONE_OFFSET(foo) foo##-&gt;tm_gmtoff</span><br><span class="line">为：</span><br><span class="line"></span><br><span class="line">     #define TIMEZONE_OFFSET(foo) foo-&gt;tm_gmtoff</span><br><span class="line">不然在编译的时候会提示如下错误：</span><br><span class="line">    util.c: 100: 1: pasting “t” and “-&gt;” does not give a valid preprocessing token make: [util.o] Error1</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">将boa.c 文件225-227三行的文件注释掉</span><br><span class="line"> if (setuid(0) != -1) &#123;</span><br><span class="line">                        DIE(”icky Linux kernel bug!”);</span><br><span class="line">        &#125;</span><br><span class="line">为</span><br><span class="line">/*</span><br><span class="line">         if (setuid(0) != -1) &#123;</span><br><span class="line">                        DIE(”icky Linux kernel bug!”);</span><br><span class="line">                &#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">，否则，但以root权限启动boa服务器的时候，会出现以下错误：boa.c:226 - icky Linux kernel bug!:</span><br></pre></td></tr></table></figure><ol start="3"><li>然后生成Makefile：./configure</li><li><p>修改生成的Makefile：默认生成的Makefile针对x86平台，我们的目标是针对嵌入式平台，所以需要修改编译器:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">更改Makefile的31行和32行：</span><br><span class="line">CC = gcc </span><br><span class="line">CPP = gcc -E</span><br><span class="line">更改为</span><br><span class="line">CC = arm-linux-gcc</span><br><span class="line">CPP = arm-linux-gcc -E</span><br></pre></td></tr></table></figure></li><li><p>在当前目录下编译Boa源文件： make</p></li><li>将生成的boa可执行程序复制到根文件系统的/usr/sbin目录下</li><li><p>将boa.conf文件复制到根文件系统/etc/boa文件夹下面，并且作如下修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">(1) 修改25行的port端口，用来设置服务器监听的端口：</span><br><span class="line"># Port: The port Boa runs on.  The default port for http servers is 80.</span><br><span class="line"># If it is less than 1024, the server must be started as root.</span><br><span class="line"></span><br><span class="line">Port 80</span><br><span class="line">(2) 注释43行的监听IP地址：默认监听该主机上的所有IP地址</span><br><span class="line">#Listen 192.68.0.5</span><br><span class="line">(3) 修改53、54行的user和Group 启动的UID和GID，使其以root身份启动</span><br><span class="line">#  User: The name or UID the server should run as.</span><br><span class="line"># Group: The group name or GID the server should run as.</span><br><span class="line"></span><br><span class="line">User root</span><br><span class="line">Group root</span><br><span class="line">(4) 修改116行的DocumentRoot地址，即客户端要显示的HTML页面存放位置</span><br><span class="line"># DocumentRoot: The root directory of the HTML documents.</span><br><span class="line"># Comment out to disable server non user files.</span><br><span class="line"></span><br><span class="line">DocumentRoot /usr/local/boa</span><br><span class="line">(5) 修改输入网页输入主机IP时要显示的页面：这里设为index.html</span><br><span class="line"> # DirectoryIndex: Name of the file to use as a pre-written HTML</span><br><span class="line"># directory index.  Please MAKE AND USE THESE FILES.  On the</span><br><span class="line"># fly creation of directory indexes can be _slow_.</span><br><span class="line"># Comment out to always use DirectoryMaker</span><br><span class="line"></span><br><span class="line">DirectoryIndex index.html</span><br><span class="line">(6) 修改CGI程序存放的位置：以http://IP/cgi-bin/cginame 的方式运行cgi 程序时将在/usr/local/boa/cgi-bin 目录下寻找该程序</span><br><span class="line"># ScriptAlias: Maps a virtual path to a directory for serving scripts</span><br><span class="line"># Example: ScriptAlias /htbin/ /www/htbin/</span><br><span class="line"></span><br><span class="line">ScriptAlias /cgi-bin/ /usr/local/boa/cgi-bin/</span><br></pre></td></tr></table></figure></li><li><p>创建/var/log/boa/ 目录，这样Boa服务器启动时会在该目录下创建日志文件</p></li><li>将Linux系统上/etc/mime.types 文件复制到根文件系统的/etc 目录下，否则Boa服务器启动不起来</li><li>修改/etc/inittab,使得vsftpd在开机时候自动启动：<ul><li>::once:/usr/sbin/boa</li></ul></li><li>注意事项：<ul><li>有时候boa服务器并不能随系统启动，运行 /sbin/boa 命令会提示：gethostbyname:: Success，需要如下修改<ul><li><code>修改boa.conf 文件将  #ServerName  www.your.org.here  改为 ServerName  www.your.org.here</code></li></ul></li></ul></li></ol><h2 id="移植zlib库"><a href="#移植zlib库" class="headerlink" title="移植zlib库"></a>移植zlib库</h2><ol><li><a href="http://download.chinaunix.net/download.php?id=24014&amp;ResourceID=12241" target="_blank" rel="noopener">下载zlib库,解压缩</a></li><li><p>进入终端，声明几个重要的环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export CC=arm-linux-gcc</span><br><span class="line">export AR=arm-linux-ar</span><br><span class="line">export LD=arm-linux-ld</span><br><span class="line">export RANLIB=arm-linux-ranlib</span><br><span class="line">export STRIP=arm-linux-strip</span><br><span class="line">export CC_FOR_BUILD=gcc</span><br></pre></td></tr></table></figure></li><li><p>./configure –shared –prefix=$PWD/results</p></li><li>make -j4</li><li>make install</li><li>成功后把lib里面的库文件复制到根文件系统对应目录，并把库文件和头文件复制到交叉编译器的对应文件夹中，注意复制到时候带上参数 <em>-P</em></li></ol><h2 id="移植libxml2库"><a href="#移植libxml2库" class="headerlink" title="移植libxml2库"></a>移植libxml2库</h2><ol><li><a href="http://download.chinaunix.net/download/0007000/6095.shtml" target="_blank" rel="noopener">下载libxml2库，解压缩</a></li><li><p>进入终端，声明几个重要的环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export CC=arm-linux-gcc</span><br><span class="line">export AR=arm-linux-ar</span><br><span class="line">export LD=arm-linux-ld</span><br><span class="line">export RANLIB=arm-linux-ranlib</span><br><span class="line">export STRIP=arm-linux-strip</span><br><span class="line">export CC_FOR_BUILD=gcc</span><br></pre></td></tr></table></figure></li><li><p>./configure –prefix=$PWD/results –host=arm-linux –target=arm-linux</p></li><li>make &amp;&amp; make install</li><li>将生成的lib和include移植到交叉编译器，将bin文件，lib文件移植到开发板根文件系统中的bin目录和lib目录中</li></ol><h2 id="移植SQLite数据库"><a href="#移植SQLite数据库" class="headerlink" title="移植SQLite数据库"></a>移植SQLite数据库</h2><ol><li><a href="http://sqlite.org" target="_blank" rel="noopener">获取源码,并解压缩</a></li><li>配置并进行交叉编译和安装<ul><li><code>./configure --enable-shared --prefix=/work/rootfs/sqlite/result --host=arm-linux</code></li><li><code>make -j4 &amp;&amp; make install</code> </li></ul></li><li>最终在result文件夹下面会得到四个文件夹:bin include lib share</li><li>将bin文件夹下的程序放到根文件系统的usr/bin 目录下</li><li>将lib文件夹下的动态库及其一个软连接复制到根文件系统的lib目录下，并将lib文件下的所有的动态链接库文件复制到交叉编译器的链接lib文件夹下</li><li>将include文件夹下的头文件复制到交叉编译器的头文件路径中</li></ol><h2 id="移植PHP5-4-42"><a href="#移植PHP5-4-42" class="headerlink" title="移植PHP5.4.42"></a>移植PHP5.4.42</h2><ol><li><a href="http://php.net/downloads.php" target="_blank" rel="noopener">下载php源代码，解压缩</a></li><li><p>执行如下配置选项,配置之前需要先交叉编译好zlib，libxml2，sqlite3，iconv的库文件，然后在下面的脚本中指名其路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/opt/php-arm \</span><br><span class="line">--with-config-file-path=/opt/php-arm/etc \</span><br><span class="line">--host=arm-linux \</span><br><span class="line">--disable-cli \</span><br><span class="line">--disable-fileinfo \</span><br><span class="line">--disable-debug \</span><br><span class="line">--disable-rpath \</span><br><span class="line">--enable-ftp \</span><br><span class="line">--enable-inline-optimization \</span><br><span class="line">--enable-pdo \</span><br><span class="line">--enable-bcmath \</span><br><span class="line">--enable-calendar </span><br><span class="line">--enable-sockets \</span><br><span class="line">--enable-wddx \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--enable-mbregex \</span><br><span class="line">--enable-sysvsem \</span><br><span class="line">--with-pear \</span><br><span class="line">--with-regex=system \</span><br><span class="line">--with-xmlrpc \</span><br><span class="line">--with-gettext \</span><br><span class="line">--with-sqlite3 \</span><br><span class="line">--with-pdo-sqlite=/embeded/WenRisOS/rootfs/sqlite-3.8.10.2/result \</span><br><span class="line">--with-libxml-dir=/embeded/WenRisOS/rootfs/third-libs/libxml2 \</span><br><span class="line">--with-zlib-dir=/embeded/WenRisOS/rootfs/third-libs/zlib \</span><br><span class="line">--with-iconv-dir=/embeded/WenRisOS/rootfs/third-libs/iconv \</span><br></pre></td></tr></table></figure></li><li><p>configure执行完成以后，查看Makefile文件，确保里面的交叉编译器是arm-linux-gcc,重点检查：CC,CPP;检查EXTRA_LIBS是否有-liconv,-lxml2;检查头文件包含路径是否指向交叉编译的include路径(将所有的/usr/include替换掉交叉编译器对应的/usr/include)</p></li><li>make &amp;&amp; make install</li><li>将prefix所指路径的文件安装到开发板对应的地方(在这里也是开发板的/opt/php-arm文件下)</li><li>在开发板/opt/php-arm夹下新建文件夹etc，存放php配置文件php.ini(从源代码中复制一份修改名字即可)</li></ol><h2 id="移植嵌入式ssh服务器-dropbear"><a href="#移植嵌入式ssh服务器-dropbear" class="headerlink" title="移植嵌入式ssh服务器-dropbear"></a>移植嵌入式ssh服务器-dropbear</h2><ol><li><a href="http://matt.ucc.asn.au/dropbear/" target="_blank" rel="noopener">下载源码包，解压缩</a></li><li><p>配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\#!/bin/sh</span><br><span class="line">./configure --prefix=$PWD/results \</span><br><span class="line">--host=arm-linux \</span><br><span class="line">--with-zlib=/embeded/WenRisOS/rootfs/third-libs/zlib</span><br><span class="line"></span><br><span class="line">make </span><br><span class="line">make scp</span><br><span class="line">make install</span><br><span class="line">cp scp results/bin</span><br><span class="line">arm-linux-strip results/bin/* results/sbin/*</span><br></pre></td></tr></table></figure></li><li><p>将生成的bin，sin放到开发板相应文件夹下</p></li><li>登陆开发板，创建dropbear配置目录，并生成密钥<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/dropbear</span><br><span class="line">cd /etc/dropbear</span><br><span class="line">dropbearkey -t rsa -f dropbear_rsa_host_key</span><br><span class="line">dropbearkey -t dss -f dropbear_dss_host_key</span><br></pre></td></tr></table></figure></li></ol><h2 id="编译tslib"><a href="#编译tslib" class="headerlink" title="编译tslib"></a>编译tslib</h2><ol><li><a href="http://download.csdn.net/detail/liuqiqi677/3177449" target="_blank" rel="noopener">源码下载地址</a></li><li>解压缩，进入tslib源码文件夹</li><li><code>./autogen.sh</code>生成configure源代码配置文件</li><li><code>./configure --host=arm-linux --disable-h3600 --disable-arctic2 --disable-mk712 --disable-collie --disable-corgi --disable-ucb1x00 --with-gnu-ld --prefix=/embeded/tslib_install ac_cv_func_malloc_0_nonnull=yes</code> 这里，–host的含义是你要安装的目标系统，后面的–disable 是因为我们不编译对指定触摸屏的支持，我们选择支持的是Linux的input子系统，–with-gnu-ld是确认使用GNU的LD连接器，因为我们使用的就是GNU的编译器，所以选择这一项。–prefix选项是指定安装的位置。ac_cv_func_malloc_0_nonnull会在./configure执行阶段测试GNU内置的malloc函数的功能是否可用或者说是否兼容</li><li>进入安装目录，这里是/embeded/tslib_install,进入etc目录，打开ts.conf进行修改.其中pthres主要用于处理触摸屏的灵敏度，而variance和dejitter分别用于处理触摸屏的滤波和去噪的算法，linear是触摸屏的坐标变换。<ul><li>module_raw input</li><li>module pthres pmin=1</li><li>module variance delta=30</li><li>module dejitter delta=100</li><li>module linear</li></ul></li></ol><h2 id="Qt移植-Qt支持的嵌入式Linux平台需要有frambuffer支持"><a href="#Qt移植-Qt支持的嵌入式Linux平台需要有frambuffer支持" class="headerlink" title="Qt移植(Qt支持的嵌入式Linux平台需要有frambuffer支持)"></a>Qt移植(Qt支持的嵌入式Linux平台需要有frambuffer支持)</h2><ol><li><a href="http://download.qt.io/development_releases/qt/5.4/5.4.0-rc/single/" target="_blank" rel="noopener">下载软件包，解压缩</a></li><li><p>进入源代码根文件目录，执行配置命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">\#!/bin/sh</span><br><span class="line">./configure -prefix /opt/qt4.8.5-arm \</span><br><span class="line">-opensource \</span><br><span class="line">-confirm-license \</span><br><span class="line">-release \</span><br><span class="line">-shared \</span><br><span class="line">-embedded arm \#选择Qt的嵌入式平台为arm平台</span><br><span class="line">-xplatform qws/linux-arm-g++ \</span><br><span class="line">-platform qws/linux-x86-g++ \</span><br><span class="line">-depths 4,8,16,18,24,32 \</span><br><span class="line">-optimized-qmake \</span><br><span class="line">-qt-sql-sqlite \</span><br><span class="line">-qt-zlib \</span><br><span class="line">-webkit \</span><br><span class="line">-qt-gfx-transformed \</span><br><span class="line">-qt-libjpeg \#使Qt支持jpeg图片显示</span><br><span class="line">-qt-libpng \</span><br><span class="line">-qt-libtiff \</span><br><span class="line">-qt-libmng  \</span><br><span class="line">-qt-freetype \</span><br><span class="line">-little-endian \</span><br><span class="line">-host-little-endian \</span><br><span class="line">-make libs \</span><br><span class="line">-nomake tools \</span><br><span class="line">-nomake docs \</span><br><span class="line">-make examples \</span><br><span class="line">-make demos \</span><br><span class="line">-qt-kbd-linuxinput \</span><br><span class="line">-no-qt3support \</span><br><span class="line">-no-phonon \</span><br><span class="line">-no-phonon-backend \</span><br><span class="line">-no-gif \</span><br><span class="line">-no-dbus \</span><br><span class="line">-no-rpath \</span><br><span class="line">-qt-mouse-tslib \#使Qt支持触摸方式，需要额外指定tslib的路径</span><br><span class="line">-qt-mouse-pc \</span><br><span class="line">-no-mouse-linuxtp \</span><br><span class="line">-qt-gfx-linuxfb \</span><br><span class="line">-no-neon \</span><br><span class="line">-no-nis \</span><br><span class="line">-no-cups \</span><br><span class="line">-no-openssl \</span><br><span class="line">-no-fast \</span><br><span class="line">-no-scripttools \</span><br><span class="line">-no-mmx \</span><br><span class="line">-no-3dnow \</span><br><span class="line">-no-sse \</span><br><span class="line">-no-sse2 \</span><br><span class="line">-I /embeded/WenRisOS/rootfs/tslib/target-arm/include \</span><br><span class="line">-L /embeded/WenRisOS/rootfs/tslib/target-arm/lib \</span><br><span class="line">-R /embeded/WenRisOS/rootfs/tslib/target-arm/lib \</span><br><span class="line">-D__ARM_ARCH_5TEJ_#选择处理器平台</span><br></pre></td></tr></table></figure></li><li><p>make &amp;&amp; make install</p></li><li>将生成的lib文件和plugins文件部署到根文件系统中，字体保存在lib下的fonts目录下</li></ol><h2 id="MP3播放器madplay移植"><a href="#MP3播放器madplay移植" class="headerlink" title="MP3播放器madplay移植"></a>MP3播放器madplay移植</h2><ol><li><a href="ftp://ftp.mars.org/pub/mpeg/" target="_blank" rel="noopener">进入官网下载3个源码包</a></li><li>移植libid3tag库需要依赖zlib库，所以需要先前把zlib的头文件和动态链接库文件保存在交叉编译器的头文件路径和库文件路径下</li><li>进入libid3tag源码文件夹，执行配置命令：./configure –prefix=/embeded/WenRisOS/rootfs/madplay/target-arm –host=arm-linux</li><li>make &amp;&amp; make install，把生成的头文件和库文件放入交叉编译器中</li><li>进入libmad源码文件夹，执行配置命令：./configure –prefix=/embeded/WenRisOS/rootfs/madplay/target-arm –host=arm-linux</li><li>make &amp;&amp; make install,把生成的头文件和库文件放入交叉编译器中</li><li>进入madplay源码文件夹，执行配置文件：./configure –prefix=/embeded/WenRisOS/rootfs/madplay/target-arm –host=arm-linux</li><li>make &amp;&amp; make install</li></ol><h2 id="gdb-gdbserver"><a href="#gdb-gdbserver" class="headerlink" title="gdb/gdbserver"></a>gdb/gdbserver</h2><blockquote><p>gdb和gdbserver可以看作两个不同的命令。gdb放在宿主机上运行，而gdbserver被放在开发板上运行。启动gdbserver运行制定的需要调试的可执行文件，而在宿主机中使用gdb来运行同样的可执行文件，通过串口或者tcp就可以达到远程调试的目的。由于宿主机gdb所运行的程序和gdbserver是一样的，都是arm指令的elf文件，那么作为宿主机gdb工具必须能够明确地知道遵循ABI接口的ARM的ELF文件格式。因此，传统的宿主机自身携带的gdb不能用于调试嵌入式ARM程序，我们需要下载gdb的源代码，增加对ARM的ELF格式的支持才能够调试ARM程序。</p><ol><li>编译宿主机上的arm-linux-gdb程序（如果在busybox中添加过了gdb的选项，不必再编译arm-linux-gdb了，已经有了）<ul><li>./configure –target=arm-linux –enable-werror=no</li><li>–target指定宿主机调试的目标机类型，在编译的时候会编译出符合arm-linux的调试的gdb工具</li><li>–enable-werror的含义是在编译的时候增加-Werror选项，这样会把一些原本的警告信息当做错误。由于gdb的部分代码写的并不规范，所以-Werror会报出一些错误</li></ul></li><li>进入gdb/gdbserver目录下，执行以下命令：<ul><li>./configure –host=arm-linux –target=arm-linux</li><li>make </li><li>arm-linux-strip gdbserver</li><li>–host指定编译出的工具运行在什么平台</li><li>–target为指定的编译器配置目标环境</li></ul></li><li>gdb远程调试命令<ul><li>Target remote ip：port executable；target命令用于连接一个远程的gdbserver，ip和port为远程主机的ip和端口号，executable为gdbserver需要调试的程序，这个文件在gdb所在的宿主机上不能被strip，否在调试需要的symbols就不存在了</li><li>file executable；在gdb调试之前，需要使用file命令获取可执行文件的符号，以获得调试需要的符号列表</li><li>show/set sysroot；因为调试的时候需要用到交叉编译器的库文件和工具，所以必须制定，set用于设置sysroot路径，show用于显示gdb内置变量的值</li><li>show/set solib-search-path;solib-search-path必须设置，因为远程调试的程序在运行时会调用到动态库，需要把所有的动态库都加载到这个变量中，像LD_LIBRARY_PATH一样</li><li>List/l;调试的时候我们可以通过这个命令查看源代码</li><li>break/b linenumber/function;设置断点，在运行时会停止在设置的断点处，断点可以设置为代码的行号，也可以在指定的函数处停止</li><li>continue/c;继续，使用gdb/gdbserver，没有run这个命令，因为程序实际通过stub在gdbserver所对应的开发板上运行</li><li>next/n;执行一条指令，但不会进入函数内部</li><li>print/p;打印变量的值</li><li>step/s;单步跟踪，如果有函数，会进入函数内部，可以通过finish命令退出函数</li><li>quit/q;退出gdb调试环境</li></ul></li><li>步骤演示<ul><li>开发板执行arm-linux-gdbserver命令，开启调试服务端程序test：arm-linux-gdbserver 192.168.1.230:6410 test;命令的参数类型为<ip>:<port> <app>,ip为开发板的网络地址，端口号由用户指定，代表服务应用程序所使用的网络端口，app为需要调试的应用程序的名字</app></port></ip></li><li>宿主机把调试文件载入gdb调试器（可执行文件必须要有调试信息，比如编译时候加上-g，Qt下是qmake CONFIG+=debug）：arm-linux-gdb test</li><li>向应用程序传递参数，比如：set args -qws</li><li>确认参数是否被正学设置：show args</li><li>设置交叉编译器动态库文件路径：set sysroot /embeded/wenris-xtools/arm-wenris-linux-gnueabi/sysroot;如果在交叉编译的时候指定–with-sysroot，则可以省略。最后通过show sysroot命令查看是否设置成功</li><li>设置程序运行时的动态库：set solib-search-path /work/qt/qt-4.7-arm/lib:/work/qt/tslib_install/lib:/work/qt/tslib_install/lib/ts</li><li>链接到gdbserver：target remote 192.168.1.230:6410</li><li>执行gdb相关的代码调试命令进行远程调试</li></ul></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需要知道的知识点&quot;&gt;&lt;a href=&quot;#需要知道的知识点&quot; class=&quot;headerlink&quot; title=&quot;需要知道的知识点&quot;&gt;&lt;/a&gt;需要知道的知识点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;ext4文件系统是Linux在PC机上最常用的磁盘文件系统，在嵌入式设备上则常用
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="Linux" scheme="https://suda-morris.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>GNS3 Install</title>
    <link href="https://suda-morris.github.io/2015/06/08/gns3/"/>
    <id>https://suda-morris.github.io/2015/06/08/gns3/</id>
    <published>2015-06-08T03:24:00.000Z</published>
    <updated>2018-07-05T01:38:09.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GNS3模拟器安装步骤"><a href="#GNS3模拟器安装步骤" class="headerlink" title="GNS3模拟器安装步骤"></a>GNS3模拟器安装步骤</h2><ol><li><a href="https://community.gns3.com/community/software/download/" target="_blank" rel="noopener">下载GNS3</a>，并且安装</li><li><a href="https://community.gns3.com/community/software/download/" target="_blank" rel="noopener">下载GNS3 IOU VM虚拟机镜像</a></li><li>下载路由器和交换机的IOS镜像文件(百度搜索并下载)<ul><li>i86bi-linux-l2-ipbasek9-15.1g.bin(交换机)</li><li>i86bi-linux-l3-adventerprisek9-15.4.1T.bin(路由器)</li></ul></li><li>安装virtualbox</li><li>导入步骤2中下载的GNS3虚拟机镜像，设置网卡为hostonly，并启动虚拟机</li><li>GNS3是基于linux系统的，root用户登录，密码为cisco，然后查看网卡ip地址ifconfig</li><li>在浏览器中输入刚才查找到的IP地址，并指名端口号8000下的upload，例如：<a href="http://192.168.172.101:8000/upload" target="_blank" rel="noopener">http://192.168.172.101:8000/upload</a></li><li>打开GNS3软件，在edit-&gt;Preference-&gt;Server中添加虚拟机的IP地址以及端口(ip地址来自步骤6)</li><li>在edit-&gt;Preference-&gt;IOS on UNIX中，指名iourc.txt的路径</li><li>在edit-&gt;Preference-&gt;IOU devices中，添加switch和router镜像路径(路径为上传到虚拟机中的具体路径，例如：/home/gns3/GNS3/images/IOU/i86bi-linux-l2-ipbasek9-15.1g.bin)</li><li>启动设备</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" title="">                </div>                <div class="image-caption">suda-morris</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GNS3模拟器安装步骤&quot;&gt;&lt;a href=&quot;#GNS3模拟器安装步骤&quot; class=&quot;headerlink&quot; title=&quot;GNS3模拟器安装步骤&quot;&gt;&lt;/a&gt;GNS3模拟器安装步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://community.g
      
    
    </summary>
    
      <category term="Network" scheme="https://suda-morris.github.io/categories/Network/"/>
    
    
      <category term="GNS3" scheme="https://suda-morris.github.io/tags/GNS3/"/>
    
  </entry>
  
  <entry>
    <title>Python Basic</title>
    <link href="https://suda-morris.github.io/2015/05/28/python/"/>
    <id>https://suda-morris.github.io/2015/05/28/python/</id>
    <published>2015-05-28T13:42:00.000Z</published>
    <updated>2018-07-05T01:38:09.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python中的常量"><a href="#Python中的常量" class="headerlink" title="Python中的常量"></a>Python中的常量</h2><figure class="highlight python"><figcaption><span>常量定义</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_const</span><span class="params">(object)</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">ConstError</span><span class="params">(TypeError)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self,name,value)</span>:</span></span><br><span class="line"><span class="keyword">if</span> self.__dict__.has_key(name):</span><br><span class="line"><span class="keyword">raise</span> self.ConstError,<span class="string">"Can't rebind const(%s)"</span> % name</span><br><span class="line">self.__dict__[name] = value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self,name)</span>:</span></span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">in</span> self.__dict__:</span><br><span class="line"><span class="keyword">raise</span> self.ConstError,<span class="string">"Can't unbind const(%s)"</span> % name</span><br><span class="line"><span class="keyword">raise</span> NameError, name</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.modules[__name__] = _const()</span><br></pre></td></tr></table></figure><ul><li>把以上代码变成const.py文件放到Python安装目录的Lib文件夹下</li></ul><h2 id="引号的使用与区别"><a href="#引号的使用与区别" class="headerlink" title="引号的使用与区别"></a>引号的使用与区别</h2><ol><li>单引号与双引号可以交叉使用，即双引号中的单引号维持原样，单引号中的双引号维持原样</li><li>三引号里面不能使用单引号和双引号，三引号中的格式维持不变，该回车就回车，该空格就空格</li><li>当需要把转义字符原样输出的时候可以使用自然字符串，即在字符串前面加r</li><li>子字符串运算方法：<ul><li>索引运算（从0开始索引）</li><li>切片运算（[a:b]是指从第a下标开始到第b-1下标结束，同样第一位下标为0）</li></ul></li><li>列表中的元素是有序的<ul><li>students=[“小明”,”小华”,”小李”,”小娟”,”小云”]，下标从0开始</li></ul></li><li>元祖里面的内容只能读取，不能修改，列表里面的内容既可以修改，又能读取<ul><li>students=(“小明”,”小华”,”小李”,”小娟”,”小云”)</li></ul></li><li>Python中集合主要有两个功能，一个功能是建立关系，另一个是消除重复元素，集合的格式是：set(元素)<ul><li>交集：&amp;</li><li>并集：|</li><li>差集：-</li><li>消除重复元素：new=set(a)</li></ul></li><li>字典也叫关联数组，用大括号括起来<ul><li>k={“name”:”Java”,”IDE”:”Eclipse”}</li><li>print k[“IDE”]</li><li>添加字典里面的项目k[“User”]=”morris”</li></ul></li><li>Python中的标识符第一个字符必须只能是字母或者下划线，之后的部分可以使字母，下划线或者数组</li><li>在Python中，如果有一些对象需要持久性存储，并且不丢失我们这个对象的类型与数据，我们需要将这些对象进行序列化，序列化之后，需要使用的时候我们再回复为原来的数据。序列化的这种过程我们称之为pickle（腌制）<ul><li>import pickle</li><li>lista=[“mingyue”,”jishi”,”you”]</li><li>listb=pickle.dumps(lista)#序列化</li><li>listc=pickle.loads(listb)#将对象原样恢复</li><li>group1=(“bajiu”,”wen”,”qingtian”)</li><li>f1=file(‘1.pkl’,’wb’)</li><li>pickle.dump(group1,f1,True)</li><li>f1.close()</li><li>f2=file(‘1.pkl’,’rb’)</li><li>t=pickle.load(f2)</li><li>f2.close()</li></ul></li><li>Python的行连接符：\</li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ol><li>Python语言的类型有：数字类型，字符串类型，元组类型，列表类型，文件类型，字典类型</li><li>数字类型<ol><li>复数类型的表示：z=a+bj,其中a是实数部分，b是虚数部分，a和b都是浮点类型</li></ol></li><li>字符串类型<ol><li>假设字符串长度为L，那么字一个字符的序号为0或者-L，最后一字符的序号是L-1或者-1</li><li>字符串之间可以通过+或*进行连接，加法操作将两个字符串连接成为一个新的字符串，乘法操作构建一个由其本身字符串重复连接而成的字符串</li><li>大多数数据类型都可以通过str()函数转换为字符串</li><li>遍历字符串中每个字符：<code>for &lt;var&gt; in &lt;string&gt;</code><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/s0unbao.png" alt="字符串处理方法" title="">                </div>                <div class="image-caption">字符串处理方法</div>            </figure></li></ol></li><li>元祖类型<ol><li>元祖是包含多个元素的类型，元素之间用逗号分隔。元祖可以是空的，元祖外侧可以使用括号，也可以不使用</li><li>元祖中元素可以是不同类型，元组中各元素存在先后关系，可以通过索引访问元祖中元素，元祖定义后不能修改，也不能删除</li></ol></li><li>列表类型<ol><li>列表与元祖类似，列表中每个元素可以不一样，访问列表中元素时采用索引形式</li><li>列表的大小没有限制，可以随时修改<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/d3bAmPU.png" alt="列表的操作" title="">                </div>                <div class="image-caption">列表的操作</div>            </figure></li></ol></li><li>文件类型<ol><li>文件的打开模式<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/ojObujt.png" alt="文件的打开模式" title="">                </div>                <div class="image-caption">文件的打开模式</div>            </figure></li><li>文件读取<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/pmBgVxd.png" alt="文件读取" title="">                </div>                <div class="image-caption">文件读取</div>            </figure></li><li>文件写入<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/n9jBYXM.png" alt="文件写入" title="">                </div>                <div class="image-caption">文件写入</div>            </figure></li><li>遍历文件的模板<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/q0yCMAT.png" alt="遍历文件的模板" title="">                </div>                <div class="image-caption">遍历文件的模板</div>            </figure></li></ol></li><li>字典<ol><li>针对非序列集合而提供的一种数据类型</li><li>通过任意键值查找集合中信息的过程叫映射，python中通过字典实现映射。字典就是一个键值对的集合</li><li>使用大括号创建字典</li><li>使用中括号为字典增加一项：dictionaryName[key]=value</li><li>访问字典中的值：dictionaryName[key]返回键key对应的value</li><li>删除字典中的一项：del dictionaryName[key]</li><li>字典的遍历<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/PK0vmFN.png" alt="字典的遍历" title="">                </div>                <div class="image-caption">字典的遍历</div>            </figure></li><li>判断一个键是否在字典中，可以使用命令in或者not in</li><li>字典的标准操作符<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/BsWzsmx.png" alt="字典的标准操作符" title="">                </div>                <div class="image-caption">字典的标准操作符</div>            </figure></li><li>字典方法<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/9RX4ISh.png" alt="字典方法" title="">                </div>                <div class="image-caption">字典方法</div>            </figure></li></ol></li></ol><h2 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    f1 = input(<span class="string">"Enter a source file name:"</span>).strip()</span><br><span class="line">    f2 = input(<span class="string">"Enter a destination file name:"</span>).strip()</span><br><span class="line"></span><br><span class="line">    infile = open(f1, <span class="string">'r'</span>)</span><br><span class="line">    outfile = open(f2, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line">    count_lines = count_chars = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> infile:</span><br><span class="line">        count_lines += <span class="number">1</span></span><br><span class="line">        count_chars += len(line)</span><br><span class="line">        outfile.write(line)</span><br><span class="line"></span><br><span class="line">    print(count_lines, <span class="string">"lines and"</span>, count_chars, <span class="string">"chars copied"</span>)</span><br><span class="line"></span><br><span class="line">    infile.close()</span><br><span class="line">    outfile.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="数学库及其应用"><a href="#数学库及其应用" class="headerlink" title="数学库及其应用"></a>数学库及其应用</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/ashlYUy.png" alt="数学库及其应用" title="">                </div>                <div class="image-caption">数学库及其应用</div>            </figure><h2 id="随机数库及其应用"><a href="#随机数库及其应用" class="headerlink" title="随机数库及其应用"></a>随机数库及其应用</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/s7wJNuN.png" alt="随机数库及其应用" title="">                </div>                <div class="image-caption">随机数库及其应用</div>            </figure><h2 id="Python异常处理机制"><a href="#Python异常处理机制" class="headerlink" title="Python异常处理机制"></a>Python异常处理机制</h2><p>Python使用try…except…else…finally，可使程序不因运行错误而崩溃,异常捕获机制可以捕捉任何类型的错误，比如：输入非数值类型（NameError），输入无效的表达式(SyntaxError)等。只有当try中的语句没有发生异常，else语句才会被执行，finally无论有无异常都会被执行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="keyword">except</span> &lt;ErrorType1&gt;:</span><br><span class="line">&lt;handler1&gt;</span><br><span class="line"><span class="keyword">except</span> &lt;ErrorType2&gt;:</span><br><span class="line">&lt;handler2&gt;</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">&lt;handler0&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">&lt;process_else&gt;</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">&lt;process_finally&gt;</span><br></pre></td></tr></table></figure></p><h2 id="ETC"><a href="#ETC" class="headerlink" title="ETC"></a>ETC</h2><ol><li>使用同步赋值语句实现x与y的值交换：x,y=y,x</li><li>val=pow(2,1000),用一行代码返回val结果的长度值:len(str(val))</li><li>布尔运算符的优先级从高到低依次是：not，and，or</li><li>对于数字的零值被认为是false，任何非零值都是true。对序列类型来说，空序列被认为是false，非空序列认为是true</li><li>常用编码<ol><li>ASCII码是标准化字符集，用7个二进制位编码表示128个字符</li><li>Unicode跨语言，跨平台，同意且唯一的二进制编码，每个字符两个字节长</li><li>UTF8编码，可变长度的Unicode，英文对应1个字节，中文对应3个字节</li></ol></li><li>python中字符串类型未编码，可以用encode()进行编码，decode()进行解码<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/6CefLm3.png" alt="python中的编解码" title="">                </div>                <div class="image-caption">python中的编解码</div>            </figure></li></ol><h2 id="turtle库的常用指令"><a href="#turtle库的常用指令" class="headerlink" title="turtle库的常用指令"></a>turtle库的常用指令</h2><ol><li>turtle库以屏幕中心为坐标原点</li><li>forward（distance）将箭头移到某一指定坐标</li><li>left（angle）/right（angle）向左/右旋转一个角度</li><li>penup（）提起笔，用于另起一个地方绘制时使用，与pendown()配对使用</li><li>goto(x,y)</li><li>home()</li><li>circle(radius)</li><li>speed()</li></ol><h2 id="使用turtle库绘制五角星"><a href="#使用turtle库绘制五角星" class="headerlink" title="使用turtle库绘制五角星"></a>使用turtle库绘制五角星</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">p = turtle.Turtle()</span><br><span class="line">p.speed(<span class="number">3</span>)</span><br><span class="line">p.pensize(<span class="number">5</span>)</span><br><span class="line">p.color(<span class="string">"black"</span>)</span><br><span class="line">p.fillcolor(<span class="string">"red"</span>)</span><br><span class="line">p.begin_fill()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    p.forward(<span class="number">200</span>)</span><br><span class="line">    p.right(<span class="number">144</span>)</span><br><span class="line">p.end_fill()</span><br></pre></td></tr></table></figure><h2 id="使用turtle库绘制蟒蛇"><a href="#使用turtle库绘制蟒蛇" class="headerlink" title="使用turtle库绘制蟒蛇"></a>使用turtle库绘制蟒蛇</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_snake</span><span class="params">(rad, angle, len, neckrad)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len):</span><br><span class="line">        turtle.circle(rad, angle)</span><br><span class="line">        turtle.circle(-rad, angle)</span><br><span class="line">    turtle.circle(rad, angle, <span class="number">2</span>)</span><br><span class="line">    turtle.fd(rad)</span><br><span class="line">    turtle.circle(neckrad + <span class="number">1</span>, <span class="number">180</span>)</span><br><span class="line">    turtle.fd(rad * <span class="number">2</span> / <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    turtle.setup(<span class="number">1300</span>, <span class="number">800</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    pythonsize = <span class="number">30</span></span><br><span class="line">    turtle.pensize(pythonsize)</span><br><span class="line">    turtle.pencolor(<span class="string">"blue"</span>)</span><br><span class="line">    turtle.seth(<span class="number">-40</span>)</span><br><span class="line">    draw_snake(<span class="number">40</span>, <span class="number">80</span>, <span class="number">5</span>, pythonsize / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="使用turtle库绘制树"><a href="#使用turtle库绘制树" class="headerlink" title="使用turtle库绘制树"></a>使用turtle库绘制树</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tree</span><span class="params">(plist, l, a, f)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    plist is a list of pens</span></span><br><span class="line"><span class="string">    l is the length od branch</span></span><br><span class="line"><span class="string">    a is half of angle between 2 branches</span></span><br><span class="line"><span class="string">    f is factor by which branch is shortened from level to level</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> l &gt; <span class="number">5</span>:</span><br><span class="line">        lst = []</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> plist:</span><br><span class="line">            p.forward(l)</span><br><span class="line">            q = p.clone()</span><br><span class="line">            p.left(a)</span><br><span class="line">            q.right(a)</span><br><span class="line">            lst.append(p)</span><br><span class="line">            lst.append(q)</span><br><span class="line">        tree(lst, l * f, a, f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maketree</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    p = turtle.Turtle()</span><br><span class="line">    p.color(<span class="string">"green"</span>)</span><br><span class="line">    p.pensize(<span class="number">5</span>)</span><br><span class="line">    p.hideturtle()</span><br><span class="line">    <span class="comment"># p.speed(5)</span></span><br><span class="line">    p.getscreen().tracer(<span class="number">30</span>, <span class="number">0</span>)  <span class="comment"># 调整绘画的速率</span></span><br><span class="line">    p.left(<span class="number">90</span>)</span><br><span class="line">    p.penup()</span><br><span class="line">    p.goto(x, y)</span><br><span class="line">    p.pendown()</span><br><span class="line">    tree([p], <span class="number">110</span>, <span class="number">65</span>, <span class="number">0.707</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    turtle.title(<span class="string">"使用turtle绘制树"</span>)</span><br><span class="line">    turtle.setup(<span class="number">1200</span>, <span class="number">800</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    maketree(<span class="number">-300</span>, <span class="number">-300</span>)</span><br><span class="line">    maketree(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    maketree(<span class="number">300</span>, <span class="number">-300</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="数据驱动的动态路径绘制"><a href="#数据驱动的动态路径绘制" class="headerlink" title="数据驱动的动态路径绘制"></a>数据驱动的动态路径绘制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    turtle.title(<span class="string">"数据驱动的动态路径绘制"</span>)</span><br><span class="line">    turtle.setup(<span class="number">800</span>, <span class="number">600</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    pen = turtle.Turtle()</span><br><span class="line">    pen.color(<span class="string">'red'</span>)</span><br><span class="line">    pen.width(<span class="number">5</span>)</span><br><span class="line">    pen.shape(<span class="string">"turtle"</span>)</span><br><span class="line">    pen.speed(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    result = []</span><br><span class="line">    file = open(<span class="string">"a.txt"</span>, <span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">        result.append(list(map(float, line.split(<span class="string">','</span>))))</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(result)):</span><br><span class="line">        pen.color((result[i][<span class="number">3</span>], result[i][<span class="number">4</span>], result[i][<span class="number">5</span>]))</span><br><span class="line">        pen.forward(result[i][<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> result[i][<span class="number">1</span>]:</span><br><span class="line">            pen.right(result[i][<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pen.left(result[i][<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    pen.goto(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="使用蒙特卡洛方法估计圆周率的值"><a href="#使用蒙特卡洛方法估计圆周率的值" class="headerlink" title="使用蒙特卡洛方法估计圆周率的值"></a>使用蒙特卡洛方法估计圆周率的值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span>  *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">DARTS = <span class="number">1000000</span></span><br><span class="line">hits = <span class="number">0</span></span><br><span class="line">clock()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,DARTS):</span><br><span class="line">    x,y=random(),random()</span><br><span class="line">    dist = sqrt(x**<span class="number">2</span>+y**<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span>(dist &lt;= <span class="number">1.0</span>):</span><br><span class="line">        hits = hits+<span class="number">1</span></span><br><span class="line">pi = <span class="number">4</span>*(hits/DARTS)</span><br><span class="line">print(<span class="string">"Pi的值是:%s"</span>%pi)</span><br><span class="line">print(<span class="string">"程序运行时间是 %-5.5ss"</span>%clock())</span><br></pre></td></tr></table></figure><p>##寻找素数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>,n):</span><br><span class="line">        <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">            print(n, <span class="string">"equals"</span>, x, <span class="string">"*"</span>, n//x)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(n, <span class="string">"is a prime number"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="文件循环"><a href="#文件循环" class="headerlink" title="文件循环"></a>文件循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    file_name = input(<span class="string">"What's the file path?"</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        infile = open(file_name, <span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        print(<span class="string">"\nFile not found"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msum = <span class="number">0.0</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        line = infile.readline()</span><br><span class="line">        <span class="keyword">while</span> line != <span class="string">""</span>:</span><br><span class="line">            msum += eval(line)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            line = infile.readline()</span><br><span class="line">        print(<span class="string">"\nThe average of the numbers is"</span>, msum / count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="图形用户界面"><a href="#图形用户界面" class="headerlink" title="图形用户界面"></a>图形用户界面</h2><ol><li><p>TKinter——Python标准GUI</p><ol><li>15中常见的Tk控件<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/vyefEMa.png" alt="常见的Tk控件" title="">                </div>                <div class="image-caption">常见的Tk控件</div>            </figure></li><li>3种布局管理方法<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/NEIDZxP.png" alt="Tkinter三种几何管理方法" title="">                </div>                <div class="image-caption">Tkinter三种几何管理方法</div>            </figure></li><li>控件的共同属性<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/QVe2hIH.png" alt="共同属性" title="">                </div>                <div class="image-caption">共同属性</div>            </figure></li></ol></li><li><p>Graphics——基于Tkinter扩展</p><ol><li>GraphWin对象常用方法<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/tgowXan.png" alt="GraphWin对象常用方法" title="">                </div>                <div class="image-caption">GraphWin对象常用方法</div>            </figure></li><li>图形对象通用方法<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/n6lAydo.png" alt="图形对象通用方法" title="">                </div>                <div class="image-caption">图形对象通用方法</div>            </figure></li><li>Point对象方法<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/IKM5dHA.png" alt="Point对象方法" title="">                </div>                <div class="image-caption">Point对象方法</div>            </figure></li><li>Line对象方法<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/nwyIK0E.png" alt="Line对象方法" title="">                </div>                <div class="image-caption">Line对象方法</div>            </figure></li><li>Circle对象方法<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/jmscbxO.png" alt="Circle对象方法" title="">                </div>                <div class="image-caption">Circle对象方法</div>            </figure></li><li>Rectangle对象方法<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/G67viyS.png" alt="Rectangle对象方法" title="">                </div>                <div class="image-caption">Rectangle对象方法</div>            </figure></li><li>Oval对象方法<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/4gQEpov.png" alt="Oval对象方法" title="">                </div>                <div class="image-caption">Oval对象方法</div>            </figure></li><li>Polygon对象方法<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/y983x7H.png" alt="Polygon对象方法" title="">                </div>                <div class="image-caption">Polygon对象方法</div>            </figure></li><li>Text对象方法<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/G9XjFhU.png" alt="Text对象方法" title="">                </div>                <div class="image-caption">Text对象方法</div>            </figure></li></ol></li><li><p>Turtle——Python内置的图形库</p></li></ol><h2 id="使用graphics库实现交互式多边形绘制"><a href="#使用graphics库实现交互式多边形绘制" class="headerlink" title="使用graphics库实现交互式多边形绘制"></a>使用graphics库实现交互式多边形绘制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> graphics <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    win = GraphWin(<span class="string">"Draw a polygon"</span>, <span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">    win.setCoords(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">    message = Text(Point(<span class="number">150</span>, <span class="number">20</span>), <span class="string">"CLick on five points"</span>)</span><br><span class="line">    message.draw(win)</span><br><span class="line"></span><br><span class="line">    p1 = win.getMouse()</span><br><span class="line">    p1.draw(win)</span><br><span class="line">    p2 = win.getMouse()</span><br><span class="line">    p2.draw(win)</span><br><span class="line">    p3 = win.getMouse()</span><br><span class="line">    p3.draw(win)</span><br><span class="line">    p4 = win.getMouse()</span><br><span class="line">    p4.draw(win)</span><br><span class="line">    p5 = win.getMouse()</span><br><span class="line">    p5.draw(win)</span><br><span class="line"></span><br><span class="line">    polygon = Polygon(p1, p2, p3, p4, p5)</span><br><span class="line">    polygon.setFill(<span class="string">"peachpuff"</span>)</span><br><span class="line">    polygon.setOutline(<span class="string">"black"</span>)</span><br><span class="line">    polygon.draw(win)</span><br><span class="line"></span><br><span class="line">    message.setText(<span class="string">"Click anywhere to quit."</span>)</span><br><span class="line">    win.getMouse()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="使用TKinter实现简单的聊天界面"><a href="#使用TKinter实现简单的聊天界面" class="headerlink" title="使用TKinter实现简单的聊天界面"></a>使用TKinter实现简单的聊天界面</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">()</span>:</span></span><br><span class="line">        strMsg = <span class="string">"我："</span> + time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime()) + <span class="string">"\n"</span></span><br><span class="line">        txtMsgList.insert(END, strMsg, <span class="string">'greencolor'</span>)</span><br><span class="line">        txtMsgList.insert(END, txtMsg.get(<span class="string">'0.0'</span>, END))</span><br><span class="line">        txtMsg.delete(<span class="string">'0.0'</span>, END)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cancelMsg</span><span class="params">()</span>:</span></span><br><span class="line">        txtMsg.delete(<span class="string">'0.0'</span>, END)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_msg_event</span><span class="params">(event)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> event.keysym == <span class="string">"Up"</span>:</span><br><span class="line">            send_msg()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建窗口</span></span><br><span class="line">    t = Tk()</span><br><span class="line">    t.title(<span class="string">"与Python聊天中"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建Frame容器</span></span><br><span class="line">    frmLT = Frame(width=<span class="number">500</span>, height=<span class="number">320</span>, bg=<span class="string">"white"</span>)</span><br><span class="line">    frmLC = Frame(width=<span class="number">500</span>, height=<span class="number">150</span>, bg=<span class="string">"white"</span>)</span><br><span class="line">    frmLB = Frame(width=<span class="number">500</span>, height=<span class="number">30</span>)</span><br><span class="line">    frmRT = Frame(width=<span class="number">200</span>, height=<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建控件</span></span><br><span class="line">    txtMsgList = Text(frmLT)</span><br><span class="line">    txtMsgList.tag_configure(<span class="string">"greencolor"</span>, foreground=<span class="string">"#008c00"</span>)  <span class="comment"># 创建tag</span></span><br><span class="line"></span><br><span class="line">    txtMsg = Text(frmLC)</span><br><span class="line">    txtMsg.bind(<span class="string">"&lt;KeyPress-Up&gt;"</span>, send_msg_event)</span><br><span class="line"></span><br><span class="line">    btnSend = Button(frmLB, text=<span class="string">'发送'</span>, width=<span class="number">8</span>, command=send_msg)</span><br><span class="line">    btnCancel = Button(frmLB, text=<span class="string">'取消'</span>, width=<span class="number">8</span>, command=cancelMsg)</span><br><span class="line"></span><br><span class="line">    imgInfo = PhotoImage(file=<span class="string">"python.gif"</span>)</span><br><span class="line">    lblImage = Label(frmRT, image=imgInfo)</span><br><span class="line">    lblImage.image = imgInfo</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 窗口布局</span></span><br><span class="line">    frmLT.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>, padx=<span class="number">1</span>, pady=<span class="number">3</span>)</span><br><span class="line">    frmLC.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>, padx=<span class="number">1</span>, pady=<span class="number">3</span>)</span><br><span class="line">    frmLB.grid(row=<span class="number">2</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>)</span><br><span class="line">    frmRT.grid(row=<span class="number">0</span>, column=<span class="number">2</span>, rowspan=<span class="number">3</span>, padx=<span class="number">2</span>, pady=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 固定大小</span></span><br><span class="line">    frmLT.grid_propagate(<span class="number">0</span>)</span><br><span class="line">    frmLC.grid_propagate(<span class="number">0</span>)</span><br><span class="line">    frmLB.grid_propagate(<span class="number">0</span>)</span><br><span class="line">    frmRT.grid_propagate(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    btnSend.grid(row=<span class="number">2</span>, column=<span class="number">0</span>)</span><br><span class="line">    btnCancel.grid(row=<span class="number">2</span>, column=<span class="number">1</span>)</span><br><span class="line">    lblImage.grid()</span><br><span class="line">    txtMsgList.grid()</span><br><span class="line">    txtMsg.grid()</span><br><span class="line"></span><br><span class="line">    t.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="使用Turtle库绘制模拟时钟"><a href="#使用Turtle库绘制模拟时钟" class="headerlink" title="使用Turtle库绘制模拟时钟"></a>使用Turtle库绘制模拟时钟</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Skip</span><span class="params">(step)</span>:</span></span><br><span class="line">    penup()</span><br><span class="line">    forward(step)</span><br><span class="line">    pendown()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkHand</span><span class="params">(name, length)</span>:</span></span><br><span class="line">    <span class="comment"># 注册Turtle形状，建立表针Turtle</span></span><br><span class="line">    reset()</span><br><span class="line">    Skip(-length * <span class="number">0.1</span>)</span><br><span class="line">    begin_poly()</span><br><span class="line">    forward(length * <span class="number">1.1</span>)</span><br><span class="line">    end_poly()</span><br><span class="line">    handForm = get_poly()</span><br><span class="line">    register_shape(name, handForm)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Init</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> secHand, minHand, hurHand, printer</span><br><span class="line">    mode(<span class="string">"logo"</span>)  <span class="comment"># 重置Turtle指向北</span></span><br><span class="line">    <span class="comment"># 建立三个表针Turtle并初始化</span></span><br><span class="line">    mkHand(<span class="string">"secHand"</span>, <span class="number">125</span>)</span><br><span class="line">    mkHand(<span class="string">"minHand"</span>, <span class="number">130</span>)</span><br><span class="line">    mkHand(<span class="string">"hurHand"</span>, <span class="number">90</span>)</span><br><span class="line">    secHand = Turtle()</span><br><span class="line">    secHand.shape(<span class="string">"secHand"</span>)</span><br><span class="line">    minHand = Turtle()</span><br><span class="line">    minHand.shape(<span class="string">"minHand"</span>)</span><br><span class="line">    hurHand = Turtle()</span><br><span class="line">    hurHand.shape(<span class="string">"hurHand"</span>)</span><br><span class="line">    <span class="keyword">for</span> hand <span class="keyword">in</span> secHand, minHand, hurHand:</span><br><span class="line">        hand.shapesize(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        hand.speed(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 建立输出文字Turtle</span></span><br><span class="line">    printer = Turtle()</span><br><span class="line">    printer.hideturtle()</span><br><span class="line">    printer.penup()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SetupClock</span><span class="params">(radius)</span>:</span></span><br><span class="line">    <span class="comment"># 建立表的外框</span></span><br><span class="line">    reset()</span><br><span class="line">    pensize(<span class="number">7</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">60</span>):</span><br><span class="line">        Skip(radius)</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">            forward(<span class="number">20</span>)</span><br><span class="line">            Skip(-radius - <span class="number">20</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dot(<span class="number">5</span>)</span><br><span class="line">            Skip(-radius)</span><br><span class="line">        right(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Week</span><span class="params">(t)</span>:</span></span><br><span class="line">    week = [<span class="string">"星期一"</span>, <span class="string">"星期二"</span>, <span class="string">"星期三"</span>,</span><br><span class="line">            <span class="string">"星期四"</span>, <span class="string">"星期五"</span>, <span class="string">"星期六"</span>, <span class="string">"星期日"</span>]</span><br><span class="line">    <span class="keyword">return</span> week[t.weekday()]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Date</span><span class="params">(t)</span>:</span></span><br><span class="line">    y = t.year</span><br><span class="line">    m = t.month</span><br><span class="line">    d = t.day</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"%s %d %d"</span> % (y, m, d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Tick</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 绘制表针的动态显示</span></span><br><span class="line">    t = datetime.today()</span><br><span class="line">    second = t.second + t.microsecond * <span class="number">0.000001</span></span><br><span class="line">    minute = t.minute + second / <span class="number">60.0</span></span><br><span class="line">    hour = t.hour + minute / <span class="number">60.0</span></span><br><span class="line">    secHand.setheading(<span class="number">6</span> * second)</span><br><span class="line">    minHand.setheading(<span class="number">6</span> * minute)</span><br><span class="line">    hurHand.setheading(<span class="number">30</span> * hour)</span><br><span class="line"></span><br><span class="line">    tracer(<span class="keyword">False</span>)</span><br><span class="line">    printer.forward(<span class="number">65</span>)</span><br><span class="line">    printer.write(Week(t), align=<span class="string">"center"</span>,</span><br><span class="line">                  font=(<span class="string">"Courier"</span>, <span class="number">14</span>, <span class="string">"bold"</span>))</span><br><span class="line">    printer.back(<span class="number">130</span>)</span><br><span class="line">    printer.write(Date(t), align=<span class="string">"center"</span>,</span><br><span class="line">                  font=(<span class="string">"Courier"</span>, <span class="number">14</span>, <span class="string">"bold"</span>))</span><br><span class="line">    printer.home()</span><br><span class="line">    tracer(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    ontimer(Tick, <span class="number">100</span>)  <span class="comment"># 100ms后继续调用tick</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    tracer(<span class="keyword">False</span>)</span><br><span class="line">    Init()</span><br><span class="line">    SetupClock(<span class="number">160</span>)</span><br><span class="line">    tracer(<span class="keyword">True</span>)</span><br><span class="line">    Tick()</span><br><span class="line">    mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="使用turtle库绘制雪花图"><a href="#使用turtle库绘制雪花图" class="headerlink" title="使用turtle库绘制雪花图"></a>使用turtle库绘制雪花图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> tt</span><br><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> rd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ground</span><span class="params">()</span>:</span></span><br><span class="line">    tt.hideturtle()</span><br><span class="line">    tt.speed(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">400</span>):</span><br><span class="line">        tt.pensize(rd.randint(<span class="number">5</span>, <span class="number">10</span>))</span><br><span class="line">        x = rd.randint(<span class="number">-400</span>, <span class="number">350</span>)</span><br><span class="line">        y = rd.randint(<span class="number">-280</span>, <span class="number">-1</span>)</span><br><span class="line">        r = -y / <span class="number">280</span></span><br><span class="line">        g = -y / <span class="number">280</span></span><br><span class="line">        b = -y / <span class="number">280</span></span><br><span class="line">        tt.pencolor((r, g, b))</span><br><span class="line">        tt.penup()</span><br><span class="line">        tt.goto(x, y)</span><br><span class="line">        tt.pendown()</span><br><span class="line">        tt.forward(rd.randint(<span class="number">40</span>, <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snow</span><span class="params">()</span>:</span></span><br><span class="line">    tt.hideturtle()</span><br><span class="line">    tt.pensize(<span class="number">2</span>)</span><br><span class="line">    tt.speed(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        r = rd.random()</span><br><span class="line">        g = rd.random()</span><br><span class="line">        b = rd.random()</span><br><span class="line">        tt.pencolor(r, g, b)</span><br><span class="line">        tt.penup()</span><br><span class="line">        tt.setx(rd.randint(<span class="number">-350</span>, <span class="number">350</span>))</span><br><span class="line">        tt.sety(rd.randint(<span class="number">1</span>, <span class="number">270</span>))</span><br><span class="line">        tt.pendown()</span><br><span class="line">        dens = rd.randint(<span class="number">8</span>, <span class="number">12</span>)</span><br><span class="line">        snowsize = rd.randint(<span class="number">10</span>, <span class="number">14</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(dens):</span><br><span class="line">            tt.forward(snowsize)</span><br><span class="line">            tt.backward(snowsize)</span><br><span class="line">            tt.right(<span class="number">360</span> / dens)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    tt.setup(<span class="number">800</span>, <span class="number">600</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    tt.tracer(<span class="keyword">False</span>)</span><br><span class="line">    tt.bgcolor(<span class="string">"black"</span>)</span><br><span class="line">    snow()</span><br><span class="line">    ground()</span><br><span class="line">    tt.tracer(<span class="keyword">True</span>)</span><br><span class="line">    tt.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="Python库"><a href="#Python库" class="headerlink" title="Python库"></a>Python库</h2><ol><li><a href="https://pypi.python.org" target="_blank" rel="noopener">Python官网提供的Python库索引</a></li><li>Python库的安装<ol><li>自定义安装,去国内镜像站下载软件<a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">国内pipy镜像站</a></li><li>使用pip工具<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/A358sfq.png" alt="pip常用命令" title="">                </div>                <div class="image-caption">pip常用命令</div>            </figure></li><li>文件安装，通过.whl文件安装<ol><li>pip inatall xxx.whl</li></ol></li></ol></li><li>pip工具的安装<ol><li><a href="https://pypi.python.org/pypi/pip/" target="_blank" rel="noopener">pip源码下载地址</a></li><li>解压后执行：python setup.py install即可</li></ol></li></ol><h2 id="OS库常用函数"><a href="#OS库常用函数" class="headerlink" title="OS库常用函数"></a>OS库常用函数</h2><ol><li>OS库常用函数<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/7a826hS.png" alt="OS库常用函数" title="">                </div>                <div class="image-caption">OS库常用函数</div>            </figure></li><li>os.path是处理操作系统的一个字库，os.path常用函数<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/1vWI5ie.png" alt="os.path常用函数" title="">                </div>                <div class="image-caption">os.path常用函数</div>            </figure></li><li>os.walk(path)用于遍历一个目录，返回一个三元组<ol><li>root,dirs,files = os.walk(path)</li><li>root是字符串，dirs和files是列表类型，表示root中的所有目录和所有文件</li></ol></li></ol><h2 id="sched库"><a href="#sched库" class="headerlink" title="sched库"></a>sched库</h2><ol><li>sched库用来进行任务调度</li><li>sched.scheduler()用来创建一个调度任务</li><li>当需要对一个任务进行时间调度时，用这个函数scheduler.enter(delay,priority,action,argument=())<ol><li>delay表示延时多少时间去执行</li><li>priority表示优先级</li><li>action是具体需要调度的函数</li><li>argument表示action函数需要的参数变量</li></ol></li><li>scheduler.run（）运行调度任务中的全部调度事件</li><li>scheduler.cancel(event)取消某个调度事件</li></ol><h2 id="函数定时执行"><a href="#函数定时执行" class="headerlink" title="函数定时执行"></a>函数定时执行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sched</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_time</span><span class="params">(msg=<span class="string">'default'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"当前时间"</span>, time.time(), msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = sched.scheduler(time.time, time.sleep)</span><br><span class="line">print(time.time())</span><br><span class="line">s.enter(<span class="number">5</span>, <span class="number">1</span>, print_time, argument=(<span class="string">"延迟5秒，优先级1"</span>,))</span><br><span class="line">s.enter(<span class="number">3</span>, <span class="number">2</span>, print_time, argument=(<span class="string">"延迟3秒，优先级2"</span>,))</span><br><span class="line">s.enter(<span class="number">3</span>, <span class="number">1</span>, print_time, argument=(<span class="string">"延迟3秒，优先级1"</span>,))</span><br><span class="line">s.run()</span><br><span class="line">print(time.time())</span><br></pre></td></tr></table></figure><h2 id="打印某一个目录下的全部文件"><a href="#打印某一个目录下的全部文件" class="headerlink" title="打印某一个目录下的全部文件"></a>打印某一个目录下的全部文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = input(<span class="string">"请输入一个路径:"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">        print(os.path.join(root, name))</span><br></pre></td></tr></table></figure><h2 id="打包发布python应用程序（使用py2exe库）"><a href="#打包发布python应用程序（使用py2exe库）" class="headerlink" title="打包发布python应用程序（使用py2exe库）"></a>打包发布python应用程序（使用py2exe库）</h2><ol><li>确定python程序可以执行，比如lesson.py</li><li><p>写一个发布脚本setup.py（与lesson.py同目录）,在里面指名需要调用运行的python程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">import</span> py2exe</span><br><span class="line"></span><br><span class="line">setup(console=[<span class="string">'lesson.py'</span>])</span><br></pre></td></tr></table></figure></li><li><p>在命令行下执行python setup.py py2exe</p></li><li>程序正确执行后会生成dist目录和<strong>pycache</strong>目录，前者包含了发布的exe程序，后者可以删除</li></ol><h2 id="NumPy库"><a href="#NumPy库" class="headerlink" title="NumPy库"></a>NumPy库</h2><ol><li>NumPy系统是Python的一种开源的数值计算扩展，能够存储和处理大型矩阵<ol><li>N维数组对象Array</li><li>函数库</li><li>实用的线性代数、傅里叶变换和随机数生成函数</li></ol></li><li>NumPy提供了许多高级的数值编程工具<ol><li>矩阵数据类型</li><li>矢量处理</li><li>运算库</li></ol></li><li>NumPy的主要对象是同种元素的多维数组<ol><li>维度叫做轴</li><li>轴的个数叫做秩</li></ol></li><li>NumPy的数组类被称为ndarray，通常被称作数组<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/u1hf8bi.png" alt="ndarray主要属性" title="">                </div>                <div class="image-caption">ndarray主要属性</div>            </figure><ol><li>创建数组<ol><li>使用array函数，利用常规的Python列表和元祖创造数组，所创建的数组类型由原序列中的元素类型决定，例如：a=array([[1,2],[3,4]],dtype=complex)</li><li>使用占位符创建数组，例如函数zeros创建一个全是0的数组，函数ones创建一个全是1的数组，函数empty创建一个内容随机并且依赖于内存状态的数组</li><li>利用arrange创建数组：arrange(10,30,5),从10开始，每次加5，直到30(不包括)</li></ol></li><li>打印数组，类似于嵌套列表</li><li>数组的算数运算按元素进行，NumPy中的乘法运算符*指示按元素计算</li><li>矩阵乘法可以使用dot函数或创建矩阵对象实现</li><li>NumPy提供常见的数学函数如sin、cos和exp</li><li>NumPy对于多维数组的运算，缺省情况下并不使用矩阵运算，对数组进行矩阵运算，可调用相应的函数</li><li>NumPy库提供了matrix类，使用matrix类创建的是矩阵对象，他们的加减乘除运算采用矩阵方式计算</li><li>创建等比数列：numpy.logspace(1,10,3)表示在1到10中生成3个等比数列</li><li>创建结构数组：<ol><li>声明结构数组类型：person=np.dtype({‘names’:[‘name’,’age’],’formats’:[‘S32’,’i’]})</li><li>创建结构数组：a = np.array([(‘zhang’,12)],dtype=person)</li><li>访问结构数组的成员：<code>a[0][&#39;name&#39;]</code></li></ol></li></ol></li><li>更高级的运算：NumPy线型代数子库linalg<ol><li>inv函数：计算逆矩阵</li><li>solve函数：求解多元一次方程组</li></ol></li></ol><h2 id="Matplotlib库"><a href="#Matplotlib库" class="headerlink" title="Matplotlib库"></a>Matplotlib库</h2><ol><li>Matplotlib是一个数据可视化函数库</li><li>pyplot子库提供了2D图表制作的基本函数</li><li>matplotlib提供的直方图绘制函数为hist()</li><li>matplotlib的image子库可用来对图像进行操作<ol><li>imread()函数将图像的各像素点的RGB值存入数组</li><li>imshow()函数将存有RGB值的图像数组以图像的方式显示出来</li></ol></li></ol><h2 id="使用Matplotlib库绘制曲线"><a href="#使用Matplotlib库绘制曲线" class="headerlink" title="使用Matplotlib库绘制曲线"></a>使用Matplotlib库绘制曲线</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-np.pi, np.pi, <span class="number">256</span>, endpoint=<span class="keyword">True</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">z = np.cos(x * x)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">4</span>))</span><br><span class="line">plt.plot(x, z, <span class="string">"ro"</span>, label=<span class="string">"$cos(x^2)$"</span>)</span><br><span class="line">plt.plot(x, y, label=<span class="string">"$sin(x)$"</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">"Time/s"</span>)</span><br><span class="line">plt.ylabel(<span class="string">""</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.title(<span class="string">"matplotlib"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="使用Matplotlib子图的功能"><a href="#使用Matplotlib子图的功能" class="headerlink" title="使用Matplotlib子图的功能"></a>使用Matplotlib子图的功能</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">w = np.linspace(<span class="number">0.1</span>, <span class="number">1000</span>, <span class="number">1000</span>)</span><br><span class="line">p = np.abs(<span class="number">1</span> / (<span class="number">1</span> + <span class="number">0.1j</span> * w))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line">plt.plot(w, p, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line">plt.semilogx(w, p, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line">plt.semilogy(w, p, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">224</span>)</span><br><span class="line">plt.loglog(w, p, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="wxPython"><a href="#wxPython" class="headerlink" title="wxPython"></a>wxPython</h2><ol><li>wxPython是wxWidgets在python语言下的封装，wxWidgets是一个跨平台的GUI应用程序接口，使用C++编写</li><li><a href="http://wxpython.org/Phoenix/snapshot-builds/" target="_blank" rel="noopener">对于Python3，wxPython的下载地址</a>,注意选择对应的python版本号以及电脑的位数</li><li>控件的事件<ol><li>按钮点击</li><li>文本域内容的改变</li><li>鼠标滑过</li><li>鼠标双击</li><li>键盘按下</li></ol></li></ol><h2 id="使用wxPython的绝对布局"><a href="#使用wxPython的绝对布局" class="headerlink" title="使用wxPython的绝对布局"></a>使用wxPython的绝对布局</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="string">'''堆砌各个控件，基于坐标位置的控件绝对布局'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lesson</span><span class="params">(wx.Frame)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        wx.Frame.__init__(self, parent=<span class="keyword">None</span>, id=<span class="number">-1</span>, title=<span class="string">u'极客学院'</span>, size=(<span class="number">600</span>, <span class="number">600</span>))</span><br><span class="line">        panel = wx.Panel(self, <span class="number">-1</span>)</span><br><span class="line">        self.Centre()</span><br><span class="line"></span><br><span class="line">        button = wx.Button(panel, label=<span class="string">u'我是按钮'</span>, pos=(<span class="number">20</span>, <span class="number">0</span>), size=(<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">        statictext = wx.StaticText(panel, <span class="number">-1</span>, <span class="string">u'我是不能编辑的文本框'</span>, pos=(<span class="number">20</span>, <span class="number">100</span>))</span><br><span class="line">        text = wx.TextCtrl(panel, <span class="number">-1</span>, <span class="string">u'请在这里输入内容'</span>, pos=(<span class="number">200</span>, <span class="number">210</span>))</span><br><span class="line">        password = wx.TextCtrl(panel, <span class="number">-1</span>, <span class="string">u'请在这里输入内容'</span>, style=wx.TE_PASSWORD, pos=(<span class="number">200</span>, <span class="number">250</span>))</span><br><span class="line">        mutiText = wx.TextCtrl(panel, <span class="number">-1</span>, <span class="string">u'我是多行\n文本框'</span>, style=wx.TE_MULTILINE, pos=(<span class="number">100</span>, <span class="number">300</span>))</span><br><span class="line">        checkBox1 = wx.CheckBox(panel, <span class="number">-1</span>, <span class="string">u"我是复选框1"</span>, pos=(<span class="number">150</span>, <span class="number">20</span>))</span><br><span class="line">        checkBox2 = wx.CheckBox(panel, <span class="number">-1</span>, <span class="string">u"我是复选框2"</span>, pos=(<span class="number">150</span>, <span class="number">40</span>))</span><br><span class="line"></span><br><span class="line">        radio1 = wx.RadioButton(panel, <span class="number">-1</span>, <span class="string">u"我是单选按钮1"</span>, pos=(<span class="number">150</span>, <span class="number">60</span>), style=wx.RB_GROUP)</span><br><span class="line">        radio2 = wx.RadioButton(panel, <span class="number">-1</span>, <span class="string">u"我是单选按钮2"</span>, pos=(<span class="number">150</span>, <span class="number">80</span>))</span><br><span class="line">        radio3 = wx.RadioButton(panel, <span class="number">-1</span>, <span class="string">u"我是单选按钮3"</span>, pos=(<span class="number">150</span>, <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">        radioList = [<span class="string">u'一组单选按钮之1'</span>, <span class="string">u'一组单选按钮之2'</span>, <span class="string">u'一组单选按钮之3'</span>]</span><br><span class="line">        wx.RadioBox(panel, <span class="number">-1</span>, <span class="string">u"一组单选按钮"</span>, (<span class="number">10</span>, <span class="number">120</span>), wx.DefaultSize, radioList, <span class="number">2</span>, wx.RA_SPECIFY_ROWS)</span><br><span class="line"></span><br><span class="line">        jikexueyuan = [<span class="string">u'极'</span>, <span class="string">u'客'</span>, <span class="string">u'学'</span>, <span class="string">u'院'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>]</span><br><span class="line">        listBox = wx.ListBox(panel, <span class="number">-1</span>, pos=(<span class="number">300</span>, <span class="number">20</span>), size=(<span class="number">100</span>, <span class="number">100</span>), choices=jikexueyuan, style=wx.LB_MULTIPLE)</span><br><span class="line"></span><br><span class="line">        img = wx.Image(<span class="string">r'python.gif'</span>, wx.BITMAP_TYPE_ANY).Scale(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">        sb1 = wx.StaticBitmap(panel, <span class="number">-1</span>, wx.BitmapFromImage(img), pos=(<span class="number">300</span>, <span class="number">300</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = wx.App()</span><br><span class="line">    frame = Lesson()</span><br><span class="line">    frame.Show()</span><br><span class="line">    app.MainLoop()</span><br></pre></td></tr></table></figure><h2 id="使用wxPython的相对布局"><a href="#使用wxPython的相对布局" class="headerlink" title="使用wxPython的相对布局"></a>使用wxPython的相对布局</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="string">'''基于Sizer的控件相对布局'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lesson</span><span class="params">(wx.Frame)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        wx.Frame.__init__(self, parent=<span class="keyword">None</span>, id=<span class="number">-1</span>, title=<span class="string">u'极客学院'</span>, size=(<span class="number">600</span>, <span class="number">600</span>))</span><br><span class="line">        self.panel = wx.Panel(self, <span class="number">-1</span>)</span><br><span class="line">        self.Centre()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义我们需要的各个控件</span></span><br><span class="line"></span><br><span class="line">        commandStatic = wx.StaticText(self.panel, <span class="number">-1</span>, <span class="string">u'输命令:'</span>)</span><br><span class="line">        writePyStatic = wx.StaticText(self.panel, <span class="number">-1</span>, <span class="string">u'写代码:'</span>)</span><br><span class="line"></span><br><span class="line">        commandText = wx.TextCtrl(self.panel, <span class="number">-1</span>, <span class="string">u''</span>)</span><br><span class="line">        writePyText = wx.TextCtrl(self.panel, <span class="number">-1</span>, <span class="string">u'''#-*-coding:utf-8-*-\n#在这写Python代码'''</span>,</span><br><span class="line">                                  style=wx.TE_MULTILINE, size=(<span class="number">300</span>, <span class="number">200</span>))</span><br><span class="line"></span><br><span class="line">        send = wx.Button(self.panel, label=<span class="string">u'发送命令'</span>)</span><br><span class="line">        clear = wx.Button(self.panel, label=<span class="string">u'清空命令'</span>)</span><br><span class="line">        screen = wx.Button(self.panel, label=<span class="string">u'查看屏幕'</span>)</span><br><span class="line"></span><br><span class="line">        serverList = [<span class="string">'192.168.0.4'</span>, <span class="string">'10.19.2.1'</span>, <span class="string">'192.168.0.111'</span>, <span class="string">'172.26.123.5'</span>, <span class="string">'192.168.6.11'</span>, <span class="string">'192.99.8.8'</span>]</span><br><span class="line">        server = wx.ListBox(self.panel, <span class="number">-1</span>, size=(<span class="number">120</span>, <span class="number">100</span>), choices=serverList, style=wx.LB_SINGLE)</span><br><span class="line"></span><br><span class="line">        img = wx.Image(<span class="string">r'python_logo.gif'</span>, wx.BITMAP_TYPE_ANY).Scale(<span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">        screenBox = wx.StaticBitmap(self.panel, <span class="number">-1</span>, wx.BitmapFromImage(img))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 基于BoxSizer布局</span></span><br><span class="line">        <span class="comment"># hBoxAll = wx.BoxSizer(wx.HORIZONTAL)</span></span><br><span class="line">        <span class="comment"># vBoxControl = wx.BoxSizer(wx.VERTICAL)</span></span><br><span class="line">        <span class="comment"># hBoxCommand = wx.BoxSizer(wx.HORIZONTAL)</span></span><br><span class="line">        <span class="comment"># vBoxWrite = wx.BoxSizer(wx.VERTICAL)</span></span><br><span class="line">        <span class="comment"># hBoxButton = wx.BoxSizer(wx.HORIZONTAL)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># hBoxCommand.Add(commandStatic, proportion=1, flag=wx.ALL | wx.EXPAND, border=5)</span></span><br><span class="line">        <span class="comment"># hBoxCommand.Add(commandText, proportion=2, flag=wx.ALL | wx.EXPAND, border=5)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># vBoxWrite.Add(writePyStatic, proportion=0, flag=wx.ALL | wx.EXPAND, border=5)</span></span><br><span class="line">        <span class="comment"># vBoxWrite.Add(writePyText, proportion=0, flag=wx.ALL | wx.EXPAND, border=5)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># vBoxControl.Add(hBoxCommand, proportion=0, flag=wx.ALL, border=5)</span></span><br><span class="line">        <span class="comment"># vBoxControl.Add(vBoxWrite, proportion=0, flag=wx.ALL, border=5)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># hBoxButton.Add(send, proportion=0, flag=wx.ALL, border=5)</span></span><br><span class="line">        <span class="comment"># hBoxButton.Add(clear, proportion=0, flag=wx.ALL, border=5)</span></span><br><span class="line">        <span class="comment"># hBoxButton.Add(screen, proportion=0, flag=wx.ALL, border=5)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># vBoxControl.Add(hBoxButton, proportion=0, flag=wx.ALL, border=5)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># hBoxAll.Add(server, proportion=1, flag=wx.ALL | wx.EXPAND, border=5)</span></span><br><span class="line">        <span class="comment"># hBoxAll.Add(vBoxControl, proportion=2, flag=wx.ALL | wx.EXPAND, border=5)</span></span><br><span class="line">        <span class="comment"># hBoxAll.Add(screenBox, proportion=3, flag=wx.ALL | wx.EXPAND, border=5)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># self.panel.SetSizer(hBoxAll)</span></span><br><span class="line">        <span class="comment"># hBoxAll.Fit(self)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 基于GridSizer布局</span></span><br><span class="line">        <span class="comment"># gridSizerAll= wx.GridSizer(rows=3, cols=3, hgap=5, vgap=5)</span></span><br><span class="line">        <span class="comment"># gridSizerAll.AddMany([(server, 0, wx.EXPAND), (commandStatic, 0, wx.EXPAND), (commandText, 0, wx.EXPAND),</span></span><br><span class="line">        <span class="comment"># (writePyStatic, 0, wx.EXPAND), (send, 0, wx.EXPAND), (clear, 0, wx.EXPAND),</span></span><br><span class="line">        <span class="comment">#                      (writePyText, 0, wx.EXPAND), (screen, 0, wx.EXPAND), (screenBox, 0, wx.EXPAND)])</span></span><br><span class="line">        <span class="comment"># self.panel.SetSizer(gridSizerAll)</span></span><br><span class="line">        <span class="comment"># gridSizerAll.Fit(self)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#基于FlexGridSizer布局</span></span><br><span class="line">        <span class="comment"># flexGridSizerAll = wx.FlexGridSizer(rows=3, cols=3, hgap=5, vgap=5)</span></span><br><span class="line">        <span class="comment"># flexGridSizerAll.AddMany([(server, 0, wx.EXPAND), (commandStatic, 0, wx.EXPAND), (commandText, 0, wx.EXPAND),</span></span><br><span class="line">        <span class="comment">#                           (writePyStatic, 0, wx.EXPAND), (send, 0, wx.EXPAND), (clear, 0, wx.EXPAND),</span></span><br><span class="line">        <span class="comment">#                           (writePyText, 0, wx.EXPAND), (screen, 0, wx.EXPAND), (screenBox, 0, wx.EXPAND)])</span></span><br><span class="line">        <span class="comment"># self.panel.SetSizer(flexGridSizerAll)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># flexGridSizerAll.AddGrowableCol(2, 1)</span></span><br><span class="line">        <span class="comment"># flexGridSizerAll.AddGrowableRow(2, 1)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># flexGridSizerAll.Fit(self)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#基于GirdBagSizer布局</span></span><br><span class="line">        gridBagSizerAll = wx.GridBagSizer(hgap=<span class="number">5</span>, vgap=<span class="number">5</span>)</span><br><span class="line">        gridBagSizerAll.Add(server, pos=(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">                            flag=wx.ALL | wx.EXPAND,</span><br><span class="line">                            span=(<span class="number">7</span>, <span class="number">2</span>), border=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        gridBagSizerAll.Add(commandStatic, pos=(<span class="number">0</span>, <span class="number">2</span>),</span><br><span class="line">                            flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,</span><br><span class="line">                            border=<span class="number">5</span>)</span><br><span class="line">        gridBagSizerAll.Add(commandText, pos=(<span class="number">0</span>, <span class="number">3</span>),</span><br><span class="line">                            flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,</span><br><span class="line">                            span=(<span class="number">1</span>, <span class="number">2</span>), border=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        gridBagSizerAll.Add(writePyStatic, pos=(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">                            flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,</span><br><span class="line">                            span=(<span class="number">1</span>, <span class="number">3</span>), border=<span class="number">5</span>)</span><br><span class="line">        gridBagSizerAll.Add(writePyText, pos=(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">                            flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,</span><br><span class="line">                            span=(<span class="number">4</span>, <span class="number">3</span>), border=<span class="number">5</span>)</span><br><span class="line">        gridBagSizerAll.Add(send, pos=(<span class="number">6</span>, <span class="number">2</span>),</span><br><span class="line">                            flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,</span><br><span class="line">                            span=(<span class="number">1</span>, <span class="number">1</span>), border=<span class="number">5</span>)</span><br><span class="line">        gridBagSizerAll.Add(clear, pos=(<span class="number">6</span>, <span class="number">3</span>),</span><br><span class="line">                            flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,</span><br><span class="line">                            span=(<span class="number">1</span>, <span class="number">1</span>), border=<span class="number">5</span>)</span><br><span class="line">        gridBagSizerAll.Add(screen, pos=(<span class="number">6</span>, <span class="number">4</span>),</span><br><span class="line">                            flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,</span><br><span class="line">                            span=(<span class="number">1</span>, <span class="number">1</span>), border=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        gridBagSizerAll.Add(screenBox, pos=(<span class="number">0</span>, <span class="number">5</span>),</span><br><span class="line">                            flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,</span><br><span class="line">                            span=(<span class="number">7</span>, <span class="number">2</span>), border=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        self.panel.SetSizer(gridBagSizerAll)</span><br><span class="line"></span><br><span class="line">        self.SetSizeHints(<span class="number">250</span>, <span class="number">200</span>, <span class="number">700</span>, <span class="number">400</span>)  <span class="comment"># 设定窗口的最大最小值</span></span><br><span class="line">        <span class="comment"># gridBagSizerAll.AddGrowableCol(0, 1)</span></span><br><span class="line">        <span class="comment"># gridBagSizerAll.AddGrowableCol(1, 1)</span></span><br><span class="line">        <span class="comment"># gridBagSizerAll.AddGrowableCol(2, 1)</span></span><br><span class="line">        <span class="comment"># gridBagSizerAll.AddGrowableCol(3, 1)</span></span><br><span class="line">        <span class="comment"># gridBagSizerAll.AddGrowableCol(4, 1)</span></span><br><span class="line">        <span class="comment"># gridBagSizerAll.AddGrowableCol(5, 1)</span></span><br><span class="line">        <span class="comment"># gridBagSizerAll.AddGrowableCol(6, 1)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># gridBagSizerAll.AddGrowableRow(0, 1)</span></span><br><span class="line">        <span class="comment"># gridBagSizerAll.AddGrowableRow(1, 1)</span></span><br><span class="line">        <span class="comment"># gridBagSizerAll.AddGrowableRow(2, 1)</span></span><br><span class="line">        <span class="comment"># gridBagSizerAll.AddGrowableRow(3, 1)</span></span><br><span class="line">        <span class="comment"># gridBagSizerAll.AddGrowableRow(4, 1)</span></span><br><span class="line">        <span class="comment"># gridBagSizerAll.AddGrowableRow(5, 1)</span></span><br><span class="line">        <span class="comment"># gridBagSizerAll.AddGrowableRow(6, 1)</span></span><br><span class="line">        gridBagSizerAll.Fit(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = wx.App()</span><br><span class="line">    frame = Lesson()</span><br><span class="line">    frame.Show()</span><br><span class="line">    app.MainLoop()</span><br></pre></td></tr></table></figure><h2 id="wxPython事件编程"><a href="#wxPython事件编程" class="headerlink" title="wxPython事件编程"></a>wxPython事件编程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="string">'''基于Sizer的控件相对布局'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example3</span><span class="params">(wx.Frame)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        wx.Frame.__init__(self, parent=<span class="keyword">None</span>, id=<span class="number">-1</span>, title=<span class="string">u'极客学院'</span>, size=(<span class="number">600</span>, <span class="number">600</span>))</span><br><span class="line">        self.panel = wx.Panel(self, <span class="number">-1</span>)</span><br><span class="line">        self.Centre()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义我们需要的各个控件</span></span><br><span class="line"></span><br><span class="line">        commandStatic = wx.StaticText(self.panel, <span class="number">-1</span>, <span class="string">u'输命令:'</span>)</span><br><span class="line">        writePyStatic = wx.StaticText(self.panel, <span class="number">-1</span>, <span class="string">u'写代码:'</span>)</span><br><span class="line"></span><br><span class="line">        self.commandText = wx.TextCtrl(self.panel, <span class="number">-1</span>, <span class="string">u''</span>)</span><br><span class="line">        self.writePyText = wx.TextCtrl(self.panel, <span class="number">-1</span>, <span class="string">u'''#-*-coding:utf-8-*-\n#在这写Python代码'''</span>,</span><br><span class="line">                                       style=wx.TE_MULTILINE, size=(<span class="number">300</span>, <span class="number">200</span>))</span><br><span class="line"></span><br><span class="line">        self.send = wx.Button(self.panel, label=<span class="string">u'发送命令'</span>)</span><br><span class="line">        self.clear = wx.Button(self.panel, label=<span class="string">u'清空命令'</span>)</span><br><span class="line">        self.screen = wx.Button(self.panel, label=<span class="string">u'查看屏幕'</span>)</span><br><span class="line"></span><br><span class="line">        self.serverList = [<span class="string">'192.168.0.4'</span>, <span class="string">'10.19.2.1'</span>, <span class="string">'192.168.0.111'</span>, <span class="string">'172.26.123.5'</span>, <span class="string">'192.168.6.11'</span>, <span class="string">'192.99.8.8'</span>]</span><br><span class="line">        self.server = wx.ListBox(self.panel, <span class="number">-1</span>, size=(<span class="number">120</span>, <span class="number">100</span>), choices=self.serverList, style=wx.LB_SINGLE)</span><br><span class="line"></span><br><span class="line">        img = wx.Image(<span class="string">r'python_logo.gif'</span>, wx.BITMAP_TYPE_ANY).Scale(<span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">        self.screenBox = wx.StaticBitmap(self.panel, <span class="number">-1</span>, wx.BitmapFromImage(img))</span><br><span class="line"></span><br><span class="line">        self.Bind(wx.EVT_BUTTON, self.onSend, self.send)</span><br><span class="line">        self.Bind(wx.EVT_BUTTON, self.onClear, self.clear)</span><br><span class="line">        self.Bind(wx.EVT_BUTTON, self.onScreen, self.screen)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 基于GirdBagSizer布局</span></span><br><span class="line">        self.gridBagSizerAll = wx.GridBagSizer(hgap=<span class="number">5</span>, vgap=<span class="number">5</span>)</span><br><span class="line">        self.gridBagSizerAll.Add(self.server, pos=(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">                                 flag=wx.ALL | wx.EXPAND,</span><br><span class="line">                                 span=(<span class="number">7</span>, <span class="number">2</span>), border=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        self.gridBagSizerAll.Add(commandStatic, pos=(<span class="number">0</span>, <span class="number">2</span>),</span><br><span class="line">                                 flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,</span><br><span class="line">                                 border=<span class="number">5</span>)</span><br><span class="line">        self.gridBagSizerAll.Add(self.commandText, pos=(<span class="number">0</span>, <span class="number">3</span>),</span><br><span class="line">                                 flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,</span><br><span class="line">                                 span=(<span class="number">1</span>, <span class="number">2</span>), border=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        self.gridBagSizerAll.Add(writePyStatic, pos=(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">                                 flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,</span><br><span class="line">                                 span=(<span class="number">1</span>, <span class="number">3</span>), border=<span class="number">5</span>)</span><br><span class="line">        self.gridBagSizerAll.Add(self.writePyText, pos=(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">                                 flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,</span><br><span class="line">                                 span=(<span class="number">4</span>, <span class="number">3</span>), border=<span class="number">5</span>)</span><br><span class="line">        self.gridBagSizerAll.Add(self.send, pos=(<span class="number">6</span>, <span class="number">2</span>),</span><br><span class="line">                                 flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,</span><br><span class="line">                                 span=(<span class="number">1</span>, <span class="number">1</span>), border=<span class="number">5</span>)</span><br><span class="line">        self.gridBagSizerAll.Add(self.clear, pos=(<span class="number">6</span>, <span class="number">3</span>),</span><br><span class="line">                                 flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,</span><br><span class="line">                                 span=(<span class="number">1</span>, <span class="number">1</span>), border=<span class="number">5</span>)</span><br><span class="line">        self.gridBagSizerAll.Add(self.screen, pos=(<span class="number">6</span>, <span class="number">4</span>),</span><br><span class="line">                                 flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,</span><br><span class="line">                                 span=(<span class="number">1</span>, <span class="number">1</span>), border=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        self.gridBagSizerAll.Add(self.screenBox, pos=(<span class="number">0</span>, <span class="number">5</span>),</span><br><span class="line">                                 flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,</span><br><span class="line">                                 span=(<span class="number">7</span>, <span class="number">2</span>), border=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        self.panel.SetSizer(self.gridBagSizerAll)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.SetSizeHints(250, 200, 700, 400) #设定窗口的最大最小值</span></span><br><span class="line">        self.gridBagSizerAll.AddGrowableCol(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        self.gridBagSizerAll.AddGrowableCol(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        self.gridBagSizerAll.AddGrowableCol(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">        self.gridBagSizerAll.AddGrowableCol(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">        self.gridBagSizerAll.AddGrowableCol(<span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">        self.gridBagSizerAll.AddGrowableCol(<span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">        self.gridBagSizerAll.AddGrowableCol(<span class="number">6</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.gridBagSizerAll.AddGrowableRow(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        self.gridBagSizerAll.AddGrowableRow(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        self.gridBagSizerAll.AddGrowableRow(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">        self.gridBagSizerAll.AddGrowableRow(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">        self.gridBagSizerAll.AddGrowableRow(<span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">        self.gridBagSizerAll.AddGrowableRow(<span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">        self.gridBagSizerAll.AddGrowableRow(<span class="number">6</span>, <span class="number">1</span>)</span><br><span class="line">        self.gridBagSizerAll.Fit(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onSend</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">if</span> self.server.GetSelection() != <span class="number">-1</span>:</span><br><span class="line">            server = self.serverList[self.server.GetSelection()]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            server = <span class="string">u'未选择服务器'</span></span><br><span class="line">        command = self.commandText.GetValue()</span><br><span class="line">        writePy = self.writePyText.GetValue()</span><br><span class="line">        print(<span class="string">u'选中的服务器是： %s'</span> % server)</span><br><span class="line">        print(<span class="string">u'执行的内置命令是： %s'</span> % command)</span><br><span class="line">        print(<span class="string">u'写入的Python代码是:\n%s'</span> % writePy)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onClear</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        self.commandText.Clear()</span><br><span class="line">        self.writePyText.Clear()</span><br><span class="line">        self.writePyText.AppendText(<span class="string">u'''#-*-coding:utf-8-*-\n#在这些Python代码'''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onScreen</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        img = wx.Image(<span class="string">r'python.gif'</span>, wx.BITMAP_TYPE_ANY).Scale(<span class="number">300</span>, <span class="number">200</span>)</span><br><span class="line">        self.screenBox.SetBitmap(wx.BitmapFromImage(img))</span><br><span class="line">        self.gridBagSizerAll.Fit(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = wx.App()</span><br><span class="line">    frame = Example3()</span><br><span class="line">    frame.Show()</span><br><span class="line">    app.MainLoop()</span><br></pre></td></tr></table></figure><h2 id="Python中的多线程编程"><a href="#Python中的多线程编程" class="headerlink" title="Python中的多线程编程"></a>Python中的多线程编程</h2><ol><li>thread.start_new_thread(函数名，（参数1，参数2，···）)</li><li>或者使用Threading模块创建线程</li></ol><h2 id="scipy库"><a href="#scipy库" class="headerlink" title="scipy库"></a>scipy库</h2><ol><li><p>解非线性方程组</p><ol><li>scipy.optimize子库中的fsolve函数：fsolve(函数, 初始解, 雅可比矩阵)<figure class="highlight python"><figcaption><span>求解非线性方程组</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sin, cos</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> fsolve</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line">    x0, x1, x2 = x.tolist()</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="number">5</span> * x1 + <span class="number">3</span>,</span><br><span class="line">        <span class="number">4</span> * x0 * x0 - <span class="number">2</span> * sin(x1 * x2),</span><br><span class="line">        x1 * x2 - <span class="number">1.5</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">j</span><span class="params">(x)</span>:</span></span><br><span class="line">    x0, x1, x2 = x.tolist()</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        [<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">8</span> * x0, <span class="number">-2</span> * x2 * cos(x1 * x2), <span class="number">-2</span> * x1 * cos(x1 * x2)],</span><br><span class="line">        [<span class="number">0</span>, x2, x1]</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = fsolve(func, [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], fprime=j)</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>数值积分</p><ol><li>scipy.integrate子库中的quad函数：</li><li>一重积分：quad(函数，定积分下限，定积分上限)</li><li>双重积分：dblquad</li><li>三重积分：tplquad<figure class="highlight python"><figcaption><span>求解一重积分</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.integrate <span class="keyword">import</span> quad</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> - x * x) ** <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p, err = quad(func, <span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">print(<span class="number">2</span> * p)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>求解常微分方程</p><ol><li>scipy.integrate子库中的odeint<figure class="highlight python"><figcaption><span>常微分方程组求解方法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.integrate <span class="keyword">import</span> odeint</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lorenz</span><span class="params">(w, t, p, r, b)</span>:</span></span><br><span class="line">    x, y, z = w</span><br><span class="line">    <span class="keyword">return</span> np.array([p * (y - x), x * (r - z), x * y - b * z])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = np.arange(<span class="number">0</span>, <span class="number">30</span>, <span class="number">0.01</span>)</span><br><span class="line">track = odeint(lorenz, (<span class="number">0.0</span>, <span class="number">1.00</span>, <span class="number">0.0</span>), t, args=(<span class="number">10.0</span>, <span class="number">28.0</span>, <span class="number">3.0</span>))</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line">ax.plot(track[:, <span class="number">0</span>], track[:,<span class="number">1</span>], track[:,<span class="number">2</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ol></li><li><p>数值微分</p><ol><li>scipu.misc子库中的derivative<figure class="highlight python"><figcaption><span>求解数值微分</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> derivative</span><br><span class="line"></span><br><span class="line">Ex = <span class="keyword">lambda</span> q: q ** <span class="number">2</span></span><br><span class="line">x0 = np.linspace(<span class="number">-10</span>, <span class="number">10</span>, <span class="number">1000</span>)</span><br><span class="line">dEx = derivative(Ex, x0, dx=<span class="number">1e-6</span>)</span><br><span class="line">plt.plot(x0, dEx)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="mpl-toolkits库"><a href="#mpl-toolkits库" class="headerlink" title="mpl_toolkits库"></a>mpl_toolkits库</h2><figure class="highlight python"><figcaption><span>3D效果图</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line">th = np.linspace(<span class="number">-4</span> * np.pi, <span class="number">4</span> * np.pi, <span class="number">100</span>)</span><br><span class="line">z = np.linspace(<span class="number">-2</span>, <span class="number">2</span>, <span class="number">100</span>)</span><br><span class="line">r = z ** <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">x = r * np.sin(th)</span><br><span class="line">y = r * np.cos(th)</span><br><span class="line"></span><br><span class="line">ax.plot()</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" title="">                </div>                <div class="image-caption">suda-morris</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python中的常量&quot;&gt;&lt;a href=&quot;#Python中的常量&quot; class=&quot;headerlink&quot; title=&quot;Python中的常量&quot;&gt;&lt;/a&gt;Python中的常量&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;figcapt
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="Python" scheme="https://suda-morris.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Office Word Skills</title>
    <link href="https://suda-morris.github.io/2015/05/25/microsoft-office/"/>
    <id>https://suda-morris.github.io/2015/05/25/microsoft-office/</id>
    <published>2015-05-25T02:45:00.000Z</published>
    <updated>2018-07-05T01:38:09.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从任意页开始设置页码"><a href="#从任意页开始设置页码" class="headerlink" title="从任意页开始设置页码"></a>从任意页开始设置页码</h2><ol><li>将鼠标光标点击到开始编页码的前一页末尾</li><li>点击菜单栏的<code>页面布局</code></li><li>在<code>页面布局</code>栏目下，点击分隔符后面的倒三角</li><li>弹出分隔符的相关功能栏目，点击<code>下一页</code></li><li>双击页眉的位置，激活页眉编辑</li><li>在需要开始编页码的那页页眉处点击<code>链接到前一页页眉</code></li><li>移动光标到本页的页脚，并激活页脚编辑</li><li>在同一页（即需要开始编页码的那页）的页脚处点击<code>链接到前一页页眉</code></li><li>然后在需要开始编页码的页脚处点击<code>页码</code>-&gt;设置页码格式，将起始页设置为1</li><li>点击进入<code>插入</code>菜单栏，选择<code>页码</code>,选择喜欢的页码格式</li></ol><h2 id="公式居中标号居右"><a href="#公式居中标号居右" class="headerlink" title="公式居中标号居右"></a>公式居中标号居右</h2><ol><li>在视图工具栏中打开标尺</li><li>公式先居中，在标尺上记录下此时公式的位置，根据标号长度大于预估距离页边的距离，并在标尺上做标记(此时应该有两个标记)，设置标记属性(只要在其中一个标记上双击即可)，将公式标号的位置属性设置为【右对齐】</li><li>将公式靠左对齐，紧跟其后写上标号。</li><li>光标紧跟公式前面，按下Tab键，公式即可跳到标尺上的第一个标记处。光标置于公式标号前，再按下Tab键，公式标号跳到靠近标尺末尾处，此时鼠标拖动第二个标记至标尺最右端，公式标号保证靠右对齐！</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" title="">                </div>                <div class="image-caption">suda-morris</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;从任意页开始设置页码&quot;&gt;&lt;a href=&quot;#从任意页开始设置页码&quot; class=&quot;headerlink&quot; title=&quot;从任意页开始设置页码&quot;&gt;&lt;/a&gt;从任意页开始设置页码&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;将鼠标光标点击到开始编页码的前一页末尾&lt;/li&gt;
&lt;li&gt;点击菜
      
    
    </summary>
    
      <category term="Office Skills" scheme="https://suda-morris.github.io/categories/Office-Skills/"/>
    
    
      <category term="Word" scheme="https://suda-morris.github.io/tags/Word/"/>
    
  </entry>
  
  <entry>
    <title>Install Ubuntu Mate LTS</title>
    <link href="https://suda-morris.github.io/2015/05/24/ubuntu-mate/"/>
    <id>https://suda-morris.github.io/2015/05/24/ubuntu-mate/</id>
    <published>2015-05-24T12:02:00.000Z</published>
    <updated>2018-07-05T01:38:09.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ubuntu-Mate14-04-2-LTS安装"><a href="#Ubuntu-Mate14-04-2-LTS安装" class="headerlink" title="Ubuntu-Mate14.04.2-LTS安装"></a>Ubuntu-Mate14.04.2-LTS安装</h2><ol><li><a href="https://ubuntu-mate.org/" target="_blank" rel="noopener">进入Ubutnu-Mate官网下载ISO镜像后安装到虚拟机</a></li><li>安装结束后，打开自带的软件中心，进入-&gt;编辑-&gt;软件源，选择访问速度最快的国内镜像站(软件可以自动选取速度最快的站点)</li><li>依次安装以下软件，安装命令为:<code>sudo apt-get install</code><ul><li>文本编辑器:gedit vim </li><li>基本开发工具：build-essential</li><li>生成工程Makefile的工具：autoconf automake </li><li>词法扫描分析工具：flex bison texinfo git-core gnupg gperf valgrind</li><li>C语言函数用户手册：manpages-dev libncurses-dev libsdl-dev libesd0-dev libwxgtk2.6-dev ncurses-dev</li><li>其他程序的用户手册：binutils-doc cpp-doc gcc-doc glib-doc stl-manual docbook-utils </li><li>其他：chrpath socat diffstat texi2html mercurial groff asciidoc</li><li>压缩工具： zip</li><li>网络工具: curl</li><li>串口工具：minicom，完了以后修改minicom的配置权限：<code>sudo chown morris：morris /etc/minicom/minirc.dfl</code></li><li>Ubuntu-Tweak工具安装：<ul><li>添加tweak源：sudo add-apt-repository ppa:tualatrix/ppa</li><li>更新：sudo apt-get update</li><li>安装ubuntu-tweak：sudo apt-get install ubuntu-tweak</li></ul></li><li>超强vim配置文件：wget -qO- <a href="https://raw.github.com/ma6174/vim/master/setup.sh" target="_blank" rel="noopener">https://raw.github.com/ma6174/vim/master/setup.sh</a> | sh -x</li><li>下载工具：uget与aria2<ul><li><code>sudo add-apt-repository ppa:plushuang-tw/uget-stable</code></li><li><code>sudo ap-get update</code></li><li><code>sudo apt-get install uget</code> </li><li><code>sudo apt-get install aria2</code></li><li>打开uget软件，进入插件设置，选择aria插件</li><li>修改最大连接数为16</li></ul></li><li>输入法工具安装：fcitx:<ul><li><code>sudo apt-get install fcitx-table-wbpy</code></li><li>进入<code>语言支持</code>-&gt;把<code>键盘输入方式系统</code>改为<code>fcitx</code>，重启系统</li></ul></li><li>用WPS替换掉Ubuntu自带的Office</li><li>去<a href="http://www.qt.io/download/" target="_blank" rel="noopener">Qt官网</a>下载QtCreator</li><li>安装Lua5.3：<ul><li><a href="http://www.lua.org/ftp" target="_blank" rel="noopener">下载安装源码</a> </li><li>安装库文件：<code>sudo apt-get install libreadline</code>和<code>sudo apt-get install libreadline-gplv2-dev</code></li><li>进入源码顶层目录，修改Makefile里面的软件安装地址</li><li>修改完成后，<code>make linux</code>然后<code>make install</code></li></ul></li><li>编译crosstool-ng需要的安装环境<br>  <code>sudo apt-get install bison flex texinfo automake libtool cvs patch curl gcj subversion gawk cvsd gperf libexpat1-dev</code></li></ul></li><li>VirtualBox安装增强工具<ul><li>进入VirtualBox设备-&gt;安装增强工具</li><li>在Ubuntu中，进入挂在的CD(一般在media下)，运行sudo ./VBoxLinuxAdditions.run后等待完成安装</li></ul></li><li>设置root密码：<code>sudo passwd root</code></li><li>修改Ubuntu默认JDK配置<ol><li>将要添加的JDK加入Java菜单选项<ul><li><code>update-alternatives --install /usr/bin/java java /usr/lib/jvm/java/jdk1.6.0_12/bin/java 300</code></li><li><code>update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java/jdk1.6.0_12/bin/javac 300</code></li></ul></li><li>修改默认JDK<ul><li><code>sudo update-alternatives --config java</code></li></ul></li></ol></li><li>NFS远程文件系统<ol><li>安装NFS服务器：<code>sudo apt-get install nfs-kernel-server portmap</code></li><li>配置远程主机共享目录：<ul><li>设置一个共享目录的方法是修改/etc/exports文件，增加一行例如:<code>/embeded/WenRisOS/NFS_doc *(rw,sync,no_root_squash)</code></li></ul></li><li>重启服务:<code>sudo /etc/init.d/nfs-kernel-server restart</code></li><li>检测NFS服务是否设置正常：<code>showmount -e</code></li><li>目标板挂载远程主机：mount -o nolock -t nfs 192.168.1.88:/embeded/WenRisOS/NFS_doc /mnt</li><li>使用uboot的nfs命令下载远程主机文件到开发板内存：<code>nfs 0x32000000 192.168.1.11:/work/system/linux/arch/arm/boot/uImage</code></li></ol></li><li>FTP服务器软件配置：<ol><li>安装FTP服务：<code>sudo apt-get install vsftpd</code></li><li>修改FTP服务配置文件:<code>sudo vim /etc/vsftpd.conf</code><ul><li>使能listen,local_enable,write_enable</li></ul></li><li>重启FTP服务<ul><li><code>sudo /etc/init.d/vsftpd restart</code></li></ul></li></ol></li><li>JLink安装<ul><li><a href="https://www.segger.com/jlink-software.html" target="_blank" rel="noopener">官网下载J-Link安装压缩包</a></li><li>注意选择Linux安装包的时候匹配操作系统的位数，这里下载了64位Linux系统的TGA压缩包，版本5.0</li><li>下载好的压缩包解压缩，打开里面的README.txt,按照其要求作相应的操作，各个本版可能要求不同，拿5.0来说，这里需要执行命令：<code>sudo cp 99-jlink.rules /etc/udev/rules.d/</code></li><li>最后接入JLink的USB接口，打开软件：<code>./JLinkExe</code>,如果显示usb连接不上，请检查USB是否连接可靠，虚拟机是否已经从实体机那获得了该JLink接口，多插拔几次，在该软件中使用命令usb可以尝试再次连接usb接口，如果成功，会出现类似如下的文字：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">J-Link&gt;usb</span><br><span class="line">Connecting to J-Link via USB (Port: 0)</span><br><span class="line">DLL version V5.00, compiled Jun  8 2015 21:14:03</span><br><span class="line">Firmware: J-Link ARM V8 compiled Nov 28 2014 13:44:46</span><br><span class="line">Hardware: V8.00</span><br><span class="line">S/N: 158000503 </span><br><span class="line">Feature(s): RDI,FlashDL,FlashBP,JFlash,GDBFull </span><br><span class="line">VTarget = 3.319V</span><br><span class="line">Info: TotalIRLen = 9, IRPrint = 0x0011</span><br><span class="line">Found 2 JTAG devices, Total IRLen = 5:</span><br><span class="line">#0 Id: 0x2B900F0F, IRLen: 04, IRPrint: 0x0, ARM ETB</span><br><span class="line">#1 Id: 0x07B76F0F, IRLen: 05, IRPrint: 0x1, ARM1176 Core</span><br><span class="line">ARM11 identified.</span><br><span class="line">Target interface speed: 100 kHz</span><br><span class="line">J-Link&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="常见问题及解决方法"><a href="#常见问题及解决方法" class="headerlink" title="常见问题及解决方法"></a>常见问题及解决方法</h2><ol><li>在Ubuntu登陆界面输入密码之后，黑屏一闪后，又跳转到登录界面。<ul><li>原因：主目录下的.Xauthority文件拥有者变成了root，从而以用户登陆的时候无法都取.Xauthority文件。</li><li>方法1：将.Xauthority的拥有者改为登陆用户。开机后在登陆界面按下shift + ctrl + F1进入tty命令行终端登陆后输入: sudo chown 用户名:用户名 .Xauthority</li><li>方法2：命令行输入：dpkg-reconfigure lightdm重新配置登陆器，重启</li></ul></li><li><p>如何在64位系统上编译32位可执行程序</p><ul><li>确认当前架构为64位的内核<ul><li>打开终端输入<code>dpkg --print-architecture</code>,如果看到amd64表示已经拥有了64位架构的内核</li></ul></li><li>确认打开了多核架构的支持功能<ul><li>打开终端输入<code>dpkg --print-foreign-architecture</code>,如果看到输出i386表示已经打开了多架构支持</li><li>如果没有打开，使用如下方法：<ul><li>下载更新然后运行：<code>sudo dpkg --add-architecture i386</code>，然后<code>sudo apt-get update</code></li><li>输入<code>sudo apt-get -f dist-upgrade</code>检查已经拥有的库文件是否有更新版本</li></ul></li></ul></li><li>安装兼容包<ul><li><code>sudo apt-get install libc6:i386</code></li><li><code>sudo apt-get install gcc-multilib g++-multilib</code></li><li><code>sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0 libgtk2.0-0:i386 libpangox-1.0-0:i386 libpangoxft-1.0-0:i386 libidn11:i386 gstreamer0.10-pulseaudio:i386 gstreamer0.10-plugins-base:i386 gstreamer0.10-plugins-good:i386</code></li></ul></li><li><p>注意，在13.10后Ubuntu不提供ia32-libs的套件了，但是还是可以这样来安装：</p><figure class="highlight shell"><figcaption><span>Ubuntu14.04安装ia32-libs库</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">cd /etc/apt/sources.list.d</span><br><span class="line">echo "deb http://archive.ubuntu.com/ubuntu/ raring main restricted universe multiverse" &gt;ia32-libs-raring.list</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install ia32-libs</span><br><span class="line">rm /etc/apt/sources.list.d/ia32-libs-raring.list</span><br><span class="line">apt-get update</span><br><span class="line">exit</span><br><span class="line">sudo apt-get install gcc-multilib</span><br></pre></td></tr></table></figure></li></ul></li><li><p>如何添加应用程序的快捷方式，以Eclipse软件为例</p><ol><li>首先进入/usr/share/applications目录下，创建eclipse.desktop</li><li>编辑eclipse.desktop，内容如下：<pre><code class="bash">[Desktop Entry]Type=ApplicationName=Eclipse   --应用程序名Comment=Eclipse     --程序简介Icon=/home/lai/Software/eclipse/icon.xpm    --图标地址Exec=/home/lai/Software/eclipse/eclipse      --应用程序地址Terminal=<span class="literal">false</span>Categories=Development;IDE;Java;  </code></pre></li></ol></li><li>如何通过搜索的方式安装软件<ol><li>例如：<code>sudo apt-cache search nfs-</code></li></ol></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" title="">                </div>                <div class="image-caption">suda-morris</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ubuntu-Mate14-04-2-LTS安装&quot;&gt;&lt;a href=&quot;#Ubuntu-Mate14-04-2-LTS安装&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu-Mate14.04.2-LTS安装&quot;&gt;&lt;/a&gt;Ubuntu-Mate14.
      
    
    </summary>
    
      <category term="Geek Hobbies" scheme="https://suda-morris.github.io/categories/Geek-Hobbies/"/>
    
    
      <category term="Ubuntu" scheme="https://suda-morris.github.io/tags/Ubuntu/"/>
    
  </entry>
  
</feed>
